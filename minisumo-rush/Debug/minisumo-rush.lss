
minisumo-rush.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003622  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000390  00800060  00003622  000036b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000198  008003f0  008003f0  00003a46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003a46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000525e  00000000  00000000  00003ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ae9  00000000  00000000  0000912e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000342f  00000000  00000000  0000ac17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b64  00000000  00000000  0000e048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000184f  00000000  00000000  0000ebac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022c4  00000000  00000000  000103fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  000126bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__vector_3>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__vector_7>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	20 06       	cpc	r2, r16
      56:	9f 06       	cpc	r9, r31
      58:	db 06       	cpc	r13, r27
      5a:	c0 07       	cpc	r28, r16
      5c:	d3 07       	cpc	r29, r19
      5e:	d6 07       	cpc	r29, r22
      60:	d9 07       	cpc	r29, r25
      62:	26 08       	sbc	r2, r6
      64:	31 08       	sbc	r3, r1
      66:	46 08       	sbc	r4, r6
      68:	5b 08       	sbc	r5, r11
      6a:	70 08       	sbc	r7, r0
      6c:	7b 08       	sbc	r7, r11
      6e:	90 08       	sbc	r9, r0
      70:	da 08       	sbc	r13, r10
      72:	dd 08       	sbc	r13, r13
      74:	11 09       	sbc	r17, r1
      76:	44 09       	sbc	r20, r4
      78:	78 09       	sbc	r23, r8
      7a:	7b 09       	sbc	r23, r11
      7c:	a2 09       	sbc	r26, r2
      7e:	a6 09       	sbc	r26, r6

00000080 <__ctors_end>:
      80:	11 24       	eor	r1, r1
      82:	1f be       	out	0x3f, r1	; 63
      84:	cf e5       	ldi	r28, 0x5F	; 95
      86:	d8 e0       	ldi	r29, 0x08	; 8
      88:	de bf       	out	0x3e, r29	; 62
      8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
      8c:	13 e0       	ldi	r17, 0x03	; 3
      8e:	a0 e6       	ldi	r26, 0x60	; 96
      90:	b0 e0       	ldi	r27, 0x00	; 0
      92:	e2 e2       	ldi	r30, 0x22	; 34
      94:	f6 e3       	ldi	r31, 0x36	; 54
      96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
      98:	05 90       	lpm	r0, Z+
      9a:	0d 92       	st	X+, r0
      9c:	a0 3f       	cpi	r26, 0xF0	; 240
      9e:	b1 07       	cpc	r27, r17
      a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
      a2:	25 e0       	ldi	r18, 0x05	; 5
      a4:	a0 ef       	ldi	r26, 0xF0	; 240
      a6:	b3 e0       	ldi	r27, 0x03	; 3
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
      ac:	a8 38       	cpi	r26, 0x88	; 136
      ae:	b2 07       	cpc	r27, r18
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
      b2:	0e 94 cd 12 	call	0x259a	; 0x259a <main>
      b6:	0c 94 0f 1b 	jmp	0x361e	; 0x361e <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <Back_Handler>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void Back_Handler(void)
{
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
	switch(sCurrentMachineState)
      c2:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <sCurrentMachineState>
      c6:	81 11       	cpse	r24, r1
      c8:	22 c0       	rjmp	.+68     	; 0x10e <Back_Handler+0x50>
	{
		case BACK_MACHINE_STATE_REVERSE:
		{
			if(Time_GetMillis() - sFullRotationTimeMillis >= BACK_HALF_TURN_DURATION_TIME_MILLIS)
      ca:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
      ce:	00 91 f2 03 	lds	r16, 0x03F2	; 0x8003f2 <sFullRotationTimeMillis>
      d2:	10 91 f3 03 	lds	r17, 0x03F3	; 0x8003f3 <sFullRotationTimeMillis+0x1>
      d6:	20 91 f4 03 	lds	r18, 0x03F4	; 0x8003f4 <sFullRotationTimeMillis+0x2>
      da:	30 91 f5 03 	lds	r19, 0x03F5	; 0x8003f5 <sFullRotationTimeMillis+0x3>
      de:	dc 01       	movw	r26, r24
      e0:	cb 01       	movw	r24, r22
      e2:	80 1b       	sub	r24, r16
      e4:	91 0b       	sbc	r25, r17
      e6:	a2 0b       	sbc	r26, r18
      e8:	b3 0b       	sbc	r27, r19
      ea:	8c 32       	cpi	r24, 0x2C	; 44
      ec:	91 40       	sbci	r25, 0x01	; 1
      ee:	a1 05       	cpc	r26, r1
      f0:	b1 05       	cpc	r27, r1
      f2:	68 f0       	brcs	.+26     	; 0x10e <Back_Handler+0x50>
			{
				Motor_Run(MOTOR_ID_LEFT, MOTOR_STOP_SPEED);
      f4:	60 e0       	ldi	r22, 0x00	; 0
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
				Motor_Run(MOTOR_ID_RIGHT, MOTOR_STOP_SPEED);
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
				
				Fight_SetState(FIGHT_MACHINE_STATE_LOOP);	
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	0e 94 3a 04 	call	0x874	; 0x874 <Fight_SetState>
		default:
		{
			break;
		}	
	}
}
     10e:	1f 91       	pop	r17
     110:	0f 91       	pop	r16
     112:	08 95       	ret

00000114 <Back_SetState>:

void Back_SetState(Back_MachineState_t machineState)
{
	sLastMachineState = sCurrentMachineState;
     114:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <sCurrentMachineState>
     118:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <__data_end>
	sCurrentMachineState = machineState;
     11c:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <sCurrentMachineState>
	
	switch(sCurrentMachineState)
     120:	81 11       	cpse	r24, r1
     122:	13 c0       	rjmp	.+38     	; 0x14a <Back_SetState+0x36>
	{
		case BACK_MACHINE_STATE_REVERSE:
		{
			Motor_Run(MOTOR_ID_LEFT, -BACK_HALF_TURN_ROTATE_SPEED);
     124:	68 e3       	ldi	r22, 0x38	; 56
     126:	7f ef       	ldi	r23, 0xFF	; 255
     128:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			Motor_Run(MOTOR_ID_RIGHT, BACK_HALF_TURN_ROTATE_SPEED);
     12c:	68 ec       	ldi	r22, 0xC8	; 200
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
								
			sFullRotationTimeMillis = Time_GetMillis();
     136:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     13a:	60 93 f2 03 	sts	0x03F2, r22	; 0x8003f2 <sFullRotationTimeMillis>
     13e:	70 93 f3 03 	sts	0x03F3, r23	; 0x8003f3 <sFullRotationTimeMillis+0x1>
     142:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <sFullRotationTimeMillis+0x2>
     146:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <sFullRotationTimeMillis+0x3>
		{
			break;
		}
	}
	
	Terminal_Log(TASK_NAME, LOG_INFO, "Change state from [%s] to [%s].",
     14a:	8b ea       	ldi	r24, 0xAB	; 171
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	9f 93       	push	r25
     150:	8f 93       	push	r24
     152:	9f 93       	push	r25
     154:	8f 93       	push	r24
     156:	83 eb       	ldi	r24, 0xB3	; 179
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	9f 93       	push	r25
     15c:	8f 93       	push	r24
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	8f 93       	push	r24
     162:	83 ed       	ldi	r24, 0xD3	; 211
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	9f 93       	push	r25
     168:	8f 93       	push	r24
     16a:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
	sMachineStateString[sLastMachineState],
	sMachineStateString[sCurrentMachineState]);
     16e:	8d b7       	in	r24, 0x3d	; 61
     170:	9e b7       	in	r25, 0x3e	; 62
     172:	09 96       	adiw	r24, 0x09	; 9
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	f8 94       	cli
     178:	9e bf       	out	0x3e, r25	; 62
     17a:	0f be       	out	0x3f, r0	; 63
     17c:	8d bf       	out	0x3d, r24	; 61
     17e:	08 95       	ret

00000180 <Edge_SetState>:
	}
}

void Edge_SetState(Edge_MachineState_t machineState)
{
	sLastMachineState = sCurrentMachineState;
     180:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <sCurrentMachineState>
     184:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <sLastMachineState>
	sCurrentMachineState = machineState;
     188:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <sCurrentMachineState>
	
	switch(sCurrentMachineState)
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	79 f0       	breq	.+30     	; 0x1ae <Edge_SetState+0x2e>
     190:	18 f0       	brcs	.+6      	; 0x198 <Edge_SetState+0x18>
     192:	82 30       	cpi	r24, 0x02	; 2
     194:	09 f1       	breq	.+66     	; 0x1d8 <Edge_SetState+0x58>
     196:	2a c0       	rjmp	.+84     	; 0x1ec <Edge_SetState+0x6c>
	{
		case EDGE_MACHINE_STATE_ESTIMATE_ANGLE:
		{
			sEstimateLineAngleTimestampMillis = Time_GetMillis();
     198:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     19c:	60 93 fc 03 	sts	0x03FC, r22	; 0x8003fc <sEstimateLineAngleTimestampMillis>
     1a0:	70 93 fd 03 	sts	0x03FD, r23	; 0x8003fd <sEstimateLineAngleTimestampMillis+0x1>
     1a4:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <sEstimateLineAngleTimestampMillis+0x2>
     1a8:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <sEstimateLineAngleTimestampMillis+0x3>
			
			break;
     1ac:	1f c0       	rjmp	.+62     	; 0x1ec <Edge_SetState+0x6c>
		}
		
		case EDGE_MACHINE_STATE_REVERSE_AND_ROTATE:
		{
			Motor_Run(MOTOR_ID_LEFT, (int16_t)EDGE_REVERSAL_SPEED_FROM_LINE);
     1ae:	6a e6       	ldi	r22, 0x6A	; 106
     1b0:	7f ef       	ldi	r23, 0xFF	; 255
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			Motor_Run(MOTOR_ID_RIGHT, (int16_t)EDGE_REVERSAL_SPEED_FROM_LINE);
     1b8:	6a e6       	ldi	r22, 0x6A	; 106
     1ba:	7f ef       	ldi	r23, 0xFF	; 255
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			
			sEstimateLineAngleTimestampMillis = Time_GetMillis();
     1c2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     1c6:	60 93 fc 03 	sts	0x03FC, r22	; 0x8003fc <sEstimateLineAngleTimestampMillis>
     1ca:	70 93 fd 03 	sts	0x03FD, r23	; 0x8003fd <sEstimateLineAngleTimestampMillis+0x1>
     1ce:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <sEstimateLineAngleTimestampMillis+0x2>
     1d2:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <sEstimateLineAngleTimestampMillis+0x3>
			
			break;
     1d6:	0a c0       	rjmp	.+20     	; 0x1ec <Edge_SetState+0x6c>
		}
		
		case EDGE_MACHINE_STATE_RETURN:
		{
			sEstimateLineAngleTimestampMillis = Time_GetMillis();
     1d8:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     1dc:	60 93 fc 03 	sts	0x03FC, r22	; 0x8003fc <sEstimateLineAngleTimestampMillis>
     1e0:	70 93 fd 03 	sts	0x03FD, r23	; 0x8003fd <sEstimateLineAngleTimestampMillis+0x1>
     1e4:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <sEstimateLineAngleTimestampMillis+0x2>
     1e8:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <sEstimateLineAngleTimestampMillis+0x3>
		{
			break;
		}
	}
	
	Terminal_Log(TASK_NAME, LOG_INFO, "Change state from [%s] to [%s].",
     1ec:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <sCurrentMachineState>
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	ee 0f       	add	r30, r30
     1f4:	ff 1f       	adc	r31, r31
     1f6:	e0 50       	subi	r30, 0x00	; 0
     1f8:	ff 4f       	sbci	r31, 0xFF	; 255
     1fa:	81 81       	ldd	r24, Z+1	; 0x01
     1fc:	8f 93       	push	r24
     1fe:	80 81       	ld	r24, Z
     200:	8f 93       	push	r24
     202:	e0 91 f6 03 	lds	r30, 0x03F6	; 0x8003f6 <sLastMachineState>
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	ee 0f       	add	r30, r30
     20a:	ff 1f       	adc	r31, r31
     20c:	e0 50       	subi	r30, 0x00	; 0
     20e:	ff 4f       	sbci	r31, 0xFF	; 255
     210:	81 81       	ldd	r24, Z+1	; 0x01
     212:	8f 93       	push	r24
     214:	80 81       	ld	r24, Z
     216:	8f 93       	push	r24
     218:	83 eb       	ldi	r24, 0xB3	; 179
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	9f 93       	push	r25
     21e:	8f 93       	push	r24
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	8f 93       	push	r24
     224:	88 ed       	ldi	r24, 0xD8	; 216
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
	sMachineStateString[sLastMachineState],
	sMachineStateString[sCurrentMachineState]);
}
     230:	8d b7       	in	r24, 0x3d	; 61
     232:	9e b7       	in	r25, 0x3e	; 62
     234:	09 96       	adiw	r24, 0x09	; 9
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	f8 94       	cli
     23a:	9e bf       	out	0x3e, r25	; 62
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	8d bf       	out	0x3d, r24	; 61
     240:	08 95       	ret

00000242 <Edge_Handler>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void Edge_Handler(void)
{
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
	switch(sCurrentMachineState)
     246:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <sCurrentMachineState>
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	09 f4       	brne	.+2      	; 0x250 <Edge_Handler+0xe>
     24e:	48 c0       	rjmp	.+144    	; 0x2e0 <Edge_Handler+0x9e>
     250:	20 f0       	brcs	.+8      	; 0x25a <Edge_Handler+0x18>
     252:	82 30       	cpi	r24, 0x02	; 2
     254:	09 f4       	brne	.+2      	; 0x258 <Edge_Handler+0x16>
     256:	cd c0       	rjmp	.+410    	; 0x3f2 <Edge_Handler+0x1b0>
     258:	fa c0       	rjmp	.+500    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
	{
		case EDGE_MACHINE_STATE_ESTIMATE_ANGLE:
		{
			Line_Output_t line = Line_GetState();
     25a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Line_GetState>
     25e:	17 2f       	mov	r17, r23
			
			if(line.state[LINE_SENS_FRONT_LEFT] == true
     260:	66 23       	and	r22, r22
     262:	89 f0       	breq	.+34     	; 0x286 <Edge_Handler+0x44>
			&& sLineDetectedLatch[LINE_SENS_FRONT_LEFT] == false)
     264:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <sLineDetectedLatch>
     268:	81 11       	cpse	r24, r1
     26a:	0d c0       	rjmp	.+26     	; 0x286 <Edge_Handler+0x44>
			{
				sLineDetectedLatch[LINE_SENS_FRONT_LEFT] = true;
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <sLineDetectedLatch>
				
				sDifferenceBetweenDetectionMillis[LINE_SENS_FRONT_LEFT] = Time_GetMillis();
     272:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     276:	60 93 00 04 	sts	0x0400, r22	; 0x800400 <sDifferenceBetweenDetectionMillis>
     27a:	70 93 01 04 	sts	0x0401, r23	; 0x800401 <sDifferenceBetweenDetectionMillis+0x1>
     27e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <sDifferenceBetweenDetectionMillis+0x2>
     282:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <sDifferenceBetweenDetectionMillis+0x3>
			}
			
			if(line.state[LINE_SENS_FRONT_RIGHT] == true
     286:	11 23       	and	r17, r17
     288:	89 f0       	breq	.+34     	; 0x2ac <Edge_Handler+0x6a>
			&& sLineDetectedLatch[LINE_SENS_FRONT_RIGHT] == false)
     28a:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <sLineDetectedLatch+0x1>
     28e:	81 11       	cpse	r24, r1
     290:	0d c0       	rjmp	.+26     	; 0x2ac <Edge_Handler+0x6a>
			{
				sLineDetectedLatch[LINE_SENS_FRONT_RIGHT] = true;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <sLineDetectedLatch+0x1>
				
				sDifferenceBetweenDetectionMillis[LINE_SENS_FRONT_RIGHT] = Time_GetMillis();
     298:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     29c:	60 93 04 04 	sts	0x0404, r22	; 0x800404 <sDifferenceBetweenDetectionMillis+0x4>
     2a0:	70 93 05 04 	sts	0x0405, r23	; 0x800405 <sDifferenceBetweenDetectionMillis+0x5>
     2a4:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <sDifferenceBetweenDetectionMillis+0x6>
     2a8:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <sDifferenceBetweenDetectionMillis+0x7>
			}
			
			if(Time_GetMillis() - sEstimateLineAngleTimestampMillis >= EDGE_ESTIMATING_LINE_ANGLE_DELAY_MILLIS)
     2ac:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     2b0:	00 91 fc 03 	lds	r16, 0x03FC	; 0x8003fc <sEstimateLineAngleTimestampMillis>
     2b4:	10 91 fd 03 	lds	r17, 0x03FD	; 0x8003fd <sEstimateLineAngleTimestampMillis+0x1>
     2b8:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <sEstimateLineAngleTimestampMillis+0x2>
     2bc:	30 91 ff 03 	lds	r19, 0x03FF	; 0x8003ff <sEstimateLineAngleTimestampMillis+0x3>
     2c0:	dc 01       	movw	r26, r24
     2c2:	cb 01       	movw	r24, r22
     2c4:	80 1b       	sub	r24, r16
     2c6:	91 0b       	sbc	r25, r17
     2c8:	a2 0b       	sbc	r26, r18
     2ca:	b3 0b       	sbc	r27, r19
     2cc:	86 34       	cpi	r24, 0x46	; 70
     2ce:	91 05       	cpc	r25, r1
     2d0:	a1 05       	cpc	r26, r1
     2d2:	b1 05       	cpc	r27, r1
     2d4:	08 f4       	brcc	.+2      	; 0x2d8 <Edge_Handler+0x96>
     2d6:	bb c0       	rjmp	.+374    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			{
				sDifferenceBetweenDetection = (uint32_t)abs((int32_t)(
				sDifferenceBetweenDetectionMillis[LINE_SENS_FRONT_LEFT]
				- sDifferenceBetweenDetectionMillis[LINE_SENS_FRONT_RIGHT]));
				
				Edge_SetState(EDGE_MACHINE_STATE_REVERSE_AND_ROTATE);
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	0e 94 c0 00 	call	0x180	; 0x180 <Edge_SetState>
     2de:	b7 c0       	rjmp	.+366    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			break;
		}

		case EDGE_MACHINE_STATE_REVERSE_AND_ROTATE:
		{
			if(Time_GetMillis() - sEstimateLineAngleTimestampMillis >= EDGE_REVERSE_TIME_MILLIS)
     2e0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     2e4:	00 91 fc 03 	lds	r16, 0x03FC	; 0x8003fc <sEstimateLineAngleTimestampMillis>
     2e8:	10 91 fd 03 	lds	r17, 0x03FD	; 0x8003fd <sEstimateLineAngleTimestampMillis+0x1>
     2ec:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <sEstimateLineAngleTimestampMillis+0x2>
     2f0:	30 91 ff 03 	lds	r19, 0x03FF	; 0x8003ff <sEstimateLineAngleTimestampMillis+0x3>
     2f4:	dc 01       	movw	r26, r24
     2f6:	cb 01       	movw	r24, r22
     2f8:	80 1b       	sub	r24, r16
     2fa:	91 0b       	sbc	r25, r17
     2fc:	a2 0b       	sbc	r26, r18
     2fe:	b3 0b       	sbc	r27, r19
     300:	86 39       	cpi	r24, 0x96	; 150
     302:	91 05       	cpc	r25, r1
     304:	a1 05       	cpc	r26, r1
     306:	b1 05       	cpc	r27, r1
     308:	08 f4       	brcc	.+2      	; 0x30c <Edge_Handler+0xca>
     30a:	a1 c0       	rjmp	.+322    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			{
				if(sLineDetectedLatch[LINE_SENS_FRONT_LEFT] == true
     30c:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <sLineDetectedLatch>
     310:	88 23       	and	r24, r24
     312:	d9 f0       	breq	.+54     	; 0x34a <Edge_Handler+0x108>
				&& sLineDetectedLatch[LINE_SENS_FRONT_RIGHT] == true)
     314:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <sLineDetectedLatch+0x1>
     318:	99 23       	and	r25, r25
     31a:	b9 f0       	breq	.+46     	; 0x34a <Edge_Handler+0x108>
				{
					Motor_Run(MOTOR_ID_LEFT, (int16_t)-EDGE_ROTATE_AFTER_REVERSAL_SPEED);
     31c:	68 e3       	ldi	r22, 0x38	; 56
     31e:	7f ef       	ldi	r23, 0xFF	; 255
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					Motor_Run(MOTOR_ID_RIGHT, (int16_t)EDGE_ROTATE_AFTER_REVERSAL_SPEED);
     326:	68 ec       	ldi	r22, 0xC8	; 200
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					
					sRotationAngleAsTimeMillis = EDGE_FRONT_LEFT_RIGHT_ROTATE_DURATION_MILLIS;// - sDifferenceBetweenDetection; todo: check it
     330:	81 ee       	ldi	r24, 0xE1	; 225
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	a0 e0       	ldi	r26, 0x00	; 0
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <sRotationAngleAsTimeMillis>
     33c:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <sRotationAngleAsTimeMillis+0x1>
     340:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <sRotationAngleAsTimeMillis+0x2>
     344:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <sRotationAngleAsTimeMillis+0x3>
     348:	50 c0       	rjmp	.+160    	; 0x3ea <Edge_Handler+0x1a8>
				}
				else if(sLineDetectedLatch[LINE_SENS_FRONT_LEFT] == true
     34a:	88 23       	and	r24, r24
     34c:	d9 f0       	breq	.+54     	; 0x384 <Edge_Handler+0x142>
				&& sLineDetectedLatch[LINE_SENS_FRONT_RIGHT] == false)
     34e:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <sLineDetectedLatch+0x1>
     352:	91 11       	cpse	r25, r1
     354:	17 c0       	rjmp	.+46     	; 0x384 <Edge_Handler+0x142>
				{
					Motor_Run(MOTOR_ID_LEFT, (int16_t)EDGE_ROTATE_AFTER_REVERSAL_SPEED);
     356:	68 ec       	ldi	r22, 0xC8	; 200
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					Motor_Run(MOTOR_ID_RIGHT, (int16_t)-EDGE_ROTATE_AFTER_REVERSAL_SPEED);
     360:	68 e3       	ldi	r22, 0x38	; 56
     362:	7f ef       	ldi	r23, 0xFF	; 255
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					
					sRotationAngleAsTimeMillis = EDGE_FRONT_LEFT_ROTATE_DURATION_MILLIS;
     36a:	8a ef       	ldi	r24, 0xFA	; 250
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <sRotationAngleAsTimeMillis>
     376:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <sRotationAngleAsTimeMillis+0x1>
     37a:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <sRotationAngleAsTimeMillis+0x2>
     37e:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <sRotationAngleAsTimeMillis+0x3>
     382:	33 c0       	rjmp	.+102    	; 0x3ea <Edge_Handler+0x1a8>
				}
				else if(sLineDetectedLatch[LINE_SENS_FRONT_LEFT] == false
     384:	81 11       	cpse	r24, r1
     386:	1b c0       	rjmp	.+54     	; 0x3be <Edge_Handler+0x17c>
				&& sLineDetectedLatch[LINE_SENS_FRONT_RIGHT] == true)
     388:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <sLineDetectedLatch+0x1>
     38c:	88 23       	and	r24, r24
     38e:	b9 f0       	breq	.+46     	; 0x3be <Edge_Handler+0x17c>
				{
					Motor_Run(MOTOR_ID_LEFT, (int16_t)-EDGE_ROTATE_AFTER_REVERSAL_SPEED);
     390:	68 e3       	ldi	r22, 0x38	; 56
     392:	7f ef       	ldi	r23, 0xFF	; 255
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					Motor_Run(MOTOR_ID_RIGHT, (int16_t)EDGE_ROTATE_AFTER_REVERSAL_SPEED);
     39a:	68 ec       	ldi	r22, 0xC8	; 200
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					
					sRotationAngleAsTimeMillis = EDGE_FRONT_RIGHT_ROTATE_DURATION_MILLIS;
     3a4:	82 e8       	ldi	r24, 0x82	; 130
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	a0 e0       	ldi	r26, 0x00	; 0
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <sRotationAngleAsTimeMillis>
     3b0:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <sRotationAngleAsTimeMillis+0x1>
     3b4:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <sRotationAngleAsTimeMillis+0x2>
     3b8:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <sRotationAngleAsTimeMillis+0x3>
     3bc:	16 c0       	rjmp	.+44     	; 0x3ea <Edge_Handler+0x1a8>
				}
				else
				{
					Motor_Run(MOTOR_ID_LEFT, (int16_t)-EDGE_ROTATE_AFTER_REVERSAL_SPEED);
     3be:	68 e3       	ldi	r22, 0x38	; 56
     3c0:	7f ef       	ldi	r23, 0xFF	; 255
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					Motor_Run(MOTOR_ID_RIGHT, (int16_t)EDGE_ROTATE_AFTER_REVERSAL_SPEED);
     3c8:	68 ec       	ldi	r22, 0xC8	; 200
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					
					sRotationAngleAsTimeMillis = EDGE_FRONT_LEFT_RIGHT_ROTATE_DURATION_MILLIS;
     3d2:	81 ee       	ldi	r24, 0xE1	; 225
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	a0 e0       	ldi	r26, 0x00	; 0
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <sRotationAngleAsTimeMillis>
     3de:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <sRotationAngleAsTimeMillis+0x1>
     3e2:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <sRotationAngleAsTimeMillis+0x2>
     3e6:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <sRotationAngleAsTimeMillis+0x3>
				}
				
				Edge_SetState(EDGE_MACHINE_STATE_RETURN);
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	0e 94 c0 00 	call	0x180	; 0x180 <Edge_SetState>
     3f0:	2e c0       	rjmp	.+92     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			break;
		}
		
		case EDGE_MACHINE_STATE_RETURN:
		{
			if(Time_GetMillis() - sEstimateLineAngleTimestampMillis >= sRotationAngleAsTimeMillis)
     3f2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     3f6:	00 91 fc 03 	lds	r16, 0x03FC	; 0x8003fc <sEstimateLineAngleTimestampMillis>
     3fa:	10 91 fd 03 	lds	r17, 0x03FD	; 0x8003fd <sEstimateLineAngleTimestampMillis+0x1>
     3fe:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <sEstimateLineAngleTimestampMillis+0x2>
     402:	30 91 ff 03 	lds	r19, 0x03FF	; 0x8003ff <sEstimateLineAngleTimestampMillis+0x3>
     406:	dc 01       	movw	r26, r24
     408:	cb 01       	movw	r24, r22
     40a:	80 1b       	sub	r24, r16
     40c:	91 0b       	sbc	r25, r17
     40e:	a2 0b       	sbc	r26, r18
     410:	b3 0b       	sbc	r27, r19
     412:	00 91 f8 03 	lds	r16, 0x03F8	; 0x8003f8 <sRotationAngleAsTimeMillis>
     416:	10 91 f9 03 	lds	r17, 0x03F9	; 0x8003f9 <sRotationAngleAsTimeMillis+0x1>
     41a:	20 91 fa 03 	lds	r18, 0x03FA	; 0x8003fa <sRotationAngleAsTimeMillis+0x2>
     41e:	30 91 fb 03 	lds	r19, 0x03FB	; 0x8003fb <sRotationAngleAsTimeMillis+0x3>
     422:	80 17       	cp	r24, r16
     424:	91 07       	cpc	r25, r17
     426:	a2 07       	cpc	r26, r18
     428:	b3 07       	cpc	r27, r19
     42a:	88 f0       	brcs	.+34     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			{
				Motor_Run(MOTOR_ID_LEFT, MOTOR_STOP_SPEED);
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
				Motor_Run(MOTOR_ID_RIGHT, MOTOR_STOP_SPEED);
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
				
				sLineDetectedLatch[LINE_SENS_FRONT_LEFT] = false;
     440:	e0 e1       	ldi	r30, 0x10	; 16
     442:	f4 e0       	ldi	r31, 0x04	; 4
     444:	10 82       	st	Z, r1
				sLineDetectedLatch[LINE_SENS_FRONT_RIGHT] = false;
     446:	11 82       	std	Z+1, r1	; 0x01
								
				Fight_SetState(FIGHT_MACHINE_STATE_LOOP);
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	0e 94 3a 04 	call	0x874	; 0x874 <Fight_SetState>
		default:
		{
			break;
		}
	}
}
     44e:	1f 91       	pop	r17
     450:	0f 91       	pop	r16
     452:	08 95       	ret

00000454 <Loop>:
/******************************************************************************
                        PRIVATE FUNCTION IMPLEMENTATION
******************************************************************************/

static void Loop(void)
{
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	00 d0       	rcall	.+0      	; 0x466 <Loop+0x12>
     466:	00 d0       	rcall	.+0      	; 0x468 <Loop+0x14>
     468:	00 d0       	rcall	.+0      	; 0x46a <Loop+0x16>
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
	Distance_Output_t output = Distance_GetFrontStateArray();
     46e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <Distance_GetFrontStateArray>
     472:	14 2f       	mov	r17, r20
     474:	29 83       	std	Y+1, r18	; 0x01
     476:	3a 83       	std	Y+2, r19	; 0x02
     478:	5c 83       	std	Y+4, r21	; 0x04
     47a:	6d 83       	std	Y+5, r22	; 0x05
	
	if(output.front[DIST_SENS_FRONT] == false)
     47c:	41 11       	cpse	r20, r1
     47e:	0a c0       	rjmp	.+20     	; 0x494 <Loop+0x40>
	{
		sFrontTargettingTimeoutMillis = Time_GetMillis();	
     480:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     484:	60 93 62 04 	sts	0x0462, r22	; 0x800462 <sFrontTargettingTimeoutMillis>
     488:	70 93 63 04 	sts	0x0463, r23	; 0x800463 <sFrontTargettingTimeoutMillis+0x1>
     48c:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <sFrontTargettingTimeoutMillis+0x2>
     490:	90 93 65 04 	sts	0x0465, r25	; 0x800465 <sFrontTargettingTimeoutMillis+0x3>
	}
	
	sActiveSensorsCnt = (uint8_t)output.front[DIST_SENS_LEFT]
     494:	89 81       	ldd	r24, Y+1	; 0x01
	+ (uint8_t)output.front[DIST_SENS_LEFT_DIAG]
     496:	0a 81       	ldd	r16, Y+2	; 0x02
	+ (uint8_t)output.front[DIST_SENS_FRONT]
	+ (uint8_t)output.front[DIST_SENS_RIGHT_DIAG]
     498:	4c 81       	ldd	r20, Y+4	; 0x04
	+ (uint8_t)output.front[DIST_SENS_RIGHT];
     49a:	fd 81       	ldd	r31, Y+5	; 0x05
	if(output.front[DIST_SENS_FRONT] == false)
	{
		sFrontTargettingTimeoutMillis = Time_GetMillis();	
	}
	
	sActiveSensorsCnt = (uint8_t)output.front[DIST_SENS_LEFT]
     49c:	e8 2f       	mov	r30, r24
     49e:	e0 0f       	add	r30, r16
     4a0:	e1 0f       	add	r30, r17
     4a2:	e4 0f       	add	r30, r20
     4a4:	ef 0f       	add	r30, r31
     4a6:	e0 93 6e 04 	sts	0x046E, r30	; 0x80046e <sActiveSensorsCnt>
	+ (uint8_t)output.front[DIST_SENS_LEFT_DIAG]
	+ (uint8_t)output.front[DIST_SENS_FRONT]
	+ (uint8_t)output.front[DIST_SENS_RIGHT_DIAG]
	+ (uint8_t)output.front[DIST_SENS_RIGHT];
	
	sCourse = (int32_t)((uint8_t)output.front[DIST_SENS_LEFT] * sDistanceSensorsFrontWeight[DIST_SENS_LEFT])
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	9c 01       	movw	r18, r24
     4ae:	22 0f       	add	r18, r18
     4b0:	33 1f       	adc	r19, r19
     4b2:	22 0f       	add	r18, r18
     4b4:	33 1f       	adc	r19, r19
     4b6:	82 0f       	add	r24, r18
     4b8:	93 1f       	adc	r25, r19
     4ba:	09 2e       	mov	r0, r25
     4bc:	00 0c       	add	r0, r0
     4be:	aa 0b       	sbc	r26, r26
     4c0:	bb 0b       	sbc	r27, r27
	+ (int32_t)((uint8_t)output.front[DIST_SENS_LEFT_DIAG] * sDistanceSensorsFrontWeight[DIST_SENS_LEFT_DIAG])
     4c2:	10 e0       	ldi	r17, 0x00	; 0
     4c4:	00 0f       	add	r16, r16
     4c6:	11 1f       	adc	r17, r17
     4c8:	01 2e       	mov	r0, r17
     4ca:	00 0c       	add	r0, r0
     4cc:	22 0b       	sbc	r18, r18
     4ce:	33 0b       	sbc	r19, r19
     4d0:	80 0f       	add	r24, r16
     4d2:	91 1f       	adc	r25, r17
     4d4:	a2 1f       	adc	r26, r18
     4d6:	b3 1f       	adc	r27, r19
	+ (int32_t)((uint8_t)output.front[DIST_SENS_FRONT] * sDistanceSensorsFrontWeight[DIST_SENS_FRONT])
	+ (int32_t)((uint8_t)output.front[DIST_SENS_RIGHT_DIAG] * sDistanceSensorsFrontWeight[DIST_SENS_RIGHT_DIAG])
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	51 95       	neg	r21
     4dc:	41 95       	neg	r20
     4de:	51 09       	sbc	r21, r1
     4e0:	44 0f       	add	r20, r20
     4e2:	55 1f       	adc	r21, r21
     4e4:	05 2e       	mov	r0, r21
     4e6:	00 0c       	add	r0, r0
     4e8:	66 0b       	sbc	r22, r22
     4ea:	77 0b       	sbc	r23, r23
     4ec:	84 0f       	add	r24, r20
     4ee:	95 1f       	adc	r25, r21
     4f0:	a6 1f       	adc	r26, r22
     4f2:	b7 1f       	adc	r27, r23
	+ (int32_t)((uint8_t)output.front[DIST_SENS_RIGHT] * sDistanceSensorsFrontWeight[DIST_SENS_RIGHT]);
     4f4:	4f 2f       	mov	r20, r31
     4f6:	5b ef       	ldi	r21, 0xFB	; 251
     4f8:	54 03       	mulsu	r21, r20
     4fa:	90 01       	movw	r18, r0
     4fc:	11 24       	eor	r1, r1
     4fe:	a9 01       	movw	r20, r18
     500:	33 0f       	add	r19, r19
     502:	66 0b       	sbc	r22, r22
     504:	77 0b       	sbc	r23, r23
     506:	9a 01       	movw	r18, r20
     508:	ab 01       	movw	r20, r22
     50a:	28 0f       	add	r18, r24
     50c:	39 1f       	adc	r19, r25
     50e:	4a 1f       	adc	r20, r26
     510:	5b 1f       	adc	r21, r27
	+ (uint8_t)output.front[DIST_SENS_LEFT_DIAG]
	+ (uint8_t)output.front[DIST_SENS_FRONT]
	+ (uint8_t)output.front[DIST_SENS_RIGHT_DIAG]
	+ (uint8_t)output.front[DIST_SENS_RIGHT];
	
	sCourse = (int32_t)((uint8_t)output.front[DIST_SENS_LEFT] * sDistanceSensorsFrontWeight[DIST_SENS_LEFT])
     512:	20 93 5e 04 	sts	0x045E, r18	; 0x80045e <sCourse>
     516:	30 93 5f 04 	sts	0x045F, r19	; 0x80045f <sCourse+0x1>
     51a:	40 93 60 04 	sts	0x0460, r20	; 0x800460 <sCourse+0x2>
     51e:	50 93 61 04 	sts	0x0461, r21	; 0x800461 <sCourse+0x3>
	+ (int32_t)((uint8_t)output.front[DIST_SENS_LEFT_DIAG] * sDistanceSensorsFrontWeight[DIST_SENS_LEFT_DIAG])
	+ (int32_t)((uint8_t)output.front[DIST_SENS_FRONT] * sDistanceSensorsFrontWeight[DIST_SENS_FRONT])
	+ (int32_t)((uint8_t)output.front[DIST_SENS_RIGHT_DIAG] * sDistanceSensorsFrontWeight[DIST_SENS_RIGHT_DIAG])
	+ (int32_t)((uint8_t)output.front[DIST_SENS_RIGHT] * sDistanceSensorsFrontWeight[DIST_SENS_RIGHT]);

	if(sActiveSensorsCnt > 0U)
     522:	ee 23       	and	r30, r30
     524:	59 f1       	breq	.+86     	; 0x57c <Loop+0x128>
	{
		sCourse = (sCourse * (int32_t)sPid.scale) / (int32_t)sActiveSensorsCnt;
     526:	60 91 50 04 	lds	r22, 0x0450	; 0x800450 <sPid+0x3c>
     52a:	70 91 51 04 	lds	r23, 0x0451	; 0x800451 <sPid+0x3d>
     52e:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <sPid+0x3e>
     532:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <sPid+0x3f>
     536:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__mulsi3>
     53a:	2e 2f       	mov	r18, r30
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__divmodsi4>
     546:	20 93 5e 04 	sts	0x045E, r18	; 0x80045e <sCourse>
     54a:	30 93 5f 04 	sts	0x045F, r19	; 0x80045f <sCourse+0x1>
     54e:	40 93 60 04 	sts	0x0460, r20	; 0x800460 <sCourse+0x2>
     552:	50 93 61 04 	sts	0x0461, r21	; 0x800461 <sCourse+0x3>
		sLastCourse = sCourse;
     556:	20 93 5a 04 	sts	0x045A, r18	; 0x80045a <sLastCourse>
     55a:	30 93 5b 04 	sts	0x045B, r19	; 0x80045b <sLastCourse+0x1>
     55e:	40 93 5c 04 	sts	0x045C, r20	; 0x80045c <sLastCourse+0x2>
     562:	50 93 5d 04 	sts	0x045D, r21	; 0x80045d <sLastCourse+0x3>
		
		sLastCourseTimeoutMillis = Time_GetMillis();
     566:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     56a:	60 93 66 04 	sts	0x0466, r22	; 0x800466 <sLastCourseTimeoutMillis>
     56e:	70 93 67 04 	sts	0x0467, r23	; 0x800467 <sLastCourseTimeoutMillis+0x1>
     572:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <sLastCourseTimeoutMillis+0x2>
     576:	90 93 69 04 	sts	0x0469, r25	; 0x800469 <sLastCourseTimeoutMillis+0x3>
     57a:	3c c0       	rjmp	.+120    	; 0x5f4 <Loop+0x1a0>
	}
	else
	{
		if(Time_GetMillis() - sLastCourseTimeoutMillis >= FIGHT_USING_LAST_COURSE_EXECUTION_TIME_MILLIS)
     57c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     580:	00 91 66 04 	lds	r16, 0x0466	; 0x800466 <sLastCourseTimeoutMillis>
     584:	10 91 67 04 	lds	r17, 0x0467	; 0x800467 <sLastCourseTimeoutMillis+0x1>
     588:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <sLastCourseTimeoutMillis+0x2>
     58c:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <sLastCourseTimeoutMillis+0x3>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	80 1b       	sub	r24, r16
     596:	91 0b       	sbc	r25, r17
     598:	a2 0b       	sbc	r26, r18
     59a:	b3 0b       	sbc	r27, r19
     59c:	88 3b       	cpi	r24, 0xB8	; 184
     59e:	9b 40       	sbci	r25, 0x0B	; 11
     5a0:	a1 05       	cpc	r26, r1
     5a2:	b1 05       	cpc	r27, r1
     5a4:	b8 f0       	brcs	.+46     	; 0x5d4 <Loop+0x180>
		{
			sCourse = 0;
     5a6:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <sCourse>
     5aa:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <sCourse+0x1>
     5ae:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <sCourse+0x2>
     5b2:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <sCourse+0x3>
			sPid.integral = 0;
     5b6:	e4 e1       	ldi	r30, 0x14	; 20
     5b8:	f4 e0       	ldi	r31, 0x04	; 4
     5ba:	14 8e       	std	Z+28, r1	; 0x1c
     5bc:	15 8e       	std	Z+29, r1	; 0x1d
     5be:	16 8e       	std	Z+30, r1	; 0x1e
     5c0:	17 8e       	std	Z+31, r1	; 0x1f
			sPid.derivative = 0;
     5c2:	10 a2       	std	Z+32, r1	; 0x20
     5c4:	11 a2       	std	Z+33, r1	; 0x21
     5c6:	12 a2       	std	Z+34, r1	; 0x22
     5c8:	13 a2       	std	Z+35, r1	; 0x23
			sPid.lastError = 0;
     5ca:	14 8a       	std	Z+20, r1	; 0x14
     5cc:	15 8a       	std	Z+21, r1	; 0x15
     5ce:	16 8a       	std	Z+22, r1	; 0x16
     5d0:	17 8a       	std	Z+23, r1	; 0x17
     5d2:	10 c0       	rjmp	.+32     	; 0x5f4 <Loop+0x1a0>
		}
		else
		{
			sCourse = sLastCourse;	
     5d4:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <sLastCourse>
     5d8:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <sLastCourse+0x1>
     5dc:	a0 91 5c 04 	lds	r26, 0x045C	; 0x80045c <sLastCourse+0x2>
     5e0:	b0 91 5d 04 	lds	r27, 0x045D	; 0x80045d <sLastCourse+0x3>
     5e4:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <sCourse>
     5e8:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <sCourse+0x1>
     5ec:	a0 93 60 04 	sts	0x0460, r26	; 0x800460 <sCourse+0x2>
     5f0:	b0 93 61 04 	sts	0x0461, r27	; 0x800461 <sCourse+0x3>
		}	
	}
	
	if(sActiveSensorsCnt > 0U
     5f4:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <sActiveSensorsCnt>
     5f8:	88 23       	and	r24, r24
     5fa:	39 f1       	breq	.+78     	; 0x64a <Loop+0x1f6>
		&& sCourse == 0)
     5fc:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <sCourse>
     600:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <sCourse+0x1>
     604:	a0 91 60 04 	lds	r26, 0x0460	; 0x800460 <sCourse+0x2>
     608:	b0 91 61 04 	lds	r27, 0x0461	; 0x800461 <sCourse+0x3>
     60c:	89 2b       	or	r24, r25
     60e:	8a 2b       	or	r24, r26
     610:	8b 2b       	or	r24, r27
     612:	d9 f4       	brne	.+54     	; 0x64a <Loop+0x1f6>
	{
		sDefaultFightSpeed = (int32_t)FIGHT_MAX_ATTACK_SPEED;
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	a0 e0       	ldi	r26, 0x00	; 0
     61a:	b0 e0       	ldi	r27, 0x00	; 0
     61c:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <sDefaultFightSpeed>
     620:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <sDefaultFightSpeed+0x1>
     624:	a0 93 58 04 	sts	0x0458, r26	; 0x800458 <sDefaultFightSpeed+0x2>
     628:	b0 93 59 04 	sts	0x0459, r27	; 0x800459 <sDefaultFightSpeed+0x3>
		sPid.integral = 0;
     62c:	e4 e1       	ldi	r30, 0x14	; 20
     62e:	f4 e0       	ldi	r31, 0x04	; 4
     630:	14 8e       	std	Z+28, r1	; 0x1c
     632:	15 8e       	std	Z+29, r1	; 0x1d
     634:	16 8e       	std	Z+30, r1	; 0x1e
     636:	17 8e       	std	Z+31, r1	; 0x1f
		sPid.derivative = 0;
     638:	10 a2       	std	Z+32, r1	; 0x20
     63a:	11 a2       	std	Z+33, r1	; 0x21
     63c:	12 a2       	std	Z+34, r1	; 0x22
     63e:	13 a2       	std	Z+35, r1	; 0x23
		sPid.lastError = 0;
     640:	14 8a       	std	Z+20, r1	; 0x14
     642:	15 8a       	std	Z+21, r1	; 0x15
     644:	16 8a       	std	Z+22, r1	; 0x16
     646:	17 8a       	std	Z+23, r1	; 0x17
     648:	44 c0       	rjmp	.+136    	; 0x6d2 <Loop+0x27e>
	}
	else if(Time_GetMillis() - sFrontTargettingTimeoutMillis >= FIGHT_FRONT_TARGETTING_TIMEOUT_MILLIS)
     64a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     64e:	00 91 62 04 	lds	r16, 0x0462	; 0x800462 <sFrontTargettingTimeoutMillis>
     652:	10 91 63 04 	lds	r17, 0x0463	; 0x800463 <sFrontTargettingTimeoutMillis+0x1>
     656:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <sFrontTargettingTimeoutMillis+0x2>
     65a:	30 91 65 04 	lds	r19, 0x0465	; 0x800465 <sFrontTargettingTimeoutMillis+0x3>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
     662:	80 1b       	sub	r24, r16
     664:	91 0b       	sbc	r25, r17
     666:	a2 0b       	sbc	r26, r18
     668:	b3 0b       	sbc	r27, r19
     66a:	84 3f       	cpi	r24, 0xF4	; 244
     66c:	91 40       	sbci	r25, 0x01	; 1
     66e:	a1 05       	cpc	r26, r1
     670:	b1 05       	cpc	r27, r1
     672:	18 f1       	brcs	.+70     	; 0x6ba <Loop+0x266>
	{
		sDefaultFightSpeed = (int32_t)FIGHT_MAX_ATTACK_SPEED;
     674:	8f ef       	ldi	r24, 0xFF	; 255
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	a0 e0       	ldi	r26, 0x00	; 0
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <sDefaultFightSpeed>
     680:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <sDefaultFightSpeed+0x1>
     684:	a0 93 58 04 	sts	0x0458, r26	; 0x800458 <sDefaultFightSpeed+0x2>
     688:	b0 93 59 04 	sts	0x0459, r27	; 0x800459 <sDefaultFightSpeed+0x3>
		sCourse = 0;
     68c:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <sCourse>
     690:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <sCourse+0x1>
     694:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <sCourse+0x2>
     698:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <sCourse+0x3>
		sPid.integral = 0;
     69c:	e4 e1       	ldi	r30, 0x14	; 20
     69e:	f4 e0       	ldi	r31, 0x04	; 4
     6a0:	14 8e       	std	Z+28, r1	; 0x1c
     6a2:	15 8e       	std	Z+29, r1	; 0x1d
     6a4:	16 8e       	std	Z+30, r1	; 0x1e
     6a6:	17 8e       	std	Z+31, r1	; 0x1f
		sPid.derivative = 0;
     6a8:	10 a2       	std	Z+32, r1	; 0x20
     6aa:	11 a2       	std	Z+33, r1	; 0x21
     6ac:	12 a2       	std	Z+34, r1	; 0x22
     6ae:	13 a2       	std	Z+35, r1	; 0x23
		sPid.lastError = 0;	
     6b0:	14 8a       	std	Z+20, r1	; 0x14
     6b2:	15 8a       	std	Z+21, r1	; 0x15
     6b4:	16 8a       	std	Z+22, r1	; 0x16
     6b6:	17 8a       	std	Z+23, r1	; 0x17
     6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <Loop+0x27e>
	}
	else
	{
		sDefaultFightSpeed = (int32_t)FIGHT_MOTOR_DEFAULT_SPEED;
     6ba:	86 e4       	ldi	r24, 0x46	; 70
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	a0 e0       	ldi	r26, 0x00	; 0
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <sDefaultFightSpeed>
     6c6:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <sDefaultFightSpeed+0x1>
     6ca:	a0 93 58 04 	sts	0x0458, r26	; 0x800458 <sDefaultFightSpeed+0x2>
     6ce:	b0 93 59 04 	sts	0x0459, r27	; 0x800459 <sDefaultFightSpeed+0x3>
	}
	
	int32_t pidOut = ComputePidOutput(&sPid, sCourse);
     6d2:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <sCourse>
     6d6:	50 91 5f 04 	lds	r21, 0x045F	; 0x80045f <sCourse+0x1>
     6da:	60 91 60 04 	lds	r22, 0x0460	; 0x800460 <sCourse+0x2>
     6de:	70 91 61 04 	lds	r23, 0x0461	; 0x800461 <sCourse+0x3>
     6e2:	84 e1       	ldi	r24, 0x14	; 20
     6e4:	94 e0       	ldi	r25, 0x04	; 4
     6e6:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <ComputePidOutput>
     6ea:	6b 01       	movw	r12, r22
     6ec:	7c 01       	movw	r14, r24

	Terminal_Log(TASK_NAME, LOG_OK, "L: %ld R: %ld Err: %ld DefSp: %ld PidOut: %ld", sDefaultFightSpeed + pidOut, sDefaultFightSpeed - pidOut, sCourse, sDefaultFightSpeed, pidOut);
     6ee:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <sDefaultFightSpeed>
     6f2:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <sDefaultFightSpeed+0x1>
     6f6:	a0 91 58 04 	lds	r26, 0x0458	; 0x800458 <sDefaultFightSpeed+0x2>
     6fa:	b0 91 59 04 	lds	r27, 0x0459	; 0x800459 <sDefaultFightSpeed+0x3>
     6fe:	ff 92       	push	r15
     700:	ef 92       	push	r14
     702:	df 92       	push	r13
     704:	cf 92       	push	r12
     706:	bf 93       	push	r27
     708:	af 93       	push	r26
     70a:	9f 93       	push	r25
     70c:	8f 93       	push	r24
     70e:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <sCourse+0x3>
     712:	2f 93       	push	r18
     714:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <sCourse+0x2>
     718:	2f 93       	push	r18
     71a:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <sCourse+0x1>
     71e:	2f 93       	push	r18
     720:	20 91 5e 04 	lds	r18, 0x045E	; 0x80045e <sCourse>
     724:	2f 93       	push	r18
     726:	ac 01       	movw	r20, r24
     728:	bd 01       	movw	r22, r26
     72a:	4c 19       	sub	r20, r12
     72c:	5d 09       	sbc	r21, r13
     72e:	6e 09       	sbc	r22, r14
     730:	7f 09       	sbc	r23, r15
     732:	7f 93       	push	r23
     734:	6f 93       	push	r22
     736:	5f 93       	push	r21
     738:	4f 93       	push	r20
     73a:	8c 0d       	add	r24, r12
     73c:	9d 1d       	adc	r25, r13
     73e:	ae 1d       	adc	r26, r14
     740:	bf 1d       	adc	r27, r15
     742:	bf 93       	push	r27
     744:	af 93       	push	r26
     746:	9f 93       	push	r25
     748:	8f 93       	push	r24
     74a:	86 e0       	ldi	r24, 0x06	; 6
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	8f 93       	push	r24
     756:	84 e3       	ldi	r24, 0x34	; 52
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
	
// 	Motor_Run(MOTOR_ID_LEFT, 0);
// 	Motor_Run(MOTOR_ID_RIGHT, 0);

	Motor_Run(MOTOR_ID_LEFT, (int16_t)(sDefaultFightSpeed + pidOut));
     762:	06 e5       	ldi	r16, 0x56	; 86
     764:	14 e0       	ldi	r17, 0x04	; 4
     766:	f8 01       	movw	r30, r16
     768:	60 81       	ld	r22, Z
     76a:	71 81       	ldd	r23, Z+1	; 0x01
     76c:	6c 0d       	add	r22, r12
     76e:	7d 1d       	adc	r23, r13
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
	Motor_Run(MOTOR_ID_RIGHT, (int16_t)(sDefaultFightSpeed - pidOut));
     776:	f8 01       	movw	r30, r16
     778:	60 81       	ld	r22, Z
     77a:	71 81       	ldd	r23, Z+1	; 0x01
     77c:	6c 19       	sub	r22, r12
     77e:	7d 09       	sbc	r23, r13
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
}
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	26 96       	adiw	r28, 0x06	; 6
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
     7a8:	df 90       	pop	r13
     7aa:	cf 90       	pop	r12
     7ac:	08 95       	ret

000007ae <Fight_Init>:
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void Fight_Init(void)
{
	sPid.scale = INT_RESOLUTION_MULTIPLIER;
     7ae:	e4 e1       	ldi	r30, 0x14	; 20
     7b0:	f4 e0       	ldi	r31, 0x04	; 4
     7b2:	8a e0       	ldi	r24, 0x0A	; 10
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	a0 e0       	ldi	r26, 0x00	; 0
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	84 af       	std	Z+60, r24	; 0x3c
     7bc:	95 af       	std	Z+61, r25	; 0x3d
     7be:	a6 af       	std	Z+62, r26	; 0x3e
     7c0:	b7 af       	std	Z+63, r27	; 0x3f

	sPid.setpoint = 0;
     7c2:	14 86       	std	Z+12, r1	; 0x0c
     7c4:	15 86       	std	Z+13, r1	; 0x0d
     7c6:	16 86       	std	Z+14, r1	; 0x0e
     7c8:	17 86       	std	Z+15, r1	; 0x0f
	sPid.difference = 0;
     7ca:	10 8a       	std	Z+16, r1	; 0x10
     7cc:	11 8a       	std	Z+17, r1	; 0x11
     7ce:	12 8a       	std	Z+18, r1	; 0x12
     7d0:	13 8a       	std	Z+19, r1	; 0x13
	sPid.lastError = 0;
     7d2:	14 8a       	std	Z+20, r1	; 0x14
     7d4:	15 8a       	std	Z+21, r1	; 0x15
     7d6:	16 8a       	std	Z+22, r1	; 0x16
     7d8:	17 8a       	std	Z+23, r1	; 0x17
	sPid.derivative = 0;
     7da:	10 a2       	std	Z+32, r1	; 0x20
     7dc:	11 a2       	std	Z+33, r1	; 0x21
     7de:	12 a2       	std	Z+34, r1	; 0x22
     7e0:	13 a2       	std	Z+35, r1	; 0x23
	sPid.integral = 0;
     7e2:	14 8e       	std	Z+28, r1	; 0x1c
     7e4:	15 8e       	std	Z+29, r1	; 0x1d
     7e6:	16 8e       	std	Z+30, r1	; 0x1e
     7e8:	17 8e       	std	Z+31, r1	; 0x1f
	sPid.proportional = 0;
     7ea:	10 8e       	std	Z+24, r1	; 0x18
     7ec:	11 8e       	std	Z+25, r1	; 0x19
     7ee:	12 8e       	std	Z+26, r1	; 0x1a
     7f0:	13 8e       	std	Z+27, r1	; 0x1b
	sPid.derivativeOut = 0;
     7f2:	14 a6       	std	Z+44, r1	; 0x2c
     7f4:	15 a6       	std	Z+45, r1	; 0x2d
     7f6:	16 a6       	std	Z+46, r1	; 0x2e
     7f8:	17 a6       	std	Z+47, r1	; 0x2f
	sPid.integralOut = 0;
     7fa:	10 a6       	std	Z+40, r1	; 0x28
     7fc:	11 a6       	std	Z+41, r1	; 0x29
     7fe:	12 a6       	std	Z+42, r1	; 0x2a
     800:	13 a6       	std	Z+43, r1	; 0x2b
	sPid.proportionalOut = 0;
     802:	14 a2       	std	Z+36, r1	; 0x24
     804:	15 a2       	std	Z+37, r1	; 0x25
     806:	16 a2       	std	Z+38, r1	; 0x26
     808:	17 a2       	std	Z+39, r1	; 0x27
	
	sPid.kpVal = (int32_t)FIGHT_PID_KP_VALUE;
     80a:	82 e3       	ldi	r24, 0x32	; 50
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	a0 e0       	ldi	r26, 0x00	; 0
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	80 83       	st	Z, r24
     814:	91 83       	std	Z+1, r25	; 0x01
     816:	a2 83       	std	Z+2, r26	; 0x02
     818:	b3 83       	std	Z+3, r27	; 0x03
	sPid.kiVal = (int32_t)FIGHT_PID_KI_VALUE;
     81a:	14 82       	std	Z+4, r1	; 0x04
     81c:	15 82       	std	Z+5, r1	; 0x05
     81e:	16 82       	std	Z+6, r1	; 0x06
     820:	17 82       	std	Z+7, r1	; 0x07
	sPid.kdVal = (int32_t)FIGHT_PID_KD_VALUE;
     822:	10 86       	std	Z+8, r1	; 0x08
     824:	11 86       	std	Z+9, r1	; 0x09
     826:	12 86       	std	Z+10, r1	; 0x0a
     828:	13 86       	std	Z+11, r1	; 0x0b
	
	sPid.integralWindup = (int32_t)FIGHT_PID_INTEGRAL_WINDUP;
     82a:	8c e2       	ldi	r24, 0x2C	; 44
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	a0 e0       	ldi	r26, 0x00	; 0
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	80 ab       	std	Z+48, r24	; 0x30
     834:	91 ab       	std	Z+49, r25	; 0x31
     836:	a2 ab       	std	Z+50, r26	; 0x32
     838:	b3 ab       	std	Z+51, r27	; 0x33

	sPid.outputMin = (int32_t)FIGHT_PID_OUTPUT_MIN; //(int32_t)FIGHT_PID_OUTPUT_MIN - (int32_t)FIGHT_MOTOR_DEFAULT_SPEED;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	9f ef       	ldi	r25, 0xFF	; 255
     83e:	af ef       	ldi	r26, 0xFF	; 255
     840:	bf ef       	ldi	r27, 0xFF	; 255
     842:	84 ab       	std	Z+52, r24	; 0x34
     844:	95 ab       	std	Z+53, r25	; 0x35
     846:	a6 ab       	std	Z+54, r26	; 0x36
     848:	b7 ab       	std	Z+55, r27	; 0x37
	sPid.outputMax = (int32_t)FIGHT_PID_OUTPUT_MAX; //(int32_t)FIGHT_PID_OUTPUT_MAX - (int32_t)FIGHT_MOTOR_DEFAULT_SPEED;
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a0 e0       	ldi	r26, 0x00	; 0
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	80 af       	std	Z+56, r24	; 0x38
     854:	91 af       	std	Z+57, r25	; 0x39
     856:	a2 af       	std	Z+58, r26	; 0x3a
     858:	b3 af       	std	Z+59, r27	; 0x3b
	
	sDefaultFightSpeed = (int32_t)FIGHT_MOTOR_DEFAULT_SPEED;
     85a:	86 e4       	ldi	r24, 0x46	; 70
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	a0 e0       	ldi	r26, 0x00	; 0
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <sDefaultFightSpeed>
     866:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <sDefaultFightSpeed+0x1>
     86a:	a0 93 58 04 	sts	0x0458, r26	; 0x800458 <sDefaultFightSpeed+0x2>
     86e:	b0 93 59 04 	sts	0x0459, r27	; 0x800459 <sDefaultFightSpeed+0x3>
     872:	08 95       	ret

00000874 <Fight_SetState>:
	}
}

void Fight_SetState(Fight_MachineState_t machineState)
{
	sLastMachineState = sCurrentMachineState;
     874:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <sCurrentMachineState>
     878:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <sLastMachineState>
	sCurrentMachineState = machineState;
     87c:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <sCurrentMachineState>
	
	switch(sCurrentMachineState)
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	51 f4       	brne	.+20     	; 0x898 <Fight_SetState+0x24>
			break;
		}
		
		case FIGHT_MACHINE_STATE_LOOP:
		{
			sBackSensorActivityTimeMillis = Time_GetMillis();	
     884:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     888:	60 93 6a 04 	sts	0x046A, r22	; 0x80046a <sBackSensorActivityTimeMillis>
     88c:	70 93 6b 04 	sts	0x046B, r23	; 0x80046b <sBackSensorActivityTimeMillis+0x1>
     890:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <sBackSensorActivityTimeMillis+0x2>
     894:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <sBackSensorActivityTimeMillis+0x3>
		{
			break;
		}
	}
	
	Terminal_Log(TASK_NAME, LOG_INFO, "Change state from [%s] to [%s].",
     898:	e0 91 55 04 	lds	r30, 0x0455	; 0x800455 <sCurrentMachineState>
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	ee 0f       	add	r30, r30
     8a0:	ff 1f       	adc	r31, r31
     8a2:	ee 5a       	subi	r30, 0xAE	; 174
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	81 81       	ldd	r24, Z+1	; 0x01
     8a8:	8f 93       	push	r24
     8aa:	80 81       	ld	r24, Z
     8ac:	8f 93       	push	r24
     8ae:	e0 91 54 04 	lds	r30, 0x0454	; 0x800454 <sLastMachineState>
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	ee 0f       	add	r30, r30
     8b6:	ff 1f       	adc	r31, r31
     8b8:	ee 5a       	subi	r30, 0xAE	; 174
     8ba:	fe 4f       	sbci	r31, 0xFE	; 254
     8bc:	81 81       	ldd	r24, Z+1	; 0x01
     8be:	8f 93       	push	r24
     8c0:	80 81       	ld	r24, Z
     8c2:	8f 93       	push	r24
     8c4:	83 eb       	ldi	r24, 0xB3	; 179
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	9f 93       	push	r25
     8ca:	8f 93       	push	r24
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	8f 93       	push	r24
     8d0:	84 e3       	ldi	r24, 0x34	; 52
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	9f 93       	push	r25
     8d6:	8f 93       	push	r24
     8d8:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
		sMachineStateString[sLastMachineState],
		sMachineStateString[sCurrentMachineState]);
}
     8dc:	8d b7       	in	r24, 0x3d	; 61
     8de:	9e b7       	in	r25, 0x3e	; 62
     8e0:	09 96       	adiw	r24, 0x09	; 9
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	9e bf       	out	0x3e, r25	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	8d bf       	out	0x3d, r24	; 61
     8ec:	08 95       	ret

000008ee <Fight_Handler>:
	
	sDefaultFightSpeed = (int32_t)FIGHT_MOTOR_DEFAULT_SPEED;
}

void Fight_Handler(void)
{
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <Fight_Handler+0xc>
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <Fight_Handler+0xe>
     8fc:	00 d0       	rcall	.+0      	; 0x8fe <Fight_Handler+0x10>
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
	switch(sCurrentMachineState)
     902:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <sCurrentMachineState>
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	59 f0       	breq	.+22     	; 0x920 <Fight_Handler+0x32>
     90a:	38 f0       	brcs	.+14     	; 0x91a <Fight_Handler+0x2c>
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	09 f4       	brne	.+2      	; 0x912 <Fight_Handler+0x24>
     910:	4a c0       	rjmp	.+148    	; 0x9a6 <Fight_Handler+0xb8>
     912:	83 30       	cpi	r24, 0x03	; 3
     914:	09 f4       	brne	.+2      	; 0x918 <Fight_Handler+0x2a>
     916:	4a c0       	rjmp	.+148    	; 0x9ac <Fight_Handler+0xbe>
     918:	4b c0       	rjmp	.+150    	; 0x9b0 <Fight_Handler+0xc2>
	{
		case FIGHT_MACHINE_STATE_EXECUTE_TACTIC:
		{
			Tactic_Handler();
     91a:	0e 94 cc 08 	call	0x1198	; 0x1198 <Tactic_Handler>
			
			break;
     91e:	48 c0       	rjmp	.+144    	; 0x9b0 <Fight_Handler+0xc2>
		}
		
		case FIGHT_MACHINE_STATE_LOOP:
		{
			Loop();
     920:	0e 94 2a 02 	call	0x454	; 0x454 <Loop>
			
			if(Distance_GetNbrOfActFrontSensors() == 0)
     924:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <Distance_GetNbrOfActFrontSensors>
     928:	81 11       	cpse	r24, r1
     92a:	42 c0       	rjmp	.+132    	; 0x9b0 <Fight_Handler+0xc2>
			{
				Distance_Output_t distance = Distance_GetFrontStateArray();
     92c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <Distance_GetFrontStateArray>
     930:	7e 83       	std	Y+6, r23	; 0x06
				Line_Output_t line = Line_GetState();
     932:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Line_GetState>
     936:	06 2f       	mov	r16, r22
     938:	f7 2e       	mov	r15, r23
				
				if(distance.back[DIST_SENS_BACK] == false)
     93a:	1e 81       	ldd	r17, Y+6	; 0x06
     93c:	11 11       	cpse	r17, r1
     93e:	0a c0       	rjmp	.+20     	; 0x954 <Fight_Handler+0x66>
				{
					sBackSensorActivityTimeMillis = Time_GetMillis();
     940:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     944:	60 93 6a 04 	sts	0x046A, r22	; 0x80046a <sBackSensorActivityTimeMillis>
     948:	70 93 6b 04 	sts	0x046B, r23	; 0x80046b <sBackSensorActivityTimeMillis+0x1>
     94c:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <sBackSensorActivityTimeMillis+0x2>
     950:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <sBackSensorActivityTimeMillis+0x3>
				}
								
				if(distance.back[DIST_SENS_BACK] == true)
     954:	11 23       	and	r17, r17
     956:	e1 f0       	breq	.+56     	; 0x990 <Fight_Handler+0xa2>
				{
					if(Time_GetMillis() - sBackSensorActivityTimeMillis >= BACK_SENSOR_BACK_ACTIVITY_TIME_MILLIS)
     958:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     95c:	00 91 6a 04 	lds	r16, 0x046A	; 0x80046a <sBackSensorActivityTimeMillis>
     960:	10 91 6b 04 	lds	r17, 0x046B	; 0x80046b <sBackSensorActivityTimeMillis+0x1>
     964:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <sBackSensorActivityTimeMillis+0x2>
     968:	30 91 6d 04 	lds	r19, 0x046D	; 0x80046d <sBackSensorActivityTimeMillis+0x3>
     96c:	dc 01       	movw	r26, r24
     96e:	cb 01       	movw	r24, r22
     970:	80 1b       	sub	r24, r16
     972:	91 0b       	sbc	r25, r17
     974:	a2 0b       	sbc	r26, r18
     976:	b3 0b       	sbc	r27, r19
     978:	8c 32       	cpi	r24, 0x2C	; 44
     97a:	91 40       	sbci	r25, 0x01	; 1
     97c:	a1 05       	cpc	r26, r1
     97e:	b1 05       	cpc	r27, r1
     980:	b8 f0       	brcs	.+46     	; 0x9b0 <Fight_Handler+0xc2>
					{
						Back_SetState(BACK_MACHINE_STATE_REVERSE);
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	0e 94 8a 00 	call	0x114	; 0x114 <Back_SetState>
						Fight_SetState(FIGHT_MACHINE_STATE_BACK);
     988:	83 e0       	ldi	r24, 0x03	; 3
     98a:	0e 94 3a 04 	call	0x874	; 0x874 <Fight_SetState>
     98e:	10 c0       	rjmp	.+32     	; 0x9b0 <Fight_Handler+0xc2>
					}
				}
				else if(line.state[LINE_SENS_FRONT_LEFT] == true
     990:	01 11       	cpse	r16, r1
     992:	02 c0       	rjmp	.+4      	; 0x998 <Fight_Handler+0xaa>
				|| line.state[LINE_SENS_FRONT_RIGHT] == true)
     994:	ff 20       	and	r15, r15
     996:	61 f0       	breq	.+24     	; 0x9b0 <Fight_Handler+0xc2>
				{
					Edge_SetState(EDGE_MACHINE_STATE_ESTIMATE_ANGLE);
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0e 94 c0 00 	call	0x180	; 0x180 <Edge_SetState>
					Fight_SetState(FIGHT_MACHINE_STATE_LINE);
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	0e 94 3a 04 	call	0x874	; 0x874 <Fight_SetState>
     9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <Fight_Handler+0xc2>
			break;
		}
		
		case FIGHT_MACHINE_STATE_LINE:
		{
			Edge_Handler();
     9a6:	0e 94 21 01 	call	0x242	; 0x242 <Edge_Handler>
			
			break;
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <Fight_Handler+0xc2>
		}
		
		case FIGHT_MACHINE_STATE_BACK:
		{
			Back_Handler();
     9ac:	0e 94 5f 00 	call	0xbe	; 0xbe <Back_Handler>
		default:
		{
			break;
		}
	}
}
     9b0:	26 96       	adiw	r28, 0x06	; 6
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	08 95       	ret

000009c8 <LedSignal>:
		}
	}
}		

static void LedSignal(bool red, bool green, bool blue)
{
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	d6 2f       	mov	r29, r22
     9ce:	c4 2f       	mov	r28, r20
	Led_Set(LED_COLOR_RED, red);
     9d0:	68 2f       	mov	r22, r24
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
	Led_Set(LED_COLOR_GREEN, green);
     9d8:	6d 2f       	mov	r22, r29
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
	Led_Set(LED_COLOR_BLUE, blue);
     9e0:	6c 2f       	mov	r22, r28
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
}
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <Machine_Init>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void Machine_Init(void)
{
     9ee:	0f 93       	push	r16
	Fight_Init();
     9f0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <Fight_Init>
		
	Scheduler_AddTask(TASK_NAME, TASK_PERIOD_MILLIS, TaskHandler, SCHEDULER_OPLVL_NORMAL);
     9f4:	02 e0       	ldi	r16, 0x02	; 2
     9f6:	22 e0       	ldi	r18, 0x02	; 2
     9f8:	36 e0       	ldi	r19, 0x06	; 6
     9fa:	45 e0       	ldi	r20, 0x05	; 5
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	8a e5       	ldi	r24, 0x5A	; 90
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <Scheduler_AddTask>
	
	Terminal_Log("Machine", LOG_OK, "Configured.");	
     a0a:	82 e6       	ldi	r24, 0x62	; 98
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	9f 93       	push	r25
     a10:	8f 93       	push	r24
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	8f 93       	push	r24
     a16:	8a e5       	ldi	r24, 0x5A	; 90
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	9f 93       	push	r25
     a1c:	8f 93       	push	r24
     a1e:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
}
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 91       	pop	r16
     a2e:	08 95       	ret

00000a30 <Machine_SetState>:

void Machine_SetState(Machine_MachineState_t machineState)
{
	sLastMachineState = sCurrentMachineState;
     a30:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <sCurrentMachineState>
     a34:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <sLastMachineState>
	sCurrentMachineState = machineState;
     a38:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <sCurrentMachineState>
	
	switch(sCurrentMachineState)
     a3c:	84 30       	cpi	r24, 0x04	; 4
     a3e:	49 f0       	breq	.+18     	; 0xa52 <Machine_SetState+0x22>
     a40:	18 f4       	brcc	.+6      	; 0xa48 <Machine_SetState+0x18>
     a42:	83 30       	cpi	r24, 0x03	; 3
     a44:	49 f0       	breq	.+18     	; 0xa58 <Machine_SetState+0x28>
     a46:	35 c0       	rjmp	.+106    	; 0xab2 <Machine_SetState+0x82>
     a48:	85 30       	cpi	r24, 0x05	; 5
     a4a:	61 f0       	breq	.+24     	; 0xa64 <Machine_SetState+0x34>
     a4c:	86 30       	cpi	r24, 0x06	; 6
     a4e:	d9 f0       	breq	.+54     	; 0xa86 <Machine_SetState+0x56>
     a50:	30 c0       	rjmp	.+96     	; 0xab2 <Machine_SetState+0x82>
	{
		case MACHINE_STATE_WAIT_FOR_START:
		{
			StartModule_InitIrq();
     a52:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <StartModule_InitIrq>
			
			break;
     a56:	2d c0       	rjmp	.+90     	; 0xab2 <Machine_SetState+0x82>
		}
		
		case MACHINE_STATE_TACTICS_SETTING:
		{
			Scheduler_TaskEnable("Battery", false);
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	8e e6       	ldi	r24, 0x6E	; 110
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	0e 94 3f 10 	call	0x207e	; 0x207e <Scheduler_TaskEnable>
			
			break;
     a62:	27 c0       	rjmp	.+78     	; 0xab2 <Machine_SetState+0x82>
		}
		
		case MACHINE_STATE_FIGHT:
		{
			Tactic_SetState(sLedIdx);
     a64:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <sLedIdx>
     a68:	0e 94 14 08 	call	0x1028	; 0x1028 <Tactic_SetState>
			
			Led_Set(LED_COLOR_RED, false);
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
			Led_Set(LED_COLOR_GREEN, true);
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
			Led_Set(LED_COLOR_BLUE, false);
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
			
			break;
     a84:	16 c0       	rjmp	.+44     	; 0xab2 <Machine_SetState+0x82>
		}
		
		case MACHINE_STATE_STOP:
		{
			Motor_Run(MOTOR_ID_LEFT, 0U);
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			Motor_Run(MOTOR_ID_RIGHT, 0U);
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			
			Led_Set(LED_COLOR_RED, true);
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
			Led_Set(LED_COLOR_GREEN, false);
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
			Led_Set(LED_COLOR_BLUE, false);
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
		{
			break;	
		}
	}

	Terminal_Log(TASK_NAME, LOG_INFO, "Change state from [%s] to [%s].",
     ab2:	e0 91 70 04 	lds	r30, 0x0470	; 0x800470 <sCurrentMachineState>
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	ee 0f       	add	r30, r30
     aba:	ff 1f       	adc	r31, r31
     abc:	ed 5c       	subi	r30, 0xCD	; 205
     abe:	fd 4f       	sbci	r31, 0xFD	; 253
     ac0:	81 81       	ldd	r24, Z+1	; 0x01
     ac2:	8f 93       	push	r24
     ac4:	80 81       	ld	r24, Z
     ac6:	8f 93       	push	r24
     ac8:	e0 91 6f 04 	lds	r30, 0x046F	; 0x80046f <sLastMachineState>
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	ee 0f       	add	r30, r30
     ad0:	ff 1f       	adc	r31, r31
     ad2:	ed 5c       	subi	r30, 0xCD	; 205
     ad4:	fd 4f       	sbci	r31, 0xFD	; 253
     ad6:	81 81       	ldd	r24, Z+1	; 0x01
     ad8:	8f 93       	push	r24
     ada:	80 81       	ld	r24, Z
     adc:	8f 93       	push	r24
     ade:	83 eb       	ldi	r24, 0xB3	; 179
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	9f 93       	push	r25
     ae4:	8f 93       	push	r24
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	8f 93       	push	r24
     aea:	8a e5       	ldi	r24, 0x5A	; 90
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
	sMachineStateString[sLastMachineState],
	sMachineStateString[sCurrentMachineState]);
}
     af6:	8d b7       	in	r24, 0x3d	; 61
     af8:	9e b7       	in	r25, 0x3e	; 62
     afa:	09 96       	adiw	r24, 0x09	; 9
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	9e bf       	out	0x3e, r25	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	8d bf       	out	0x3d, r24	; 61
     b06:	08 95       	ret

00000b08 <ButtonHandler>:
	Led_Set(LED_COLOR_GREEN, green);
	Led_Set(LED_COLOR_BLUE, blue);
}

static void ButtonHandler(void)
{
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
	bool currentState = Button_GetState();
     b0e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <Button_GetState>
     b12:	c8 2f       	mov	r28, r24
	
	if(currentState != sLastButtonState)
     b14:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <sLastButtonState>
     b18:	c8 17       	cp	r28, r24
     b1a:	51 f0       	breq	.+20     	; 0xb30 <ButtonHandler+0x28>
	{
		sDebounceTimeMillis = Time_GetMillis();
     b1c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     b20:	60 93 75 04 	sts	0x0475, r22	; 0x800475 <sDebounceTimeMillis>
     b24:	70 93 76 04 	sts	0x0476, r23	; 0x800476 <sDebounceTimeMillis+0x1>
     b28:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <sDebounceTimeMillis+0x2>
     b2c:	90 93 78 04 	sts	0x0478, r25	; 0x800478 <sDebounceTimeMillis+0x3>
	}
	
	if(currentState == false)
     b30:	c1 11       	cpse	r28, r1
     b32:	0a c0       	rjmp	.+20     	; 0xb48 <ButtonHandler+0x40>
	{
		sAcceptMillis = Time_GetMillis();	
     b34:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     b38:	60 93 71 04 	sts	0x0471, r22	; 0x800471 <sAcceptMillis>
     b3c:	70 93 72 04 	sts	0x0472, r23	; 0x800472 <sAcceptMillis+0x1>
     b40:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <sAcceptMillis+0x2>
     b44:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <sAcceptMillis+0x3>
	}
	
	if(Time_GetMillis() - sAcceptMillis > MACHINE_BUTTON_ACCEPT_TIME_MILLIS
     b48:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     b4c:	00 91 71 04 	lds	r16, 0x0471	; 0x800471 <sAcceptMillis>
     b50:	10 91 72 04 	lds	r17, 0x0472	; 0x800472 <sAcceptMillis+0x1>
     b54:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <sAcceptMillis+0x2>
     b58:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <sAcceptMillis+0x3>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	80 1b       	sub	r24, r16
     b62:	91 0b       	sbc	r25, r17
     b64:	a2 0b       	sbc	r26, r18
     b66:	b3 0b       	sbc	r27, r19
     b68:	89 3e       	cpi	r24, 0xE9	; 233
     b6a:	93 40       	sbci	r25, 0x03	; 3
     b6c:	a1 05       	cpc	r26, r1
     b6e:	b1 05       	cpc	r27, r1
     b70:	a0 f0       	brcs	.+40     	; 0xb9a <ButtonHandler+0x92>
		&& sCurrentMachineState > MACHINE_STATE_DEVICE_STATUS_INDICATION)
     b72:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <sCurrentMachineState>
     b76:	83 30       	cpi	r24, 0x03	; 3
     b78:	80 f0       	brcs	.+32     	; 0xb9a <ButtonHandler+0x92>
	{
		Led_Set(LED_COLOR_RED, false);
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
		Led_Set(LED_COLOR_GREEN, false);
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
		Led_Set(LED_COLOR_BLUE, false);
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
		
		Machine_SetState(MACHINE_STATE_WAIT_FOR_START);
     b92:	84 e0       	ldi	r24, 0x04	; 4
     b94:	0e 94 18 05 	call	0xa30	; 0xa30 <Machine_SetState>
		
		return;
     b98:	31 c0       	rjmp	.+98     	; 0xbfc <ButtonHandler+0xf4>
	}
	
	if(Time_GetMillis() - sDebounceTimeMillis > MACHINE_BUTTON_DEBOUNCE_MILLIS)
     b9a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     b9e:	00 91 75 04 	lds	r16, 0x0475	; 0x800475 <sDebounceTimeMillis>
     ba2:	10 91 76 04 	lds	r17, 0x0476	; 0x800476 <sDebounceTimeMillis+0x1>
     ba6:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <sDebounceTimeMillis+0x2>
     baa:	30 91 78 04 	lds	r19, 0x0478	; 0x800478 <sDebounceTimeMillis+0x3>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	80 1b       	sub	r24, r16
     bb4:	91 0b       	sbc	r25, r17
     bb6:	a2 0b       	sbc	r26, r18
     bb8:	b3 0b       	sbc	r27, r19
     bba:	c3 97       	sbiw	r24, 0x33	; 51
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	d8 f0       	brcs	.+54     	; 0xbf8 <ButtonHandler+0xf0>
	{
		if(currentState != sButtonState)
     bc2:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <sButtonState>
     bc6:	c8 17       	cp	r28, r24
     bc8:	b9 f0       	breq	.+46     	; 0xbf8 <ButtonHandler+0xf0>
		{
			sButtonState = currentState;
     bca:	c0 93 7b 04 	sts	0x047B, r28	; 0x80047b <sButtonState>
			
			if(sButtonState == false)
     bce:	c1 11       	cpse	r28, r1
     bd0:	13 c0       	rjmp	.+38     	; 0xbf8 <ButtonHandler+0xf0>
			{
				sAcceptMillis = Time_GetMillis();
     bd2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
     bd6:	60 93 71 04 	sts	0x0471, r22	; 0x800471 <sAcceptMillis>
     bda:	70 93 72 04 	sts	0x0472, r23	; 0x800472 <sAcceptMillis+0x1>
     bde:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <sAcceptMillis+0x2>
     be2:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <sAcceptMillis+0x3>
				
				sLedIdx++;
     be6:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <sLedIdx>
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <sLedIdx>
				
				if(sLedIdx >= 7U)
     bf0:	87 30       	cpi	r24, 0x07	; 7
     bf2:	10 f0       	brcs	.+4      	; 0xbf8 <ButtonHandler+0xf0>
				{
					sLedIdx = 0U;
     bf4:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <sLedIdx>
				}
			}
		}
	}
	
	sLastButtonState = currentState;
     bf8:	c0 93 7c 04 	sts	0x047C, r28	; 0x80047c <sLastButtonState>
}
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	08 95       	ret

00000c04 <TaskHandler>:
/******************************************************************************
                        PRIVATE FUNCTION IMPLEMENTATION
******************************************************************************/

static void TaskHandler(void)
{
     c04:	af 92       	push	r10
     c06:	bf 92       	push	r11
     c08:	cf 92       	push	r12
     c0a:	df 92       	push	r13
     c0c:	ef 92       	push	r14
     c0e:	ff 92       	push	r15
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	66 97       	sbiw	r28, 0x16	; 22
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
	switch(sCurrentMachineState)
     c28:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <sCurrentMachineState>
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	87 30       	cpi	r24, 0x07	; 7
     c30:	91 05       	cpc	r25, r1
     c32:	08 f0       	brcs	.+2      	; 0xc36 <TaskHandler+0x32>
     c34:	c9 c1       	rjmp	.+914    	; 0xfc8 <TaskHandler+0x3c4>
     c36:	fc 01       	movw	r30, r24
     c38:	e6 5d       	subi	r30, 0xD6	; 214
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <__tablejump2__>
	{
		case MACHINE_STATE_CHECK_BATTERY_LEVEL:
		{
			ButtonHandler();
     c40:	0e 94 84 05 	call	0xb08	; 0xb08 <ButtonHandler>
				
			if(sLedIdx >= 1)
     c44:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <sLedIdx>
     c48:	88 23       	and	r24, r24
     c4a:	f1 f0       	breq	.+60     	; 0xc88 <TaskHandler+0x84>
			{
				Led_Set(LED_COLOR_RED, false);
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
				Led_Set(LED_COLOR_GREEN, false);
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
				Led_Set(LED_COLOR_BLUE, false);
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
					
				sLedIdx = 0U;
     c64:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <sLedIdx>
				sLastButtonState = false;
     c68:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <sLastButtonState>
				sButtonState = false;
     c6c:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <sButtonState>
				sDebounceTimeMillis = 0U;
     c70:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <sDebounceTimeMillis>
     c74:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <sDebounceTimeMillis+0x1>
     c78:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <sDebounceTimeMillis+0x2>
     c7c:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <sDebounceTimeMillis+0x3>
					
				Machine_SetState(MACHINE_STATE_CHECK_START_MODULE);
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	0e 94 18 05 	call	0xa30	; 0xa30 <Machine_SetState>
					
				break;
     c86:	a0 c1       	rjmp	.+832    	; 0xfc8 <TaskHandler+0x3c4>
			}
				
			Battery_Voltage_t voltage = Battery_GetVoltage();
     c88:	ce 01       	movw	r24, r28
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <Battery_GetVoltage>
			if(voltage.initMeasureDone == true)
     c90:	8a 85       	ldd	r24, Y+10	; 0x0a
     c92:	88 23       	and	r24, r24
     c94:	09 f4       	brne	.+2      	; 0xc98 <TaskHandler+0x94>
     c96:	98 c1       	rjmp	.+816    	; 0xfc8 <TaskHandler+0x3c4>
			{
				if(voltage.adcVoltage < BATTERY_LOW_BATTERY_LEVEL_VOLT
     c98:	ce 80       	ldd	r12, Y+6	; 0x06
     c9a:	df 80       	ldd	r13, Y+7	; 0x07
     c9c:	e8 84       	ldd	r14, Y+8	; 0x08
     c9e:	f9 84       	ldd	r15, Y+9	; 0x09
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e4       	ldi	r20, 0x40	; 64
     ca6:	51 e4       	ldi	r21, 0x41	; 65
     ca8:	c7 01       	movw	r24, r14
     caa:	b6 01       	movw	r22, r12
     cac:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__cmpsf2>
     cb0:	88 23       	and	r24, r24
     cb2:	ec f4       	brge	.+58     	; 0xcee <TaskHandler+0xea>
				&& voltage.adcVoltage > BATTERY_CRITICAL_LOW_BATTERY_LEVEL_VOLT)
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	48 e2       	ldi	r20, 0x28	; 40
     cba:	51 e4       	ldi	r21, 0x41	; 65
     cbc:	c7 01       	movw	r24, r14
     cbe:	b6 01       	movw	r22, r12
     cc0:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <__gesf2>
     cc4:	18 16       	cp	r1, r24
     cc6:	9c f4       	brge	.+38     	; 0xcee <TaskHandler+0xea>
				{
					sBattLow = true;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <sBattLow>
						
					Led_Set(LED_COLOR_RED, false);
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
					Led_Set(LED_COLOR_GREEN, false);
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
					Led_Set(LED_COLOR_BLUE, false);
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
						
					Machine_SetState(MACHINE_STATE_CHECK_START_MODULE);
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	0e 94 18 05 	call	0xa30	; 0xa30 <Machine_SetState>
     cec:	6d c1       	rjmp	.+730    	; 0xfc8 <TaskHandler+0x3c4>
				}
				else if(voltage.adcVoltage <= BATTERY_CRITICAL_LOW_BATTERY_LEVEL_VOLT)
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	48 e2       	ldi	r20, 0x28	; 40
     cf4:	51 e4       	ldi	r21, 0x41	; 65
     cf6:	c7 01       	movw	r24, r14
     cf8:	b6 01       	movw	r22, r12
     cfa:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__cmpsf2>
     cfe:	18 16       	cp	r1, r24
     d00:	64 f0       	brlt	.+24     	; 0xd1a <TaskHandler+0x116>
				{
					sBattLow = true;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <sBattLow>
						
					Led_FlashAndBlink(LED_COLOR_RED, 1000U, 100U, 5U);
     d08:	25 e0       	ldi	r18, 0x05	; 5
     d0a:	44 e6       	ldi	r20, 0x64	; 100
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	68 ee       	ldi	r22, 0xE8	; 232
     d10:	73 e0       	ldi	r23, 0x03	; 3
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	0e 94 4d 0c 	call	0x189a	; 0x189a <Led_FlashAndBlink>
     d18:	57 c1       	rjmp	.+686    	; 0xfc8 <TaskHandler+0x3c4>
				}
				else
				{
					sBattLow = false;
     d1a:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <sBattLow>
						
					Led_Set(LED_COLOR_RED, false);
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
					Led_Set(LED_COLOR_GREEN, false);
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
					Led_Set(LED_COLOR_BLUE, false);
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
						
					Machine_SetState(MACHINE_STATE_CHECK_START_MODULE);
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	0e 94 18 05 	call	0xa30	; 0xa30 <Machine_SetState>
     d3c:	45 c1       	rjmp	.+650    	; 0xfc8 <TaskHandler+0x3c4>
			break;
		}
			
		case MACHINE_STATE_CHECK_START_MODULE:
		{
			ButtonHandler();
     d3e:	0e 94 84 05 	call	0xb08	; 0xb08 <ButtonHandler>
				
			if(sLedIdx >= 1)
     d42:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <sLedIdx>
     d46:	88 23       	and	r24, r24
     d48:	f1 f0       	breq	.+60     	; 0xd86 <TaskHandler+0x182>
			{
				Led_Set(LED_COLOR_RED, false);
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
				Led_Set(LED_COLOR_GREEN, false);
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
				Led_Set(LED_COLOR_BLUE, false);
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
					
				sLedIdx = 0U;
     d62:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <sLedIdx>
				sLastButtonState = false;
     d66:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <sLastButtonState>
				sButtonState = false;
     d6a:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <sButtonState>
				sDebounceTimeMillis = 0U;
     d6e:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <sDebounceTimeMillis>
     d72:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <sDebounceTimeMillis+0x1>
     d76:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <sDebounceTimeMillis+0x2>
     d7a:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <sDebounceTimeMillis+0x3>
					
				Machine_SetState(MACHINE_STATE_DEVICE_STATUS_INDICATION);
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	0e 94 18 05 	call	0xa30	; 0xa30 <Machine_SetState>
					
				break;
     d84:	21 c1       	rjmp	.+578    	; 0xfc8 <TaskHandler+0x3c4>
			}
				
			if(StartModule_HasWrongState() == true)
     d86:	0e 94 22 12 	call	0x2444	; 0x2444 <StartModule_HasWrongState>
     d8a:	88 23       	and	r24, r24
     d8c:	39 f0       	breq	.+14     	; 0xd9c <TaskHandler+0x198>
			{
				Led_ShortBlinkRed();
     d8e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <Led_ShortBlinkRed>
				Led_ShortBlinkBlue();
     d92:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <Led_ShortBlinkBlue>
				Led_ShortBlinkGreen();
     d96:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Led_ShortBlinkGreen>
     d9a:	16 c1       	rjmp	.+556    	; 0xfc8 <TaskHandler+0x3c4>
			}
			else if(Tactic_IsTestMode() == true)
     d9c:	0e 94 c9 08 	call	0x1192	; 0x1192 <Tactic_IsTestMode>
     da0:	88 23       	and	r24, r24
     da2:	29 f0       	breq	.+10     	; 0xdae <TaskHandler+0x1aa>
			{
				Led_ShortBlinkRed();
     da4:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <Led_ShortBlinkRed>
// 				Led_ShortBlinkBlue();	
				Led_ShortBlinkGreen();
     da8:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Led_ShortBlinkGreen>
     dac:	0d c1       	rjmp	.+538    	; 0xfc8 <TaskHandler+0x3c4>
			}
			else
			{
				Machine_SetState(MACHINE_STATE_DEVICE_STATUS_INDICATION);
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	0e 94 18 05 	call	0xa30	; 0xa30 <Machine_SetState>
     db4:	09 c1       	rjmp	.+530    	; 0xfc8 <TaskHandler+0x3c4>
			break;
		}
			
		case MACHINE_STATE_DEVICE_STATUS_INDICATION:
		{
			ButtonHandler();
     db6:	0e 94 84 05 	call	0xb08	; 0xb08 <ButtonHandler>
				
			Distance_Output_t distance = Distance_GetFrontStateArray();
     dba:	0e 94 bc 0b 	call	0x1778	; 0x1778 <Distance_GetFrontStateArray>
     dbe:	29 8b       	std	Y+17, r18	; 0x11
     dc0:	3a 8b       	std	Y+18, r19	; 0x12
     dc2:	4b 8b       	std	Y+19, r20	; 0x13
     dc4:	5c 8b       	std	Y+20, r21	; 0x14
     dc6:	6d 8b       	std	Y+21, r22	; 0x15
     dc8:	7e 8b       	std	Y+22, r23	; 0x16
			Line_Output_t line = Line_GetState();
     dca:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Line_GetState>
     dce:	16 2f       	mov	r17, r22
     dd0:	07 2f       	mov	r16, r23
     dd2:	f8 2e       	mov	r15, r24
     dd4:	e9 2e       	mov	r14, r25
			Battery_Voltage_t voltage = Battery_GetVoltage();
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <Battery_GetVoltage>

			Terminal_Log("Machine", LOG_DEBUG, "<line: fl:%d fr:%d bl:%d br:%d> <dist: l:%d ld:%d f:%d rd:%d r:%d [b:%d]> <batt: %d.%d%dV %d> <start: %d> <exTime: %dms>",
     dde:	0e 94 96 11 	call	0x232c	; 0x232c <Scheduler_GetExecutionTimeMillis>
     de2:	d6 2e       	mov	r13, r22
     de4:	c7 2e       	mov	r12, r23
     de6:	b8 2e       	mov	r11, r24
     de8:	a9 2e       	mov	r10, r25
			distance.back[DIST_SENS_BACK],
			voltage.intPart,
			voltage.decPartFirstDig,
			voltage.decPartSecDig,
			voltage.adcRaw,
			Gpio_ReadPin(STARTMODULE_PORT, STARTMODULE_PIN),
     dea:	62 e0       	ldi	r22, 0x02	; 2
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	0e 94 63 14 	call	0x28c6	; 0x28c6 <Gpio_ReadPin>
			distance.front[DIST_SENS_RIGHT_DIAG],
			distance.front[DIST_SENS_RIGHT],
			distance.back[DIST_SENS_BACK],
			voltage.intPart,
			voltage.decPartFirstDig,
			voltage.decPartSecDig,
     df2:	fb 81       	ldd	r31, Y+3	; 0x03
			distance.front[DIST_SENS_FRONT],
			distance.front[DIST_SENS_RIGHT_DIAG],
			distance.front[DIST_SENS_RIGHT],
			distance.back[DIST_SENS_BACK],
			voltage.intPart,
			voltage.decPartFirstDig,
     df4:	ea 81       	ldd	r30, Y+2	; 0x02
			distance.front[DIST_SENS_LEFT_DIAG],
			distance.front[DIST_SENS_FRONT],
			distance.front[DIST_SENS_RIGHT_DIAG],
			distance.front[DIST_SENS_RIGHT],
			distance.back[DIST_SENS_BACK],
			voltage.intPart,
     df6:	79 81       	ldd	r23, Y+1	; 0x01
			distance.front[DIST_SENS_LEFT],
			distance.front[DIST_SENS_LEFT_DIAG],
			distance.front[DIST_SENS_FRONT],
			distance.front[DIST_SENS_RIGHT_DIAG],
			distance.front[DIST_SENS_RIGHT],
			distance.back[DIST_SENS_BACK],
     df8:	6e 89       	ldd	r22, Y+22	; 0x16
			line.state[LINE_SENS_BACK_RIGHT],
			distance.front[DIST_SENS_LEFT],
			distance.front[DIST_SENS_LEFT_DIAG],
			distance.front[DIST_SENS_FRONT],
			distance.front[DIST_SENS_RIGHT_DIAG],
			distance.front[DIST_SENS_RIGHT],
     dfa:	5d 89       	ldd	r21, Y+21	; 0x15
			line.state[LINE_SENS_BACK_LEFT],
			line.state[LINE_SENS_BACK_RIGHT],
			distance.front[DIST_SENS_LEFT],
			distance.front[DIST_SENS_LEFT_DIAG],
			distance.front[DIST_SENS_FRONT],
			distance.front[DIST_SENS_RIGHT_DIAG],
     dfc:	4c 89       	ldd	r20, Y+20	; 0x14
			line.state[LINE_SENS_FRONT_RIGHT],
			line.state[LINE_SENS_BACK_LEFT],
			line.state[LINE_SENS_BACK_RIGHT],
			distance.front[DIST_SENS_LEFT],
			distance.front[DIST_SENS_LEFT_DIAG],
			distance.front[DIST_SENS_FRONT],
     dfe:	3b 89       	ldd	r19, Y+19	; 0x13
			line.state[LINE_SENS_FRONT_LEFT],
			line.state[LINE_SENS_FRONT_RIGHT],
			line.state[LINE_SENS_BACK_LEFT],
			line.state[LINE_SENS_BACK_RIGHT],
			distance.front[DIST_SENS_LEFT],
			distance.front[DIST_SENS_LEFT_DIAG],
     e00:	2a 89       	ldd	r18, Y+18	; 0x12
			Terminal_Log("Machine", LOG_DEBUG, "<line: fl:%d fr:%d bl:%d br:%d> <dist: l:%d ld:%d f:%d rd:%d r:%d [b:%d]> <batt: %d.%d%dV %d> <start: %d> <exTime: %dms>",
			line.state[LINE_SENS_FRONT_LEFT],
			line.state[LINE_SENS_FRONT_RIGHT],
			line.state[LINE_SENS_BACK_LEFT],
			line.state[LINE_SENS_BACK_RIGHT],
			distance.front[DIST_SENS_LEFT],
     e02:	99 89       	ldd	r25, Y+17	; 0x11
				
			Distance_Output_t distance = Distance_GetFrontStateArray();
			Line_Output_t line = Line_GetState();
			Battery_Voltage_t voltage = Battery_GetVoltage();

			Terminal_Log("Machine", LOG_DEBUG, "<line: fl:%d fr:%d bl:%d br:%d> <dist: l:%d ld:%d f:%d rd:%d r:%d [b:%d]> <batt: %d.%d%dV %d> <start: %d> <exTime: %dms>",
     e04:	af 92       	push	r10
     e06:	bf 92       	push	r11
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	1f 92       	push	r1
     e0e:	8f 93       	push	r24
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	8f 93       	push	r24
     e14:	8c 81       	ldd	r24, Y+4	; 0x04
     e16:	8f 93       	push	r24
     e18:	1f 92       	push	r1
     e1a:	ff 93       	push	r31
     e1c:	1f 92       	push	r1
     e1e:	ef 93       	push	r30
     e20:	1f 92       	push	r1
     e22:	7f 93       	push	r23
     e24:	1f 92       	push	r1
     e26:	6f 93       	push	r22
     e28:	1f 92       	push	r1
     e2a:	5f 93       	push	r21
     e2c:	1f 92       	push	r1
     e2e:	4f 93       	push	r20
     e30:	1f 92       	push	r1
     e32:	3f 93       	push	r19
     e34:	1f 92       	push	r1
     e36:	2f 93       	push	r18
     e38:	1f 92       	push	r1
     e3a:	9f 93       	push	r25
     e3c:	1f 92       	push	r1
     e3e:	ef 92       	push	r14
     e40:	1f 92       	push	r1
     e42:	ff 92       	push	r15
     e44:	1f 92       	push	r1
     e46:	0f 93       	push	r16
     e48:	1f 92       	push	r1
     e4a:	1f 93       	push	r17
     e4c:	86 e7       	ldi	r24, 0x76	; 118
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	9f 93       	push	r25
     e52:	8f 93       	push	r24
     e54:	1f 92       	push	r1
     e56:	8a e5       	ldi	r24, 0x5A	; 90
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	9f 93       	push	r25
     e5c:	8f 93       	push	r24
     e5e:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
			voltage.decPartSecDig,
			voltage.adcRaw,
			Gpio_ReadPin(STARTMODULE_PORT, STARTMODULE_PIN),
			Scheduler_GetExecutionTimeMillis());

			if(sLedIdx >= 1)
     e62:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <sLedIdx>
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	88 23       	and	r24, r24
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <TaskHandler+0x2ac>
			{
				Led_Set(LED_COLOR_RED, false);
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
				Led_Set(LED_COLOR_GREEN, false);
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
				Led_Set(LED_COLOR_BLUE, false);
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
					
				sLedIdx = 0U;
     e8c:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <sLedIdx>
				sLastButtonState = false;
     e90:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <sLastButtonState>
				sButtonState = false;
     e94:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <sButtonState>
				sDebounceTimeMillis = 0U;
     e98:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <sDebounceTimeMillis>
     e9c:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <sDebounceTimeMillis+0x1>
     ea0:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <sDebounceTimeMillis+0x2>
     ea4:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <sDebounceTimeMillis+0x3>
					
				Machine_SetState(MACHINE_STATE_TACTICS_SETTING);
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	0e 94 18 05 	call	0xa30	; 0xa30 <Machine_SetState>
					
				break;
     eae:	8c c0       	rjmp	.+280    	; 0xfc8 <TaskHandler+0x3c4>
			}
				
			if(sBattLow == true)
     eb0:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <sBattLow>
     eb4:	88 23       	and	r24, r24
     eb6:	91 f1       	breq	.+100    	; 0xf1c <TaskHandler+0x318>
			{
				Led_ShortBlinkRed();
     eb8:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <Led_ShortBlinkRed>
					
				Distance_Output_t distance = Distance_GetFrontStateArray();
     ebc:	0e 94 bc 0b 	call	0x1778	; 0x1778 <Distance_GetFrontStateArray>
     ec0:	3c 87       	std	Y+12, r19	; 0x0c
     ec2:	4d 87       	std	Y+13, r20	; 0x0d
     ec4:	5e 87       	std	Y+14, r21	; 0x0e
     ec6:	6f 87       	std	Y+15, r22	; 0x0f
     ec8:	78 8b       	std	Y+16, r23	; 0x10
				if(distance.front[DIST_SENS_LEFT] == true
     eca:	21 11       	cpse	r18, r1
     ecc:	0a c0       	rjmp	.+20     	; 0xee2 <TaskHandler+0x2de>
				|| distance.front[DIST_SENS_LEFT_DIAG] == true
     ece:	31 11       	cpse	r19, r1
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <TaskHandler+0x2de>
				|| distance.front[DIST_SENS_FRONT] == true
     ed2:	41 11       	cpse	r20, r1
     ed4:	06 c0       	rjmp	.+12     	; 0xee2 <TaskHandler+0x2de>
				|| distance.front[DIST_SENS_RIGHT_DIAG] == true
     ed6:	51 11       	cpse	r21, r1
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <TaskHandler+0x2de>
				|| distance.front[DIST_SENS_RIGHT] == true
     eda:	61 11       	cpse	r22, r1
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <TaskHandler+0x2de>
				|| distance.back[DIST_SENS_BACK] == true)
     ede:	77 23       	and	r23, r23
     ee0:	29 f0       	breq	.+10     	; 0xeec <TaskHandler+0x2e8>
				{
					Led_Set(LED_COLOR_BLUE, true);
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <TaskHandler+0x2f0>
				}
				else
				{
					Led_Set(LED_COLOR_BLUE, false);
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
				}
					
				Line_Output_t line = Line_GetState();
     ef4:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Line_GetState>
				if(line.state[LINE_SENS_FRONT_LEFT] == true
     ef8:	61 11       	cpse	r22, r1
     efa:	06 c0       	rjmp	.+12     	; 0xf08 <TaskHandler+0x304>
				|| line.state[LINE_SENS_FRONT_RIGHT] == true
     efc:	71 11       	cpse	r23, r1
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <TaskHandler+0x304>
				|| line.state[LINE_SENS_BACK_LEFT] == true
     f00:	81 11       	cpse	r24, r1
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <TaskHandler+0x304>
				|| line.state[LINE_SENS_BACK_RIGHT] == true)
     f04:	99 23       	and	r25, r25
     f06:	29 f0       	breq	.+10     	; 0xf12 <TaskHandler+0x30e>
				{
					Led_Set(LED_COLOR_GREEN, true);
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
     f10:	5b c0       	rjmp	.+182    	; 0xfc8 <TaskHandler+0x3c4>
				}
				else
				{
					Led_Set(LED_COLOR_GREEN, false);
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
     f1a:	56 c0       	rjmp	.+172    	; 0xfc8 <TaskHandler+0x3c4>
				}
			}
			else
			{
				Led_ShortBlinkGreen();
     f1c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Led_ShortBlinkGreen>
					
				Distance_Output_t distance = Distance_GetFrontStateArray();
     f20:	0e 94 bc 0b 	call	0x1778	; 0x1778 <Distance_GetFrontStateArray>
     f24:	3c 87       	std	Y+12, r19	; 0x0c
     f26:	4d 87       	std	Y+13, r20	; 0x0d
     f28:	5e 87       	std	Y+14, r21	; 0x0e
     f2a:	6f 87       	std	Y+15, r22	; 0x0f
     f2c:	78 8b       	std	Y+16, r23	; 0x10
				if(distance.front[DIST_SENS_LEFT] == true
     f2e:	21 11       	cpse	r18, r1
     f30:	0a c0       	rjmp	.+20     	; 0xf46 <TaskHandler+0x342>
				|| distance.front[DIST_SENS_LEFT_DIAG] == true
     f32:	31 11       	cpse	r19, r1
     f34:	08 c0       	rjmp	.+16     	; 0xf46 <TaskHandler+0x342>
				|| distance.front[DIST_SENS_FRONT] == true
     f36:	41 11       	cpse	r20, r1
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <TaskHandler+0x342>
				|| distance.front[DIST_SENS_RIGHT_DIAG] == true
     f3a:	51 11       	cpse	r21, r1
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <TaskHandler+0x342>
				|| distance.front[DIST_SENS_RIGHT] == true
     f3e:	61 11       	cpse	r22, r1
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <TaskHandler+0x342>
				|| distance.back[DIST_SENS_BACK] == true)
     f42:	77 23       	and	r23, r23
     f44:	29 f0       	breq	.+10     	; 0xf50 <TaskHandler+0x34c>
				{
					Led_Set(LED_COLOR_BLUE, true);
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <TaskHandler+0x354>
				}
				else
				{
					Led_Set(LED_COLOR_BLUE, false);
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
				}
					
				Line_Output_t line = Line_GetState();
     f58:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Line_GetState>
				if(line.state[LINE_SENS_FRONT_LEFT] == true
     f5c:	61 11       	cpse	r22, r1
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <TaskHandler+0x368>
				|| line.state[LINE_SENS_FRONT_RIGHT] == true
     f60:	71 11       	cpse	r23, r1
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <TaskHandler+0x368>
				|| line.state[LINE_SENS_BACK_LEFT] == true
     f64:	81 11       	cpse	r24, r1
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <TaskHandler+0x368>
				|| line.state[LINE_SENS_BACK_RIGHT] == true)
     f68:	99 23       	and	r25, r25
     f6a:	29 f0       	breq	.+10     	; 0xf76 <TaskHandler+0x372>
				{
					Led_Set(LED_COLOR_RED, true);
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
     f74:	29 c0       	rjmp	.+82     	; 0xfc8 <TaskHandler+0x3c4>
				}
				else
				{
					Led_Set(LED_COLOR_RED, false);
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
     f7e:	24 c0       	rjmp	.+72     	; 0xfc8 <TaskHandler+0x3c4>
			break;
		}
			
		case MACHINE_STATE_TACTICS_SETTING:
		{
			LedSignal(
     f80:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <sLedIdx>
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	fc 01       	movw	r30, r24
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	8e 0f       	add	r24, r30
     f8e:	9f 1f       	adc	r25, r31
     f90:	fc 01       	movw	r30, r24
     f92:	ef 5b       	subi	r30, 0xBF	; 191
     f94:	fd 4f       	sbci	r31, 0xFD	; 253
     f96:	42 81       	ldd	r20, Z+2	; 0x02
     f98:	61 81       	ldd	r22, Z+1	; 0x01
     f9a:	80 81       	ld	r24, Z
     f9c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LedSignal>
			sMatrice[sLedIdx].red,
			sMatrice[sLedIdx].green,
			sMatrice[sLedIdx].blue
			);
				
			ButtonHandler();
     fa0:	0e 94 84 05 	call	0xb08	; 0xb08 <ButtonHandler>
				
			break;
     fa4:	11 c0       	rjmp	.+34     	; 0xfc8 <TaskHandler+0x3c4>
		}
			
		case MACHINE_STATE_WAIT_FOR_START:
		{
			Led_ShortBlinkBlue();
     fa6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <Led_ShortBlinkBlue>
			
			break;
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <TaskHandler+0x3c4>
		}
			
		case MACHINE_STATE_FIGHT:
		{
			Fight_Handler();
     fac:	0e 94 77 04 	call	0x8ee	; 0x8ee <Fight_Handler>
				
			break;
     fb0:	0b c0       	rjmp	.+22     	; 0xfc8 <TaskHandler+0x3c4>
		}
			
		case MACHINE_STATE_STOP:
		{
			Motor_Run(MOTOR_ID_LEFT, 0);
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			Motor_Run(MOTOR_ID_RIGHT, 0);
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
     fc6:	ff cf       	rjmp	.-2      	; 0xfc6 <TaskHandler+0x3c2>
			}	
			
			break;
		}
	}
}		
     fc8:	66 96       	adiw	r28, 0x16	; 22
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	df 90       	pop	r13
     fe2:	cf 90       	pop	r12
     fe4:	bf 90       	pop	r11
     fe6:	af 90       	pop	r10
     fe8:	08 95       	ret

00000fea <StopExecutingTacticWhenOponentDetected>:
/******************************************************************************
                        PRIVATE FUNCTION IMPLEMENTATION
******************************************************************************/

static void StopExecutingTacticWhenOponentDetected(void)
{
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	00 d0       	rcall	.+0      	; 0xff0 <StopExecutingTacticWhenOponentDetected+0x6>
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <StopExecutingTacticWhenOponentDetected+0x8>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <StopExecutingTacticWhenOponentDetected+0xa>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	Distance_Output_t distance = Distance_GetFrontStateArray();
     ff8:	0e 94 bc 0b 	call	0x1778	; 0x1778 <Distance_GetFrontStateArray>
	if(distance.front[DIST_SENS_LEFT] == true
     ffc:	21 11       	cpse	r18, r1
     ffe:	08 c0       	rjmp	.+16     	; 0x1010 <StopExecutingTacticWhenOponentDetected+0x26>
	|| distance.front[DIST_SENS_LEFT_DIAG] == true
    1000:	31 11       	cpse	r19, r1
    1002:	06 c0       	rjmp	.+12     	; 0x1010 <StopExecutingTacticWhenOponentDetected+0x26>
	|| distance.front[DIST_SENS_FRONT] == true
    1004:	41 11       	cpse	r20, r1
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <StopExecutingTacticWhenOponentDetected+0x26>
	|| distance.front[DIST_SENS_RIGHT_DIAG] == true
    1008:	51 11       	cpse	r21, r1
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <StopExecutingTacticWhenOponentDetected+0x26>
	|| distance.front[DIST_SENS_RIGHT] == true)
    100c:	66 23       	and	r22, r22
    100e:	19 f0       	breq	.+6      	; 0x1016 <StopExecutingTacticWhenOponentDetected+0x2c>
	{
		//todo: hard break before?
		
		Fight_SetState(FIGHT_MACHINE_STATE_LOOP);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	0e 94 3a 04 	call	0x874	; 0x874 <Fight_SetState>
	}
    1016:	26 96       	adiw	r28, 0x06	; 6
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	08 95       	ret

00001028 <Tactic_SetState>:
		}
	}
}

void Tactic_SetState(Tactic_MachineState_t machineState)
{
    1028:	e8 2f       	mov	r30, r24
	sLastMachineState = sCurrentMachineState;
    102a:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <sCurrentMachineState>
    102e:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <sLastMachineState>
	sCurrentMachineState = machineState;
    1032:	e0 93 7e 04 	sts	0x047E, r30	; 0x80047e <sCurrentMachineState>
	
	switch(sCurrentMachineState)
    1036:	8e 2f       	mov	r24, r30
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	87 30       	cpi	r24, 0x07	; 7
    103c:	91 05       	cpc	r25, r1
    103e:	08 f0       	brcs	.+2      	; 0x1042 <Tactic_SetState+0x1a>
    1040:	79 c0       	rjmp	.+242    	; 0x1134 <Tactic_SetState+0x10c>
    1042:	fc 01       	movw	r30, r24
    1044:	ef 5c       	subi	r30, 0xCF	; 207
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <__tablejump2__>
	{
		case TACTIC_MACHINE_STATE_ROTATING_CCW:
		{
			Motor_Run(MOTOR_ID_LEFT, -TACTIC_ROTATING_SPEED);
    104c:	68 e3       	ldi	r22, 0x38	; 56
    104e:	7f ef       	ldi	r23, 0xFF	; 255
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			Motor_Run(MOTOR_ID_RIGHT, TACTIC_ROTATING_SPEED);
    1056:	68 ec       	ldi	r22, 0xC8	; 200
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
				
			break;
    1060:	69 c0       	rjmp	.+210    	; 0x1134 <Tactic_SetState+0x10c>
		}
		
		case TACTIC_MACHINE_STATE_ROTATE_CCW_AND_GO:
		{
			Motor_Run(MOTOR_ID_LEFT, -TACTIC_ROTATING_AND_GO_SPEED);
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	7f ef       	ldi	r23, 0xFF	; 255
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			Motor_Run(MOTOR_ID_RIGHT, TACTIC_ROTATING_AND_GO_SPEED);
    106c:	6f ef       	ldi	r22, 0xFF	; 255
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			
			sFightTacticTimestampMillis = Time_GetMillis();	
    1076:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    107a:	60 93 7f 04 	sts	0x047F, r22	; 0x80047f <sFightTacticTimestampMillis>
    107e:	70 93 80 04 	sts	0x0480, r23	; 0x800480 <sFightTacticTimestampMillis+0x1>
    1082:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <sFightTacticTimestampMillis+0x2>
    1086:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <sFightTacticTimestampMillis+0x3>
			
			break;
    108a:	54 c0       	rjmp	.+168    	; 0x1134 <Tactic_SetState+0x10c>
		}
		
		case TACTIC_MACHINE_STATE_FULL_ROTATE_AND_GO:
		{
			Motor_Run(MOTOR_ID_LEFT, -TACTIC_ROTATING_AND_GO_SPEED);
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	7f ef       	ldi	r23, 0xFF	; 255
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			Motor_Run(MOTOR_ID_RIGHT, TACTIC_ROTATING_AND_GO_SPEED);
    1096:	6f ef       	ldi	r22, 0xFF	; 255
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			
			sFightTacticTimestampMillis = Time_GetMillis();
    10a0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    10a4:	60 93 7f 04 	sts	0x047F, r22	; 0x80047f <sFightTacticTimestampMillis>
    10a8:	70 93 80 04 	sts	0x0480, r23	; 0x800480 <sFightTacticTimestampMillis+0x1>
    10ac:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <sFightTacticTimestampMillis+0x2>
    10b0:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <sFightTacticTimestampMillis+0x3>
			
			break;
    10b4:	3f c0       	rjmp	.+126    	; 0x1134 <Tactic_SetState+0x10c>
		}
		
		case TACTIC_MACHINE_STATE_ROTATE_CW_AND_GO:
		{
			Motor_Run(MOTOR_ID_LEFT, TACTIC_ROTATING_AND_GO_SPEED);
    10b6:	6f ef       	ldi	r22, 0xFF	; 255
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			Motor_Run(MOTOR_ID_RIGHT, -TACTIC_ROTATING_AND_GO_SPEED);
    10c0:	61 e0       	ldi	r22, 0x01	; 1
    10c2:	7f ef       	ldi	r23, 0xFF	; 255
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			
			sFightTacticTimestampMillis = Time_GetMillis();	
    10ca:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    10ce:	60 93 7f 04 	sts	0x047F, r22	; 0x80047f <sFightTacticTimestampMillis>
    10d2:	70 93 80 04 	sts	0x0480, r23	; 0x800480 <sFightTacticTimestampMillis+0x1>
    10d6:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <sFightTacticTimestampMillis+0x2>
    10da:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <sFightTacticTimestampMillis+0x3>
			
			break;
    10de:	2a c0       	rjmp	.+84     	; 0x1134 <Tactic_SetState+0x10c>
		}
		
		case TACTIC_MACHINE_STATE_ROTATING_CW:
		{
			Motor_Run(MOTOR_ID_LEFT, TACTIC_ROTATING_AND_GO_SPEED);
    10e0:	6f ef       	ldi	r22, 0xFF	; 255
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			Motor_Run(MOTOR_ID_RIGHT, -TACTIC_ROTATING_AND_GO_SPEED);
    10ea:	61 e0       	ldi	r22, 0x01	; 1
    10ec:	7f ef       	ldi	r23, 0xFF	; 255
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			
			break;
    10f4:	1f c0       	rjmp	.+62     	; 0x1134 <Tactic_SetState+0x10c>
		}
		
		case TACTIC_MACHINE_STATE_ROTATE_AND_WAIT:
		{
			Motor_Run(MOTOR_ID_LEFT, -TACTIC_ROTATE_AND_WAIT_SPEED);
    10f6:	68 e3       	ldi	r22, 0x38	; 56
    10f8:	7f ef       	ldi	r23, 0xFF	; 255
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			Motor_Run(MOTOR_ID_RIGHT, TACTIC_ROTATE_AND_WAIT_SPEED);
    1100:	68 ec       	ldi	r22, 0xC8	; 200
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			
			sFightTacticTimestampMillis = Time_GetMillis();	
    110a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    110e:	60 93 7f 04 	sts	0x047F, r22	; 0x80047f <sFightTacticTimestampMillis>
    1112:	70 93 80 04 	sts	0x0480, r23	; 0x800480 <sFightTacticTimestampMillis+0x1>
    1116:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <sFightTacticTimestampMillis+0x2>
    111a:	90 93 82 04 	sts	0x0482, r25	; 0x800482 <sFightTacticTimestampMillis+0x3>
			
			break;
    111e:	0a c0       	rjmp	.+20     	; 0x1134 <Tactic_SetState+0x10c>
		}
		
		case TACTIC_MACHINE_STATE_GO:
		{
			Motor_Run(MOTOR_ID_LEFT, TACTIC_SPEED_AFTER_ROTATATION);
    1120:	6f ef       	ldi	r22, 0xFF	; 255
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
			Motor_Run(MOTOR_ID_RIGHT, TACTIC_SPEED_AFTER_ROTATATION);
    112a:	6f ef       	ldi	r22, 0xFF	; 255
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
		{
			break;	
		}
	}
	
	Terminal_Log(TASK_NAME, LOG_INFO, "Change state from [%s] to [%s].",
    1134:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <sCurrentMachineState>
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	e3 55       	subi	r30, 0x53	; 83
    1140:	fd 4f       	sbci	r31, 0xFD	; 253
    1142:	81 81       	ldd	r24, Z+1	; 0x01
    1144:	8f 93       	push	r24
    1146:	80 81       	ld	r24, Z
    1148:	8f 93       	push	r24
    114a:	e0 91 7d 04 	lds	r30, 0x047D	; 0x80047d <sLastMachineState>
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	ee 0f       	add	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	e3 55       	subi	r30, 0x53	; 83
    1156:	fd 4f       	sbci	r31, 0xFD	; 253
    1158:	81 81       	ldd	r24, Z+1	; 0x01
    115a:	8f 93       	push	r24
    115c:	80 81       	ld	r24, Z
    115e:	8f 93       	push	r24
    1160:	83 eb       	ldi	r24, 0xB3	; 179
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	9f 93       	push	r25
    1166:	8f 93       	push	r24
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	8f 93       	push	r24
    116c:	81 e4       	ldi	r24, 0x41	; 65
    116e:	91 e0       	ldi	r25, 0x01	; 1
    1170:	9f 93       	push	r25
    1172:	8f 93       	push	r24
    1174:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
		sMachineStateString[sLastMachineState],
		sMachineStateString[sCurrentMachineState]);
}
    1178:	8d b7       	in	r24, 0x3d	; 61
    117a:	9e b7       	in	r25, 0x3e	; 62
    117c:	09 96       	adiw	r24, 0x09	; 9
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	9e bf       	out	0x3e, r25	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	8d bf       	out	0x3d, r24	; 61
    1188:	08 95       	ret

0000118a <Tactic_RunTestMode>:

void Tactic_RunTestMode(void)
{
	sIsTestMode	= true;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <sIsTestMode>
    1190:	08 95       	ret

00001192 <Tactic_IsTestMode>:
}

bool Tactic_IsTestMode(void)
{
	return sIsTestMode;
}
    1192:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <sIsTestMode>
    1196:	08 95       	ret

00001198 <Tactic_Handler>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void Tactic_Handler(void)
{
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
	switch(sCurrentMachineState)
    119c:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <sCurrentMachineState>
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	88 30       	cpi	r24, 0x08	; 8
    11a4:	91 05       	cpc	r25, r1
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <Tactic_Handler+0x12>
    11a8:	f5 c0       	rjmp	.+490    	; 0x1394 <Tactic_Handler+0x1fc>
    11aa:	fc 01       	movw	r30, r24
    11ac:	e8 5c       	subi	r30, 0xC8	; 200
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <__tablejump2__>
	{
		case TACTIC_MACHINE_STATE_ROTATING_CCW:
		{
			StopExecutingTacticWhenOponentDetected();
    11b4:	0e 94 f5 07 	call	0xfea	; 0xfea <StopExecutingTacticWhenOponentDetected>
			
			//todo: timeout for rotating in place?
			
			break;
    11b8:	ed c0       	rjmp	.+474    	; 0x1394 <Tactic_Handler+0x1fc>
		}
		
		case TACTIC_MACHINE_STATE_ROTATE_CCW_AND_GO:
		{
			if(Time_GetMillis() - sFightTacticTimestampMillis >= TACTIC_ROTATE_AND_GO_CCW_ROTATING_TIME_MILLIS)
    11ba:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    11be:	00 91 7f 04 	lds	r16, 0x047F	; 0x80047f <sFightTacticTimestampMillis>
    11c2:	10 91 80 04 	lds	r17, 0x0480	; 0x800480 <sFightTacticTimestampMillis+0x1>
    11c6:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <sFightTacticTimestampMillis+0x2>
    11ca:	30 91 82 04 	lds	r19, 0x0482	; 0x800482 <sFightTacticTimestampMillis+0x3>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	80 1b       	sub	r24, r16
    11d4:	91 0b       	sbc	r25, r17
    11d6:	a2 0b       	sbc	r26, r18
    11d8:	b3 0b       	sbc	r27, r19
    11da:	85 3a       	cpi	r24, 0xA5	; 165
    11dc:	91 05       	cpc	r25, r1
    11de:	a1 05       	cpc	r26, r1
    11e0:	b1 05       	cpc	r27, r1
    11e2:	e0 f0       	brcs	.+56     	; 0x121c <Tactic_Handler+0x84>
			{
				//todo: hard break before?
				
				if(Tactic_IsTestMode() == true)
    11e4:	0e 94 c9 08 	call	0x1192	; 0x1192 <Tactic_IsTestMode>
    11e8:	88 23       	and	r24, r24
    11ea:	59 f0       	breq	.+22     	; 0x1202 <Tactic_Handler+0x6a>
				{
					Motor_Run(MOTOR_ID_LEFT, MOTOR_STOP_SPEED);
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					Motor_Run(MOTOR_ID_RIGHT, MOTOR_STOP_SPEED);
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
    1200:	ff cf       	rjmp	.-2      	; 0x1200 <Tactic_Handler+0x68>
						//dummy
					}
				}
				else
				{
					Motor_Run(MOTOR_ID_LEFT, TACTIC_SPEED_AFTER_ROTATATION);
    1202:	6f ef       	ldi	r22, 0xFF	; 255
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					Motor_Run(MOTOR_ID_RIGHT, TACTIC_SPEED_AFTER_ROTATATION);
    120c:	6f ef       	ldi	r22, 0xFF	; 255
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
				}

				Fight_SetState(FIGHT_MACHINE_STATE_LOOP);
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	0e 94 3a 04 	call	0x874	; 0x874 <Fight_SetState>
			}
			
			StopExecutingTacticWhenOponentDetected();
    121c:	0e 94 f5 07 	call	0xfea	; 0xfea <StopExecutingTacticWhenOponentDetected>
			
			break;
    1220:	b9 c0       	rjmp	.+370    	; 0x1394 <Tactic_Handler+0x1fc>
		}
		
		case TACTIC_MACHINE_STATE_FULL_ROTATE_AND_GO:
		{
			if(Time_GetMillis() - sFightTacticTimestampMillis >= TACTIC_ROTATE_AND_GO_ROTATING_TIME_MILLIS)
    1222:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    1226:	00 91 7f 04 	lds	r16, 0x047F	; 0x80047f <sFightTacticTimestampMillis>
    122a:	10 91 80 04 	lds	r17, 0x0480	; 0x800480 <sFightTacticTimestampMillis+0x1>
    122e:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <sFightTacticTimestampMillis+0x2>
    1232:	30 91 82 04 	lds	r19, 0x0482	; 0x800482 <sFightTacticTimestampMillis+0x3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	80 1b       	sub	r24, r16
    123c:	91 0b       	sbc	r25, r17
    123e:	a2 0b       	sbc	r26, r18
    1240:	b3 0b       	sbc	r27, r19
    1242:	88 3c       	cpi	r24, 0xC8	; 200
    1244:	91 05       	cpc	r25, r1
    1246:	a1 05       	cpc	r26, r1
    1248:	b1 05       	cpc	r27, r1
    124a:	08 f4       	brcc	.+2      	; 0x124e <Tactic_Handler+0xb6>
    124c:	a3 c0       	rjmp	.+326    	; 0x1394 <Tactic_Handler+0x1fc>
			{
				//todo: hard break before?
				
				if(Tactic_IsTestMode() == true)
    124e:	0e 94 c9 08 	call	0x1192	; 0x1192 <Tactic_IsTestMode>
    1252:	88 23       	and	r24, r24
    1254:	59 f0       	breq	.+22     	; 0x126c <Tactic_Handler+0xd4>
				{
					Motor_Run(MOTOR_ID_LEFT, MOTOR_STOP_SPEED);
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					Motor_Run(MOTOR_ID_RIGHT, MOTOR_STOP_SPEED);
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
    126a:	ff cf       	rjmp	.-2      	; 0x126a <Tactic_Handler+0xd2>
						//dummy
					}
				}
				else
				{
					Motor_Run(MOTOR_ID_LEFT, TACTIC_SPEED_AFTER_ROTATATION);
    126c:	6f ef       	ldi	r22, 0xFF	; 255
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					Motor_Run(MOTOR_ID_RIGHT, TACTIC_SPEED_AFTER_ROTATATION);
    1276:	6f ef       	ldi	r22, 0xFF	; 255
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
				}
				
				Fight_SetState(FIGHT_MACHINE_STATE_LOOP);
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	0e 94 3a 04 	call	0x874	; 0x874 <Fight_SetState>
    1286:	86 c0       	rjmp	.+268    	; 0x1394 <Tactic_Handler+0x1fc>
			break;
		}
		
		case TACTIC_MACHINE_STATE_ROTATE_CW_AND_GO:
		{
			if(Time_GetMillis() - sFightTacticTimestampMillis >= TACTIC_ROTATE_AND_GO_CW_ROTATING_TIME_MILLIS)
    1288:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    128c:	00 91 7f 04 	lds	r16, 0x047F	; 0x80047f <sFightTacticTimestampMillis>
    1290:	10 91 80 04 	lds	r17, 0x0480	; 0x800480 <sFightTacticTimestampMillis+0x1>
    1294:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <sFightTacticTimestampMillis+0x2>
    1298:	30 91 82 04 	lds	r19, 0x0482	; 0x800482 <sFightTacticTimestampMillis+0x3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	80 1b       	sub	r24, r16
    12a2:	91 0b       	sbc	r25, r17
    12a4:	a2 0b       	sbc	r26, r18
    12a6:	b3 0b       	sbc	r27, r19
    12a8:	81 3e       	cpi	r24, 0xE1	; 225
    12aa:	91 05       	cpc	r25, r1
    12ac:	a1 05       	cpc	r26, r1
    12ae:	b1 05       	cpc	r27, r1
    12b0:	e0 f0       	brcs	.+56     	; 0x12ea <Tactic_Handler+0x152>
			{
				//todo: hard break before?
				
				if(Tactic_IsTestMode() == true)
    12b2:	0e 94 c9 08 	call	0x1192	; 0x1192 <Tactic_IsTestMode>
    12b6:	88 23       	and	r24, r24
    12b8:	59 f0       	breq	.+22     	; 0x12d0 <Tactic_Handler+0x138>
				{
					Motor_Run(MOTOR_ID_LEFT, MOTOR_STOP_SPEED);
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					Motor_Run(MOTOR_ID_RIGHT, MOTOR_STOP_SPEED);
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
    12ce:	ff cf       	rjmp	.-2      	; 0x12ce <Tactic_Handler+0x136>
						//dummy
					}
				}
				else
				{
					Motor_Run(MOTOR_ID_LEFT, TACTIC_SPEED_AFTER_ROTATATION);
    12d0:	6f ef       	ldi	r22, 0xFF	; 255
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
					Motor_Run(MOTOR_ID_RIGHT, TACTIC_SPEED_AFTER_ROTATATION);
    12da:	6f ef       	ldi	r22, 0xFF	; 255
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
				}
				
				Fight_SetState(FIGHT_MACHINE_STATE_LOOP);
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	0e 94 3a 04 	call	0x874	; 0x874 <Fight_SetState>
			}
			
			StopExecutingTacticWhenOponentDetected();
    12ea:	0e 94 f5 07 	call	0xfea	; 0xfea <StopExecutingTacticWhenOponentDetected>
			
			break;
    12ee:	52 c0       	rjmp	.+164    	; 0x1394 <Tactic_Handler+0x1fc>
		}
		
		case TACTIC_MACHINE_STATE_ROTATING_CW:
		{
			StopExecutingTacticWhenOponentDetected();
    12f0:	0e 94 f5 07 	call	0xfea	; 0xfea <StopExecutingTacticWhenOponentDetected>
			
			//todo: timeout for rotating in place?
			
			break;
    12f4:	4f c0       	rjmp	.+158    	; 0x1394 <Tactic_Handler+0x1fc>
		}
		
		case TACTIC_MACHINE_STATE_ROTATE_AND_WAIT:
		{
			if(Time_GetMillis() - sFightTacticTimestampMillis >= TACTIC_ROTATE_AND_WAIT_ROTATING_TIME_MILLIS)
    12f6:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    12fa:	00 91 7f 04 	lds	r16, 0x047F	; 0x80047f <sFightTacticTimestampMillis>
    12fe:	10 91 80 04 	lds	r17, 0x0480	; 0x800480 <sFightTacticTimestampMillis+0x1>
    1302:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <sFightTacticTimestampMillis+0x2>
    1306:	30 91 82 04 	lds	r19, 0x0482	; 0x800482 <sFightTacticTimestampMillis+0x3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	80 1b       	sub	r24, r16
    1310:	91 0b       	sbc	r25, r17
    1312:	a2 0b       	sbc	r26, r18
    1314:	b3 0b       	sbc	r27, r19
    1316:	80 3f       	cpi	r24, 0xF0	; 240
    1318:	91 05       	cpc	r25, r1
    131a:	a1 05       	cpc	r26, r1
    131c:	b1 05       	cpc	r27, r1
    131e:	d0 f1       	brcs	.+116    	; 0x1394 <Tactic_Handler+0x1fc>
			{
				Motor_Run(MOTOR_ID_LEFT, MOTOR_STOP_SPEED);
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
				Motor_Run(MOTOR_ID_RIGHT, MOTOR_STOP_SPEED);
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
				
				if(Tactic_IsTestMode() == false)
    1334:	0e 94 c9 08 	call	0x1192	; 0x1192 <Tactic_IsTestMode>
    1338:	81 11       	cpse	r24, r1
    133a:	2c c0       	rjmp	.+88     	; 0x1394 <Tactic_Handler+0x1fc>
				{
					Tactic_SetState(TACTIC_MACHINE_STATE_STANDBY);	
    133c:	87 e0       	ldi	r24, 0x07	; 7
    133e:	0e 94 14 08 	call	0x1028	; 0x1028 <Tactic_SetState>
    1342:	28 c0       	rjmp	.+80     	; 0x1394 <Tactic_Handler+0x1fc>
			break;
		}
		
		case TACTIC_MACHINE_STATE_GO:
		{
			Fight_SetState(FIGHT_MACHINE_STATE_LOOP);
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	0e 94 3a 04 	call	0x874	; 0x874 <Fight_SetState>
					
			break;
    134a:	24 c0       	rjmp	.+72     	; 0x1394 <Tactic_Handler+0x1fc>
		}

		case TACTIC_MACHINE_STATE_STANDBY:
		{
			if(Time_GetMillis() - sFightTacticTimestampMillis >= MAXIMUM_TIME_WITHOUT_MOVEMENT_MILLIS)
    134c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    1350:	00 91 7f 04 	lds	r16, 0x047F	; 0x80047f <sFightTacticTimestampMillis>
    1354:	10 91 80 04 	lds	r17, 0x0480	; 0x800480 <sFightTacticTimestampMillis+0x1>
    1358:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <sFightTacticTimestampMillis+0x2>
    135c:	30 91 82 04 	lds	r19, 0x0482	; 0x800482 <sFightTacticTimestampMillis+0x3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	80 1b       	sub	r24, r16
    1366:	91 0b       	sbc	r25, r17
    1368:	a2 0b       	sbc	r26, r18
    136a:	b3 0b       	sbc	r27, r19
    136c:	88 3a       	cpi	r24, 0xA8	; 168
    136e:	91 46       	sbci	r25, 0x61	; 97
    1370:	a1 05       	cpc	r26, r1
    1372:	b1 05       	cpc	r27, r1
    1374:	68 f0       	brcs	.+26     	; 0x1390 <Tactic_Handler+0x1f8>
			{
				Motor_Run(MOTOR_ID_LEFT, TACTIC_SPEED_AFTER_ROTATATION);
    1376:	6f ef       	ldi	r22, 0xFF	; 255
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
				Motor_Run(MOTOR_ID_RIGHT, TACTIC_SPEED_AFTER_ROTATATION);
    1380:	6f ef       	ldi	r22, 0xFF	; 255
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <Motor_Run>
				
				Fight_SetState(FIGHT_MACHINE_STATE_LOOP);
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	0e 94 3a 04 	call	0x874	; 0x874 <Fight_SetState>
			}
			
			StopExecutingTacticWhenOponentDetected();
    1390:	0e 94 f5 07 	call	0xfea	; 0xfea <StopExecutingTacticWhenOponentDetected>
		default:
		{
			break;
		}
	}
}
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	08 95       	ret

0000139a <TaskHandler>:
	
	return sVoltage;
}

static void TaskHandler(void)
{
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
	ADMUX &= 0xF0;
    13a2:	87 b1       	in	r24, 0x07	; 7
    13a4:	80 7f       	andi	r24, 0xF0	; 240
    13a6:	87 b9       	out	0x07, r24	; 7
	ADMUX |= 3;
    13a8:	87 b1       	in	r24, 0x07	; 7
    13aa:	83 60       	ori	r24, 0x03	; 3
    13ac:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
    13ae:	86 b1       	in	r24, 0x06	; 6
    13b0:	80 64       	ori	r24, 0x40	; 64
    13b2:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1<<ADSC));
    13b4:	36 99       	sbic	0x06, 6	; 6
    13b6:	fe cf       	rjmp	.-4      	; 0x13b4 <TaskHandler+0x1a>
	
	float voltage = ADCW / sAdcToBattVoltageFactor;
    13b8:	64 b1       	in	r22, 0x04	; 4
    13ba:	75 b1       	in	r23, 0x05	; 5
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__floatunsisf>
    13c4:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <sAdcToBattVoltageFactor>
    13c8:	30 91 97 04 	lds	r19, 0x0497	; 0x800497 <sAdcToBattVoltageFactor+0x1>
    13cc:	40 91 98 04 	lds	r20, 0x0498	; 0x800498 <sAdcToBattVoltageFactor+0x2>
    13d0:	50 91 99 04 	lds	r21, 0x0499	; 0x800499 <sAdcToBattVoltageFactor+0x3>
    13d4:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__divsf3>
	
	sAvg += voltage;
    13d8:	20 91 92 04 	lds	r18, 0x0492	; 0x800492 <sAvg>
    13dc:	30 91 93 04 	lds	r19, 0x0493	; 0x800493 <sAvg+0x1>
    13e0:	40 91 94 04 	lds	r20, 0x0494	; 0x800494 <sAvg+0x2>
    13e4:	50 91 95 04 	lds	r21, 0x0495	; 0x800495 <sAvg+0x3>
    13e8:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__addsf3>
    13ec:	6b 01       	movw	r12, r22
    13ee:	7c 01       	movw	r14, r24
    13f0:	60 93 92 04 	sts	0x0492, r22	; 0x800492 <sAvg>
    13f4:	70 93 93 04 	sts	0x0493, r23	; 0x800493 <sAvg+0x1>
    13f8:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <sAvg+0x2>
    13fc:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <sAvg+0x3>
	sAvgCnt++;
    1400:	60 91 9a 04 	lds	r22, 0x049A	; 0x80049a <sAvgCnt>
    1404:	6f 5f       	subi	r22, 0xFF	; 255
    1406:	60 93 9a 04 	sts	0x049A, r22	; 0x80049a <sAvgCnt>
	
	if(sAvgCnt >= BATTERY_AVG_NBR_OF_SAMPLES)
    140a:	64 31       	cpi	r22, 0x14	; 20
    140c:	00 f1       	brcs	.+64     	; 0x144e <TaskHandler+0xb4>
	{
		sAvgOut = sAvg / (float)sAvgCnt;
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__floatunsisf>
    1418:	9b 01       	movw	r18, r22
    141a:	ac 01       	movw	r20, r24
    141c:	c7 01       	movw	r24, r14
    141e:	b6 01       	movw	r22, r12
    1420:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__divsf3>
    1424:	60 93 8e 04 	sts	0x048E, r22	; 0x80048e <sAvgOut>
    1428:	70 93 8f 04 	sts	0x048F, r23	; 0x80048f <sAvgOut+0x1>
    142c:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <sAvgOut+0x2>
    1430:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <sAvgOut+0x3>
		sAvgCnt = 0;
    1434:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <sAvgCnt>
		sAvg = 0.0F;
    1438:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <sAvg>
    143c:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <sAvg+0x1>
    1440:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <sAvg+0x2>
    1444:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <sAvg+0x3>
		sVoltage.initMeasureDone = true;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <sVoltage+0x9>
	}
}
    144e:	ff 90       	pop	r15
    1450:	ef 90       	pop	r14
    1452:	df 90       	pop	r13
    1454:	cf 90       	pop	r12
    1456:	08 95       	ret

00001458 <Precalculation>:
{
	float adcResolution = BATTERY_ADC_RESOLUTION / BATTERY_ADC_VREF_VOLT;	
	float voltageDividerFactor = (BATTERY_VOLTAGE_DIVIDER_TOP_RESISTOR_OHM + BATTERY_VOLTAGE_DIVIDER_BOTTOM_RESISTOR_OHM)
		/ BATTERY_VOLTAGE_DIVIDER_BOTTOM_RESISTOR_OHM;
	
	sAdcToBattVoltageFactor = adcResolution / voltageDividerFactor;
    1458:	89 e2       	ldi	r24, 0x29	; 41
    145a:	95 ed       	ldi	r25, 0xD5	; 213
    145c:	a2 e8       	ldi	r26, 0x82	; 130
    145e:	b2 e4       	ldi	r27, 0x42	; 66
    1460:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <sAdcToBattVoltageFactor>
    1464:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <sAdcToBattVoltageFactor+0x1>
    1468:	a0 93 98 04 	sts	0x0498, r26	; 0x800498 <sAdcToBattVoltageFactor+0x2>
    146c:	b0 93 99 04 	sts	0x0499, r27	; 0x800499 <sAdcToBattVoltageFactor+0x3>
    1470:	08 95       	ret

00001472 <Battery_Init>:

static void TaskHandler(void);
static void Precalculation(void);

void Battery_Init(void)
{
    1472:	0f 93       	push	r16
    ADMUX |= (1 << REFS0);
    1474:	87 b1       	in	r24, 0x07	; 7
    1476:	80 64       	ori	r24, 0x40	; 64
    1478:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    147a:	86 b1       	in	r24, 0x06	; 6
    147c:	87 60       	ori	r24, 0x07	; 7
    147e:	86 b9       	out	0x06, r24	; 6
    ADCSRA |= (1 << ADEN);
    1480:	86 b1       	in	r24, 0x06	; 6
    1482:	80 68       	ori	r24, 0x80	; 128
    1484:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADSC);
    1486:	86 b1       	in	r24, 0x06	; 6
    1488:	80 64       	ori	r24, 0x40	; 64
    148a:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1 << MUX0) | (1 << MUX1);
    148c:	87 b1       	in	r24, 0x07	; 7
    148e:	83 60       	ori	r24, 0x03	; 3
    1490:	87 b9       	out	0x07, r24	; 7
	DDRA &= ~(1 << BATTERY_ADC_PIN);
    1492:	8a b3       	in	r24, 0x1a	; 26
    1494:	87 7f       	andi	r24, 0xF7	; 247
    1496:	8a bb       	out	0x1a, r24	; 26
	
	Precalculation();
    1498:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Precalculation>
	
	Scheduler_AddTask(TASK_NAME, TASK_PERIOD_MILLIS, TaskHandler, SCHEDULER_OPLVL_NORMAL);
    149c:	02 e0       	ldi	r16, 0x02	; 2
    149e:	2d ec       	ldi	r18, 0xCD	; 205
    14a0:	39 e0       	ldi	r19, 0x09	; 9
    14a2:	4a e0       	ldi	r20, 0x0A	; 10
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	8e e6       	ldi	r24, 0x6E	; 110
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <Scheduler_AddTask>
		
	Terminal_Log("Battery", LOG_OK, "Configured.");
    14b2:	82 e6       	ldi	r24, 0x62	; 98
    14b4:	91 e0       	ldi	r25, 0x01	; 1
    14b6:	9f 93       	push	r25
    14b8:	8f 93       	push	r24
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	8f 93       	push	r24
    14be:	8e e6       	ldi	r24, 0x6E	; 110
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	9f 93       	push	r25
    14c4:	8f 93       	push	r24
    14c6:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
}
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 91       	pop	r16
    14d6:	08 95       	ret

000014d8 <Battery_GetVoltage>:

Battery_Voltage_t Battery_GetVoltage(void)
{
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	ec 01       	movw	r28, r24
	uint16_t intPart = (uint16_t)sAvgOut;
    14f2:	c0 90 8e 04 	lds	r12, 0x048E	; 0x80048e <sAvgOut>
    14f6:	d0 90 8f 04 	lds	r13, 0x048F	; 0x80048f <sAvgOut+0x1>
    14fa:	e0 90 90 04 	lds	r14, 0x0490	; 0x800490 <sAvgOut+0x2>
    14fe:	f0 90 91 04 	lds	r15, 0x0491	; 0x800491 <sAvgOut+0x3>
    1502:	c7 01       	movw	r24, r14
    1504:	b6 01       	movw	r22, r12
    1506:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__fixunssfsi>
    150a:	8b 01       	movw	r16, r22
	uint16_t decimalPart = round((float)(sAvgOut - intPart) * 100.0F);
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__floatunsisf>
    1514:	9b 01       	movw	r18, r22
    1516:	ac 01       	movw	r20, r24
    1518:	c7 01       	movw	r24, r14
    151a:	b6 01       	movw	r22, r12
    151c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__subsf3>
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	48 ec       	ldi	r20, 0xC8	; 200
    1526:	52 e4       	ldi	r21, 0x42	; 66
    1528:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <__mulsf3>
    152c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <round>
    1530:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__fixunssfsi>
    1534:	ab 01       	movw	r20, r22

	if(decimalPart == 100)
    1536:	64 36       	cpi	r22, 0x64	; 100
    1538:	71 05       	cpc	r23, r1
    153a:	21 f4       	brne	.+8      	; 0x1544 <Battery_GetVoltage+0x6c>
	{
		intPart += 1;
    153c:	0f 5f       	subi	r16, 0xFF	; 255
    153e:	1f 4f       	sbci	r17, 0xFF	; 255
		decimalPart = 0;
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	50 e0       	ldi	r21, 0x00	; 0
	}

	int decimalPartFirstDigit = decimalPart / 10;
    1544:	9a 01       	movw	r18, r20
    1546:	ad ec       	ldi	r26, 0xCD	; 205
    1548:	bc ec       	ldi	r27, 0xCC	; 204
    154a:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__umulhisi3>
    154e:	5c 01       	movw	r10, r24
    1550:	b6 94       	lsr	r11
    1552:	a7 94       	ror	r10
    1554:	b6 94       	lsr	r11
    1556:	a7 94       	ror	r10
    1558:	b6 94       	lsr	r11
    155a:	a7 94       	ror	r10
	int decimalPartSecondDigit = decimalPart % 10;
    155c:	95 01       	movw	r18, r10
    155e:	22 0f       	add	r18, r18
    1560:	33 1f       	adc	r19, r19
    1562:	c5 01       	movw	r24, r10
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	82 0f       	add	r24, r18
    1572:	93 1f       	adc	r25, r19
    1574:	48 1b       	sub	r20, r24
    1576:	59 0b       	sbc	r21, r25

	sVoltage.intPart = intPart;
    1578:	e4 e8       	ldi	r30, 0x84	; 132
    157a:	f4 e0       	ldi	r31, 0x04	; 4
    157c:	00 83       	st	Z, r16
	sVoltage.decPartFirstDig = decimalPartFirstDigit;
    157e:	a1 82       	std	Z+1, r10	; 0x01
	sVoltage.decPartSecDig = decimalPartSecondDigit;
    1580:	42 83       	std	Z+2, r20	; 0x02
	sVoltage.adcRaw = ADCW;
    1582:	84 b1       	in	r24, 0x04	; 4
    1584:	95 b1       	in	r25, 0x05	; 5
    1586:	94 83       	std	Z+4, r25	; 0x04
    1588:	83 83       	std	Z+3, r24	; 0x03
	sVoltage.adcVoltage = sAvgOut;
    158a:	c5 82       	std	Z+5, r12	; 0x05
    158c:	d6 82       	std	Z+6, r13	; 0x06
    158e:	e7 82       	std	Z+7, r14	; 0x07
    1590:	f0 86       	std	Z+8, r15	; 0x08
	
	return sVoltage;
    1592:	8a e0       	ldi	r24, 0x0A	; 10
    1594:	de 01       	movw	r26, r28
    1596:	01 90       	ld	r0, Z+
    1598:	0d 92       	st	X+, r0
    159a:	8a 95       	dec	r24
    159c:	e1 f7       	brne	.-8      	; 0x1596 <Battery_GetVoltage+0xbe>
}
    159e:	ce 01       	movw	r24, r28
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	ff 90       	pop	r15
    15aa:	ef 90       	pop	r14
    15ac:	df 90       	pop	r13
    15ae:	cf 90       	pop	r12
    15b0:	bf 90       	pop	r11
    15b2:	af 90       	pop	r10
    15b4:	9f 90       	pop	r9
    15b6:	8f 90       	pop	r8
    15b8:	08 95       	ret

000015ba <Button_Init>:
	while(Button_GetState() == true);
}

void Button_Init(void)
{
	Gpio_Init(BUTTON_PORT, BUTTON_PIN, GPIO_TYPE_INPUT_PULL_UP);
    15ba:	41 e0       	ldi	r20, 0x01	; 1
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Gpio_Init>
	
	Terminal_Log("Button", LOG_OK, "Configured.");
    15c4:	82 e6       	ldi	r24, 0x62	; 98
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	9f 93       	push	r25
    15ca:	8f 93       	push	r24
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	8f 93       	push	r24
    15d0:	8d eb       	ldi	r24, 0xBD	; 189
    15d2:	92 e0       	ldi	r25, 0x02	; 2
    15d4:	9f 93       	push	r25
    15d6:	8f 93       	push	r24
    15d8:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	08 95       	ret

000015e8 <Button_GetState>:

bool Button_GetState(void)
{
	bool state = !Gpio_ReadPin(BUTTON_PORT, BUTTON_PIN);
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	0e 94 63 14 	call	0x28c6	; 0x28c6 <Gpio_ReadPin>
	
	return state;
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	89 27       	eor	r24, r25
    15f4:	08 95       	ret

000015f6 <EnterDebug>:
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void EnterDebug(void)
{
	Gpio_Init(BUTTON_PORT, BUTTON_PIN, GPIO_TYPE_INPUT_PULL_UP);
    15f6:	41 e0       	ldi	r20, 0x01	; 1
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Gpio_Init>
	
	if(Button_GetState() == true)
    1600:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <Button_GetState>
    1604:	88 23       	and	r24, r24
    1606:	31 f0       	breq	.+12     	; 0x1614 <EnterDebug+0x1e>
	{
		Tactic_RunTestMode();
    1608:	0e 94 c5 08 	call	0x118a	; 0x118a <Tactic_RunTestMode>
		Terminal_SetLevel(LOG_DEBUG);
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	0e 94 36 12 	call	0x246c	; 0x246c <Terminal_SetLevel>
    1612:	03 c0       	rjmp	.+6      	; 0x161a <EnterDebug+0x24>
	}
	else
	{
		Terminal_SetLevel(LOG_NONE); //todo: should be LOG_NONE
    1614:	86 e0       	ldi	r24, 0x06	; 6
    1616:	0e 94 36 12 	call	0x246c	; 0x246c <Terminal_SetLevel>
	}
	
	while(Button_GetState() == true);
    161a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <Button_GetState>
    161e:	81 11       	cpse	r24, r1
    1620:	fc cf       	rjmp	.-8      	; 0x161a <EnterDebug+0x24>
}
    1622:	08 95       	ret

00001624 <TaskHandler>:
                        PRIVATE FUNCTION IMPLEMENTATION
******************************************************************************/

static void TaskHandler(void)
{	
	for(uint8_t idx = 0U; idx < DIST_SENS_FRONT_NBR; idx++)
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	33 c0       	rjmp	.+102    	; 0x168e <TaskHandler+0x6a>
	{
		sSensorsOutput.front[idx] =
			!(*sSensorsFront[idx].portReg
    1628:	84 2f       	mov	r24, r20
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	fc 01       	movw	r30, r24
    162e:	ee 0f       	add	r30, r30
    1630:	ff 1f       	adc	r31, r31
    1632:	ee 0f       	add	r30, r30
    1634:	ff 1f       	adc	r31, r31
    1636:	e8 0f       	add	r30, r24
    1638:	f9 1f       	adc	r31, r25
    163a:	eb 59       	subi	r30, 0x9B	; 155
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	a0 81       	ld	r26, Z
    1640:	b1 81       	ldd	r27, Z+1	; 0x01
    1642:	2c 91       	ld	r18, X
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	03 80       	ldd	r0, Z+3	; 0x03
    1648:	02 c0       	rjmp	.+4      	; 0x164e <TaskHandler+0x2a>
    164a:	35 95       	asr	r19
    164c:	27 95       	ror	r18
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <TaskHandler+0x26>
    1652:	61 e0       	ldi	r22, 0x01	; 1
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	20 ff       	sbrs	r18, 0
    1658:	02 c0       	rjmp	.+4      	; 0x165e <TaskHandler+0x3a>
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	70 e0       	ldi	r23, 0x00	; 0
			& (1 << sSensorsFront[idx].pin))
			* (uint8_t)sSensorsFront[idx].enable;
    165e:	fc 01       	movw	r30, r24
    1660:	ee 0f       	add	r30, r30
    1662:	ff 1f       	adc	r31, r31
    1664:	ee 0f       	add	r30, r30
    1666:	ff 1f       	adc	r31, r31
    1668:	e8 0f       	add	r30, r24
    166a:	f9 1f       	adc	r31, r25
    166c:	eb 59       	subi	r30, 0x9B	; 155
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	24 81       	ldd	r18, Z+4	; 0x04
    1672:	26 9f       	mul	r18, r22
    1674:	f0 01       	movw	r30, r0
    1676:	27 9f       	mul	r18, r23
    1678:	f0 0d       	add	r31, r0
    167a:	11 24       	eor	r1, r1
    167c:	21 e0       	ldi	r18, 0x01	; 1
    167e:	ef 2b       	or	r30, r31
    1680:	09 f4       	brne	.+2      	; 0x1684 <TaskHandler+0x60>
    1682:	20 e0       	ldi	r18, 0x00	; 0

static void TaskHandler(void)
{	
	for(uint8_t idx = 0U; idx < DIST_SENS_FRONT_NBR; idx++)
	{
		sSensorsOutput.front[idx] =
    1684:	fc 01       	movw	r30, r24
    1686:	e5 56       	subi	r30, 0x65	; 101
    1688:	fb 4f       	sbci	r31, 0xFB	; 251
    168a:	20 83       	st	Z, r18
                        PRIVATE FUNCTION IMPLEMENTATION
******************************************************************************/

static void TaskHandler(void)
{	
	for(uint8_t idx = 0U; idx < DIST_SENS_FRONT_NBR; idx++)
    168c:	4f 5f       	subi	r20, 0xFF	; 255
    168e:	45 30       	cpi	r20, 0x05	; 5
    1690:	58 f2       	brcs	.-106    	; 0x1628 <TaskHandler+0x4>
			!(*sSensorsFront[idx].portReg
			& (1 << sSensorsFront[idx].pin))
			* (uint8_t)sSensorsFront[idx].enable;
	}
	
	sSensorsOutput.back[DIST_SENS_BACK] = !(*sSensorsBack[DIST_SENS_BACK].portReg
    1692:	e0 e6       	ldi	r30, 0x60	; 96
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	a0 81       	ld	r26, Z
    1698:	b1 81       	ldd	r27, Z+1	; 0x01
    169a:	8c 91       	ld	r24, X
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	03 80       	ldd	r0, Z+3	; 0x03
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <TaskHandler+0x82>
    16a2:	95 95       	asr	r25
    16a4:	87 95       	ror	r24
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <TaskHandler+0x7e>
    16aa:	21 e0       	ldi	r18, 0x01	; 1
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	80 ff       	sbrs	r24, 0
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <TaskHandler+0x92>
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
		& (1 << sSensorsBack[DIST_SENS_BACK].pin))
		* (uint8_t)sSensorsBack[DIST_SENS_BACK].enable;
    16b6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
    16ba:	82 9f       	mul	r24, r18
    16bc:	a0 01       	movw	r20, r0
    16be:	83 9f       	mul	r24, r19
    16c0:	50 0d       	add	r21, r0
    16c2:	11 24       	eor	r1, r1
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	45 2b       	or	r20, r21
    16c8:	09 f4       	brne	.+2      	; 0x16cc <TaskHandler+0xa8>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
			!(*sSensorsFront[idx].portReg
			& (1 << sSensorsFront[idx].pin))
			* (uint8_t)sSensorsFront[idx].enable;
	}
	
	sSensorsOutput.back[DIST_SENS_BACK] = !(*sSensorsBack[DIST_SENS_BACK].portReg
    16cc:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <sSensorsOutput+0x5>
    16d0:	08 95       	ret

000016d2 <Distance_Init>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void Distance_Init(void)
{
    16d2:	0f 93       	push	r16
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
	for(uint8_t idx = 0U; idx < DIST_SENS_FRONT_NBR; idx++)
    16d8:	c0 e0       	ldi	r28, 0x00	; 0
    16da:	11 c0       	rjmp	.+34     	; 0x16fe <Distance_Init+0x2c>
	{
		Gpio_Init(sSensorsFront[idx].port, sSensorsFront[idx].pin, GPIO_TYPE_INPUT);
    16dc:	ec 2f       	mov	r30, r28
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	cf 01       	movw	r24, r30
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	e8 0f       	add	r30, r24
    16ec:	f9 1f       	adc	r31, r25
    16ee:	eb 59       	subi	r30, 0x9B	; 155
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	63 81       	ldd	r22, Z+3	; 0x03
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Gpio_Init>
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void Distance_Init(void)
{
	for(uint8_t idx = 0U; idx < DIST_SENS_FRONT_NBR; idx++)
    16fc:	cf 5f       	subi	r28, 0xFF	; 255
    16fe:	c5 30       	cpi	r28, 0x05	; 5
    1700:	68 f3       	brcs	.-38     	; 0x16dc <Distance_Init+0xa>
	{
		Gpio_Init(sSensorsFront[idx].port, sSensorsFront[idx].pin, GPIO_TYPE_INPUT);
	}
	Gpio_Init(sSensorsBack[DIST_SENS_BACK].port, sSensorsBack[DIST_SENS_BACK].pin, GPIO_TYPE_INPUT);
    1702:	c0 e6       	ldi	r28, 0x60	; 96
    1704:	d0 e0       	ldi	r29, 0x00	; 0
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	6b 81       	ldd	r22, Y+3	; 0x03
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Gpio_Init>
	
	sSensorsFront[DIST_SENS_LEFT].portReg = &PINC;
    1710:	e5 e6       	ldi	r30, 0x65	; 101
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	83 e3       	ldi	r24, 0x33	; 51
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	80 83       	st	Z, r24
	sSensorsFront[DIST_SENS_LEFT_DIAG].portReg = &PINA;
    171c:	89 e3       	ldi	r24, 0x39	; 57
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	96 83       	std	Z+6, r25	; 0x06
    1722:	85 83       	std	Z+5, r24	; 0x05
	sSensorsFront[DIST_SENS_FRONT].portReg = &PINA;
    1724:	93 87       	std	Z+11, r25	; 0x0b
    1726:	82 87       	std	Z+10, r24	; 0x0a
	sSensorsFront[DIST_SENS_RIGHT_DIAG].portReg = &PINA;
    1728:	90 8b       	std	Z+16, r25	; 0x10
    172a:	87 87       	std	Z+15, r24	; 0x0f
	sSensorsFront[DIST_SENS_RIGHT].portReg = &PINA;
    172c:	95 8b       	std	Z+21, r25	; 0x15
    172e:	84 8b       	std	Z+20, r24	; 0x14
	sSensorsBack[DIST_SENS_BACK].portReg = &PIND;
    1730:	80 e3       	ldi	r24, 0x30	; 48
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	99 83       	std	Y+1, r25	; 0x01
    1736:	88 83       	st	Y, r24
	
	Scheduler_AddTask(TASK_NAME, TASK_PERIOD_MILLIS, TaskHandler, SCHEDULER_OPLVL_NORMAL);
    1738:	02 e0       	ldi	r16, 0x02	; 2
    173a:	22 e1       	ldi	r18, 0x12	; 18
    173c:	3b e0       	ldi	r19, 0x0B	; 11
    173e:	45 e0       	ldi	r20, 0x05	; 5
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	84 ec       	ldi	r24, 0xC4	; 196
    1748:	92 e0       	ldi	r25, 0x02	; 2
    174a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <Scheduler_AddTask>
	
	Terminal_Log("Distance", LOG_OK, "Configured.");
    174e:	82 e6       	ldi	r24, 0x62	; 98
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	9f 93       	push	r25
    1754:	8f 93       	push	r24
    1756:	82 e0       	ldi	r24, 0x02	; 2
    1758:	8f 93       	push	r24
    175a:	84 ec       	ldi	r24, 0xC4	; 196
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	9f 93       	push	r25
    1760:	8f 93       	push	r24
    1762:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	0f 91       	pop	r16
    1776:	08 95       	ret

00001778 <Distance_GetFrontStateArray>:

Distance_Output_t Distance_GetFrontStateArray(void)
{
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	00 d0       	rcall	.+0      	; 0x177e <Distance_GetFrontStateArray+0x6>
    177e:	00 d0       	rcall	.+0      	; 0x1780 <Distance_GetFrontStateArray+0x8>
    1780:	00 d0       	rcall	.+0      	; 0x1782 <Distance_GetFrontStateArray+0xa>
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
	return sSensorsOutput;
    1786:	86 e0       	ldi	r24, 0x06	; 6
    1788:	eb e9       	ldi	r30, 0x9B	; 155
    178a:	f4 e0       	ldi	r31, 0x04	; 4
    178c:	de 01       	movw	r26, r28
    178e:	11 96       	adiw	r26, 0x01	; 1
    1790:	01 90       	ld	r0, Z+
    1792:	0d 92       	st	X+, r0
    1794:	8a 95       	dec	r24
    1796:	e1 f7       	brne	.-8      	; 0x1790 <Distance_GetFrontStateArray+0x18>
    1798:	29 81       	ldd	r18, Y+1	; 0x01
    179a:	3a 81       	ldd	r19, Y+2	; 0x02
    179c:	4b 81       	ldd	r20, Y+3	; 0x03
    179e:	5c 81       	ldd	r21, Y+4	; 0x04
    17a0:	6d 81       	ldd	r22, Y+5	; 0x05
    17a2:	7e 81       	ldd	r23, Y+6	; 0x06
}
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	26 96       	adiw	r28, 0x06	; 6
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	08 95       	ret

000017ba <Distance_GetNbrOfActFrontSensors>:

uint8_t Distance_GetNbrOfActFrontSensors(void)
{
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
	uint8_t activeSensors = ((uint8_t)sSensorsOutput.front[DIST_SENS_LEFT] * (uint8_t)sSensorsBack[DIST_SENS_LEFT].enable)
    17be:	ab e9       	ldi	r26, 0x9B	; 155
    17c0:	b4 e0       	ldi	r27, 0x04	; 4
    17c2:	dc 91       	ld	r29, X
    17c4:	e0 e6       	ldi	r30, 0x60	; 96
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	c4 81       	ldd	r28, Z+4	; 0x04
	+ ((uint8_t)sSensorsOutput.front[DIST_SENS_LEFT_DIAG] * (uint8_t)sSensorsBack[DIST_SENS_LEFT_DIAG].enable)
    17ca:	11 96       	adiw	r26, 0x01	; 1
    17cc:	2c 91       	ld	r18, X
    17ce:	11 97       	sbiw	r26, 0x01	; 1
    17d0:	81 85       	ldd	r24, Z+9	; 0x09
	+ ((uint8_t)sSensorsOutput.front[DIST_SENS_FRONT] * (uint8_t)sSensorsBack[DIST_SENS_FRONT].enable)
	+ ((uint8_t)sSensorsOutput.front[DIST_SENS_RIGHT_DIAG] * (uint8_t)sSensorsBack[DIST_SENS_RIGHT_DIAG].enable)
    17d2:	13 96       	adiw	r26, 0x03	; 3
    17d4:	6c 91       	ld	r22, X
    17d6:	13 97       	sbiw	r26, 0x03	; 3
    17d8:	53 89       	ldd	r21, Z+19	; 0x13

uint8_t Distance_GetNbrOfActFrontSensors(void)
{
	uint8_t activeSensors = ((uint8_t)sSensorsOutput.front[DIST_SENS_LEFT] * (uint8_t)sSensorsBack[DIST_SENS_LEFT].enable)
	+ ((uint8_t)sSensorsOutput.front[DIST_SENS_LEFT_DIAG] * (uint8_t)sSensorsBack[DIST_SENS_LEFT_DIAG].enable)
	+ ((uint8_t)sSensorsOutput.front[DIST_SENS_FRONT] * (uint8_t)sSensorsBack[DIST_SENS_FRONT].enable)
    17da:	12 96       	adiw	r26, 0x02	; 2
    17dc:	9c 91       	ld	r25, X
    17de:	12 97       	sbiw	r26, 0x02	; 2
    17e0:	76 85       	ldd	r23, Z+14	; 0x0e
	+ ((uint8_t)sSensorsOutput.front[DIST_SENS_RIGHT_DIAG] * (uint8_t)sSensorsBack[DIST_SENS_RIGHT_DIAG].enable)
	+ ((uint8_t)sSensorsOutput.front[DIST_SENS_RIGHT] * (uint8_t)sSensorsBack[DIST_SENS_RIGHT].enable);
    17e2:	14 96       	adiw	r26, 0x04	; 4
    17e4:	4c 91       	ld	r20, X
    17e6:	30 8d       	ldd	r19, Z+24	; 0x18
	return sSensorsOutput;
}

uint8_t Distance_GetNbrOfActFrontSensors(void)
{
	uint8_t activeSensors = ((uint8_t)sSensorsOutput.front[DIST_SENS_LEFT] * (uint8_t)sSensorsBack[DIST_SENS_LEFT].enable)
    17e8:	28 9f       	mul	r18, r24
    17ea:	80 2d       	mov	r24, r0
    17ec:	11 24       	eor	r1, r1
    17ee:	28 2f       	mov	r18, r24
    17f0:	dc 9f       	mul	r29, r28
    17f2:	20 0d       	add	r18, r0
    17f4:	11 24       	eor	r1, r1
    17f6:	97 9f       	mul	r25, r23
    17f8:	80 2d       	mov	r24, r0
    17fa:	11 24       	eor	r1, r1
    17fc:	65 9f       	mul	r22, r21
    17fe:	80 0d       	add	r24, r0
    1800:	11 24       	eor	r1, r1
    1802:	82 0f       	add	r24, r18
	+ ((uint8_t)sSensorsOutput.front[DIST_SENS_FRONT] * (uint8_t)sSensorsBack[DIST_SENS_FRONT].enable)
	+ ((uint8_t)sSensorsOutput.front[DIST_SENS_RIGHT_DIAG] * (uint8_t)sSensorsBack[DIST_SENS_RIGHT_DIAG].enable)
	+ ((uint8_t)sSensorsOutput.front[DIST_SENS_RIGHT] * (uint8_t)sSensorsBack[DIST_SENS_RIGHT].enable);
	
	return activeSensors;
}
    1804:	43 9f       	mul	r20, r19
    1806:	80 0d       	add	r24, r0
    1808:	11 24       	eor	r1, r1
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <Led_Set>:
	Terminal_Log("Led", LOG_OK, "Configured.");
}

void Led_Set(Led_Colors_t color, bool state)
{
	if(color > LED_COLOR_BLUE)
    1810:	83 30       	cpi	r24, 0x03	; 3
    1812:	a8 f4       	brcc	.+42     	; 0x183e <Led_Set+0x2e>
    1814:	46 2f       	mov	r20, r22
	{
		return;
	}
	
	switch(color)
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	49 f0       	breq	.+18     	; 0x182c <Led_Set+0x1c>
    181a:	18 f0       	brcs	.+6      	; 0x1822 <Led_Set+0x12>
    181c:	82 30       	cpi	r24, 0x02	; 2
    181e:	59 f0       	breq	.+22     	; 0x1836 <Led_Set+0x26>
    1820:	08 95       	ret
	{
		case LED_COLOR_RED:
		{
			Gpio_WritePin(LED_RED_PORT, LED_RED_PIN, state);
    1822:	66 e0       	ldi	r22, 0x06	; 6
    1824:	83 e0       	ldi	r24, 0x03	; 3
    1826:	0e 94 bd 13 	call	0x277a	; 0x277a <Gpio_WritePin>
			
			break;
    182a:	08 95       	ret
		} 
		
		case LED_COLOR_GREEN:
		{
			Gpio_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, state);
    182c:	64 e0       	ldi	r22, 0x04	; 4
    182e:	83 e0       	ldi	r24, 0x03	; 3
    1830:	0e 94 bd 13 	call	0x277a	; 0x277a <Gpio_WritePin>
			
			break;
    1834:	08 95       	ret
		}
		
		case LED_COLOR_BLUE:
		{
			Gpio_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, state);
    1836:	63 e0       	ldi	r22, 0x03	; 3
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	0e 94 bd 13 	call	0x277a	; 0x277a <Gpio_WritePin>
    183e:	08 95       	ret

00001840 <Led_Init>:
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void Led_Init(void)
{
    Gpio_Init(LED_RED_PORT, LED_RED_PIN, GPIO_TYPE_OUTPUT);
    1840:	42 e0       	ldi	r20, 0x02	; 2
    1842:	66 e0       	ldi	r22, 0x06	; 6
    1844:	83 e0       	ldi	r24, 0x03	; 3
    1846:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Gpio_Init>
    Gpio_Init(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_TYPE_OUTPUT);
    184a:	42 e0       	ldi	r20, 0x02	; 2
    184c:	64 e0       	ldi	r22, 0x04	; 4
    184e:	83 e0       	ldi	r24, 0x03	; 3
    1850:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Gpio_Init>
    Gpio_Init(LED_BLUE_PORT, LED_BLUE_PIN, GPIO_TYPE_OUTPUT);
    1854:	42 e0       	ldi	r20, 0x02	; 2
    1856:	63 e0       	ldi	r22, 0x03	; 3
    1858:	83 e0       	ldi	r24, 0x03	; 3
    185a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Gpio_Init>
	
	Led_Set(LED_COLOR_RED, false);
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
	Led_Set(LED_COLOR_GREEN, false);
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
	Led_Set(LED_COLOR_BLUE, false);
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	82 e0       	ldi	r24, 0x02	; 2
    1872:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
	
	Terminal_Log("Led", LOG_OK, "Configured.");
    1876:	82 e6       	ldi	r24, 0x62	; 98
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	9f 93       	push	r25
    187c:	8f 93       	push	r24
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	8f 93       	push	r24
    1882:	8d ec       	ldi	r24, 0xCD	; 205
    1884:	92 e0       	ldi	r25, 0x02	; 2
    1886:	9f 93       	push	r25
    1888:	8f 93       	push	r24
    188a:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	08 95       	ret

0000189a <Led_FlashAndBlink>:
		}
	}
}

void Led_FlashAndBlink(Led_Colors_t ledColor, uint16_t flashTimeMillis, uint16_t blinkTimeMillis, uint8_t nbrOfBlinks)
{
    189a:	8f 92       	push	r8
    189c:	9f 92       	push	r9
    189e:	af 92       	push	r10
    18a0:	bf 92       	push	r11
    18a2:	ef 92       	push	r14
    18a4:	ff 92       	push	r15
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	f8 2e       	mov	r15, r24
    18b0:	eb 01       	movw	r28, r22
    18b2:	8a 01       	movw	r16, r20
    18b4:	e2 2e       	mov	r14, r18
	static bool flag;
	static uint8_t blinksCnt;
	static uint32_t timestampFlashTimeMillis;
	static uint32_t timestampBlinkTimeMillis;
	
	uint32_t currentMillis = Time_GetMillis();
    18b6:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
	if(flag == false)
    18ba:	20 91 b6 04 	lds	r18, 0x04B6	; 0x8004b6 <flag.2337>
    18be:	21 11       	cpse	r18, r1
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <Led_FlashAndBlink+0x34>
	{
		currentMillis = flashTimeMillis;
    18c2:	be 01       	movw	r22, r28
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
		flag = true;
    18c8:	21 e0       	ldi	r18, 0x01	; 1
    18ca:	20 93 b6 04 	sts	0x04B6, r18	; 0x8004b6 <flag.2337>
	}
	
	if(currentMillis - timestampFlashTimeMillis >= flashTimeMillis)
    18ce:	80 90 b2 04 	lds	r8, 0x04B2	; 0x8004b2 <timestampFlashTimeMillis.2339>
    18d2:	90 90 b3 04 	lds	r9, 0x04B3	; 0x8004b3 <timestampFlashTimeMillis.2339+0x1>
    18d6:	a0 90 b4 04 	lds	r10, 0x04B4	; 0x8004b4 <timestampFlashTimeMillis.2339+0x2>
    18da:	b0 90 b5 04 	lds	r11, 0x04B5	; 0x8004b5 <timestampFlashTimeMillis.2339+0x3>
    18de:	ab 01       	movw	r20, r22
    18e0:	bc 01       	movw	r22, r24
    18e2:	48 19       	sub	r20, r8
    18e4:	59 09       	sbc	r21, r9
    18e6:	6a 09       	sbc	r22, r10
    18e8:	7b 09       	sbc	r23, r11
    18ea:	ce 01       	movw	r24, r28
    18ec:	a0 e0       	ldi	r26, 0x00	; 0
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	48 17       	cp	r20, r24
    18f2:	59 07       	cpc	r21, r25
    18f4:	6a 07       	cpc	r22, r26
    18f6:	7b 07       	cpc	r23, r27
    18f8:	08 f4       	brcc	.+2      	; 0x18fc <Led_FlashAndBlink+0x62>
    18fa:	4a c0       	rjmp	.+148    	; 0x1990 <Led_FlashAndBlink+0xf6>
	{
		if(blinksCnt < nbrOfBlinks * 2U)
    18fc:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <blinksCnt.2338>
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	2e 2d       	mov	r18, r14
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	22 0f       	add	r18, r18
    1908:	33 1f       	adc	r19, r19
    190a:	82 17       	cp	r24, r18
    190c:	93 07       	cpc	r25, r19
    190e:	a0 f5       	brcc	.+104    	; 0x1978 <Led_FlashAndBlink+0xde>
		{
			if(Time_GetMillis() - timestampBlinkTimeMillis >= blinkTimeMillis)
    1910:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    1914:	80 90 ad 04 	lds	r8, 0x04AD	; 0x8004ad <timestampBlinkTimeMillis.2340>
    1918:	90 90 ae 04 	lds	r9, 0x04AE	; 0x8004ae <timestampBlinkTimeMillis.2340+0x1>
    191c:	a0 90 af 04 	lds	r10, 0x04AF	; 0x8004af <timestampBlinkTimeMillis.2340+0x2>
    1920:	b0 90 b0 04 	lds	r11, 0x04B0	; 0x8004b0 <timestampBlinkTimeMillis.2340+0x3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	88 19       	sub	r24, r8
    192a:	99 09       	sbc	r25, r9
    192c:	aa 09       	sbc	r26, r10
    192e:	bb 09       	sbc	r27, r11
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	80 17       	cp	r24, r16
    1936:	91 07       	cpc	r25, r17
    1938:	a2 07       	cpc	r26, r18
    193a:	b3 07       	cpc	r27, r19
    193c:	48 f1       	brcs	.+82     	; 0x1990 <Led_FlashAndBlink+0xf6>
			{
				if (blinksCnt % 2 == 0)
    193e:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <blinksCnt.2338>
    1942:	80 fd       	sbrc	r24, 0
    1944:	05 c0       	rjmp	.+10     	; 0x1950 <Led_FlashAndBlink+0xb6>
				{
					Led_Set(ledColor, true);
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	8f 2d       	mov	r24, r15
    194a:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
    194e:	04 c0       	rjmp	.+8      	; 0x1958 <Led_FlashAndBlink+0xbe>
				}
				else
				{
					Led_Set(ledColor, false);
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	8f 2d       	mov	r24, r15
    1954:	0e 94 08 0c 	call	0x1810	; 0x1810 <Led_Set>
				}
				
				blinksCnt++;				
    1958:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <blinksCnt.2338>
    195c:	8f 5f       	subi	r24, 0xFF	; 255
    195e:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <blinksCnt.2338>
				timestampBlinkTimeMillis = Time_GetMillis();
    1962:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    1966:	60 93 ad 04 	sts	0x04AD, r22	; 0x8004ad <timestampBlinkTimeMillis.2340>
    196a:	70 93 ae 04 	sts	0x04AE, r23	; 0x8004ae <timestampBlinkTimeMillis.2340+0x1>
    196e:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <timestampBlinkTimeMillis.2340+0x2>
    1972:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <timestampBlinkTimeMillis.2340+0x3>
    1976:	0c c0       	rjmp	.+24     	; 0x1990 <Led_FlashAndBlink+0xf6>
			}
		}
		else
		{
			blinksCnt = 0U;
    1978:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <blinksCnt.2338>
			timestampFlashTimeMillis = Time_GetMillis();
    197c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    1980:	60 93 b2 04 	sts	0x04B2, r22	; 0x8004b2 <timestampFlashTimeMillis.2339>
    1984:	70 93 b3 04 	sts	0x04B3, r23	; 0x8004b3 <timestampFlashTimeMillis.2339+0x1>
    1988:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <timestampFlashTimeMillis.2339+0x2>
    198c:	90 93 b5 04 	sts	0x04B5, r25	; 0x8004b5 <timestampFlashTimeMillis.2339+0x3>
		}
	}
}
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	bf 90       	pop	r11
    199e:	af 90       	pop	r10
    19a0:	9f 90       	pop	r9
    19a2:	8f 90       	pop	r8
    19a4:	08 95       	ret

000019a6 <Led_ShortBlinkRed>:

void Led_ShortBlinkRed(void)
{
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
	static uint32_t millis;
	
	if(Time_GetMillis() - millis > LED_SHORT_BLINK_PERIOD_MILLIS)
    19aa:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    19ae:	00 91 a9 04 	lds	r16, 0x04A9	; 0x8004a9 <millis.2345>
    19b2:	10 91 aa 04 	lds	r17, 0x04AA	; 0x8004aa <millis.2345+0x1>
    19b6:	20 91 ab 04 	lds	r18, 0x04AB	; 0x8004ab <millis.2345+0x2>
    19ba:	30 91 ac 04 	lds	r19, 0x04AC	; 0x8004ac <millis.2345+0x3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	80 1b       	sub	r24, r16
    19c4:	91 0b       	sbc	r25, r17
    19c6:	a2 0b       	sbc	r26, r18
    19c8:	b3 0b       	sbc	r27, r19
    19ca:	85 36       	cpi	r24, 0x65	; 101
    19cc:	91 05       	cpc	r25, r1
    19ce:	a1 05       	cpc	r26, r1
    19d0:	b1 05       	cpc	r27, r1
    19d2:	70 f0       	brcs	.+28     	; 0x19f0 <Led_ShortBlinkRed+0x4a>
	{
		Gpio_TogglePin(LED_RED_PORT, LED_RED_PIN);
    19d4:	66 e0       	ldi	r22, 0x06	; 6
    19d6:	83 e0       	ldi	r24, 0x03	; 3
    19d8:	0e 94 2d 14 	call	0x285a	; 0x285a <Gpio_TogglePin>
		
		millis = Time_GetMillis();
    19dc:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    19e0:	60 93 a9 04 	sts	0x04A9, r22	; 0x8004a9 <millis.2345>
    19e4:	70 93 aa 04 	sts	0x04AA, r23	; 0x8004aa <millis.2345+0x1>
    19e8:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <millis.2345+0x2>
    19ec:	90 93 ac 04 	sts	0x04AC, r25	; 0x8004ac <millis.2345+0x3>
	}
}
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	08 95       	ret

000019f6 <Led_ShortBlinkGreen>:

void Led_ShortBlinkGreen(void)
{
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
	static uint32_t millis;
	
	if(Time_GetMillis() - millis > LED_SHORT_BLINK_PERIOD_MILLIS)
    19fa:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    19fe:	00 91 a5 04 	lds	r16, 0x04A5	; 0x8004a5 <millis.2349>
    1a02:	10 91 a6 04 	lds	r17, 0x04A6	; 0x8004a6 <millis.2349+0x1>
    1a06:	20 91 a7 04 	lds	r18, 0x04A7	; 0x8004a7 <millis.2349+0x2>
    1a0a:	30 91 a8 04 	lds	r19, 0x04A8	; 0x8004a8 <millis.2349+0x3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	80 1b       	sub	r24, r16
    1a14:	91 0b       	sbc	r25, r17
    1a16:	a2 0b       	sbc	r26, r18
    1a18:	b3 0b       	sbc	r27, r19
    1a1a:	85 36       	cpi	r24, 0x65	; 101
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	a1 05       	cpc	r26, r1
    1a20:	b1 05       	cpc	r27, r1
    1a22:	70 f0       	brcs	.+28     	; 0x1a40 <Led_ShortBlinkGreen+0x4a>
	{
		Gpio_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
    1a24:	64 e0       	ldi	r22, 0x04	; 4
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	0e 94 2d 14 	call	0x285a	; 0x285a <Gpio_TogglePin>
		
		millis = Time_GetMillis();
    1a2c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    1a30:	60 93 a5 04 	sts	0x04A5, r22	; 0x8004a5 <millis.2349>
    1a34:	70 93 a6 04 	sts	0x04A6, r23	; 0x8004a6 <millis.2349+0x1>
    1a38:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <millis.2349+0x2>
    1a3c:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <millis.2349+0x3>
	}
}
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	08 95       	ret

00001a46 <Led_ShortBlinkBlue>:

void Led_ShortBlinkBlue(void)
{
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
	static uint32_t millis;
	
	if(Time_GetMillis() - millis > LED_SHORT_BLINK_PERIOD_MILLIS)
    1a4a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    1a4e:	00 91 a1 04 	lds	r16, 0x04A1	; 0x8004a1 <millis.2353>
    1a52:	10 91 a2 04 	lds	r17, 0x04A2	; 0x8004a2 <millis.2353+0x1>
    1a56:	20 91 a3 04 	lds	r18, 0x04A3	; 0x8004a3 <millis.2353+0x2>
    1a5a:	30 91 a4 04 	lds	r19, 0x04A4	; 0x8004a4 <millis.2353+0x3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	80 1b       	sub	r24, r16
    1a64:	91 0b       	sbc	r25, r17
    1a66:	a2 0b       	sbc	r26, r18
    1a68:	b3 0b       	sbc	r27, r19
    1a6a:	85 36       	cpi	r24, 0x65	; 101
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	a1 05       	cpc	r26, r1
    1a70:	b1 05       	cpc	r27, r1
    1a72:	70 f0       	brcs	.+28     	; 0x1a90 <Led_ShortBlinkBlue+0x4a>
	{
		Gpio_TogglePin(LED_BLUE_PORT, LED_BLUE_PIN);
    1a74:	63 e0       	ldi	r22, 0x03	; 3
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	0e 94 2d 14 	call	0x285a	; 0x285a <Gpio_TogglePin>
		
		millis = Time_GetMillis();
    1a7c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    1a80:	60 93 a1 04 	sts	0x04A1, r22	; 0x8004a1 <millis.2353>
    1a84:	70 93 a2 04 	sts	0x04A2, r23	; 0x8004a2 <millis.2353+0x1>
    1a88:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <millis.2353+0x2>
    1a8c:	90 93 a4 04 	sts	0x04A4, r25	; 0x8004a4 <millis.2353+0x3>
	}
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	08 95       	ret

00001a96 <TaskHandler>:
                        PRIVATE FUNCTION IMPLEMENTATION
******************************************************************************/

static void TaskHandler(void)
{	
	for(uint8_t idx = 0U; idx < LINE_SENS_NBR; idx++)
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	33 c0       	rjmp	.+102    	; 0x1b00 <TaskHandler+0x6a>
	{
		sSensorsOutput.state[idx] = !(*sSensorsFront[idx].portReg & (1 << sSensorsFront[idx].pin))
    1a9a:	84 2f       	mov	r24, r20
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	ee 0f       	add	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	e8 0f       	add	r30, r24
    1aaa:	f9 1f       	adc	r31, r25
    1aac:	e2 58       	subi	r30, 0x82	; 130
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	a0 81       	ld	r26, Z
    1ab2:	b1 81       	ldd	r27, Z+1	; 0x01
    1ab4:	2c 91       	ld	r18, X
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	03 80       	ldd	r0, Z+3	; 0x03
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <TaskHandler+0x2a>
    1abc:	35 95       	asr	r19
    1abe:	27 95       	ror	r18
    1ac0:	0a 94       	dec	r0
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <TaskHandler+0x26>
    1ac4:	61 e0       	ldi	r22, 0x01	; 1
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	20 ff       	sbrs	r18, 0
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <TaskHandler+0x3a>
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	70 e0       	ldi	r23, 0x00	; 0
		* (uint8_t)sSensorsFront[idx].enable;
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	e8 0f       	add	r30, r24
    1adc:	f9 1f       	adc	r31, r25
    1ade:	e2 58       	subi	r30, 0x82	; 130
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	24 81       	ldd	r18, Z+4	; 0x04
    1ae4:	26 9f       	mul	r18, r22
    1ae6:	f0 01       	movw	r30, r0
    1ae8:	27 9f       	mul	r18, r23
    1aea:	f0 0d       	add	r31, r0
    1aec:	11 24       	eor	r1, r1
    1aee:	21 e0       	ldi	r18, 0x01	; 1
    1af0:	ef 2b       	or	r30, r31
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <TaskHandler+0x60>
    1af4:	20 e0       	ldi	r18, 0x00	; 0

static void TaskHandler(void)
{	
	for(uint8_t idx = 0U; idx < LINE_SENS_NBR; idx++)
	{
		sSensorsOutput.state[idx] = !(*sSensorsFront[idx].portReg & (1 << sSensorsFront[idx].pin))
    1af6:	fc 01       	movw	r30, r24
    1af8:	e9 54       	subi	r30, 0x49	; 73
    1afa:	fb 4f       	sbci	r31, 0xFB	; 251
    1afc:	20 83       	st	Z, r18
                        PRIVATE FUNCTION IMPLEMENTATION
******************************************************************************/

static void TaskHandler(void)
{	
	for(uint8_t idx = 0U; idx < LINE_SENS_NBR; idx++)
    1afe:	4f 5f       	subi	r20, 0xFF	; 255
    1b00:	44 30       	cpi	r20, 0x04	; 4
    1b02:	58 f2       	brcs	.-106    	; 0x1a9a <TaskHandler+0x4>
	{
		sSensorsOutput.state[idx] = !(*sSensorsFront[idx].portReg & (1 << sSensorsFront[idx].pin))
		* (uint8_t)sSensorsFront[idx].enable;
	}
    1b04:	08 95       	ret

00001b06 <Line_Init>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void Line_Init(void)
{
    1b06:	0f 93       	push	r16
    1b08:	cf 93       	push	r28
	for(uint8_t idx = 0U; idx < LINE_SENS_NBR; idx++)
    1b0a:	c0 e0       	ldi	r28, 0x00	; 0
    1b0c:	11 c0       	rjmp	.+34     	; 0x1b30 <Line_Init+0x2a>
	{
		Gpio_Init(sSensorsFront[idx].port, sSensorsFront[idx].pin, GPIO_TYPE_INPUT);
    1b0e:	ec 2f       	mov	r30, r28
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	cf 01       	movw	r24, r30
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	e8 0f       	add	r30, r24
    1b1e:	f9 1f       	adc	r31, r25
    1b20:	e2 58       	subi	r30, 0x82	; 130
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	63 81       	ldd	r22, Z+3	; 0x03
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Gpio_Init>
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void Line_Init(void)
{
	for(uint8_t idx = 0U; idx < LINE_SENS_NBR; idx++)
    1b2e:	cf 5f       	subi	r28, 0xFF	; 255
    1b30:	c4 30       	cpi	r28, 0x04	; 4
    1b32:	68 f3       	brcs	.-38     	; 0x1b0e <Line_Init+0x8>
	{
		Gpio_Init(sSensorsFront[idx].port, sSensorsFront[idx].pin, GPIO_TYPE_INPUT);
	}
	
	sSensorsFront[LINE_SENS_FRONT_LEFT].portReg = &PINC;
    1b34:	ee e7       	ldi	r30, 0x7E	; 126
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	23 e3       	ldi	r18, 0x33	; 51
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	31 83       	std	Z+1, r19	; 0x01
    1b3e:	20 83       	st	Z, r18
	sSensorsFront[LINE_SENS_FRONT_RIGHT].portReg = &PINB;
    1b40:	86 e3       	ldi	r24, 0x36	; 54
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	96 83       	std	Z+6, r25	; 0x06
    1b46:	85 83       	std	Z+5, r24	; 0x05
	sSensorsFront[LINE_SENS_BACK_LEFT].portReg = &PINC;
    1b48:	33 87       	std	Z+11, r19	; 0x0b
    1b4a:	22 87       	std	Z+10, r18	; 0x0a
	sSensorsFront[LINE_SENS_BACK_RIGHT].portReg = &PINB;
    1b4c:	90 8b       	std	Z+16, r25	; 0x10
    1b4e:	87 87       	std	Z+15, r24	; 0x0f
	
	Scheduler_AddTask(TASK_NAME, TASK_PERIOD_MILLIS, TaskHandler, SCHEDULER_OPLVL_NORMAL);
    1b50:	02 e0       	ldi	r16, 0x02	; 2
    1b52:	2b e4       	ldi	r18, 0x4B	; 75
    1b54:	3d e0       	ldi	r19, 0x0D	; 13
    1b56:	45 e0       	ldi	r20, 0x05	; 5
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	8d e4       	ldi	r24, 0x4D	; 77
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <Scheduler_AddTask>
	
	Terminal_Log(TASK_NAME, LOG_OK, "Configured.");
    1b66:	82 e6       	ldi	r24, 0x62	; 98
    1b68:	91 e0       	ldi	r25, 0x01	; 1
    1b6a:	9f 93       	push	r25
    1b6c:	8f 93       	push	r24
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	8f 93       	push	r24
    1b72:	8d e4       	ldi	r24, 0x4D	; 77
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	9f 93       	push	r25
    1b78:	8f 93       	push	r24
    1b7a:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
}
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	cf 91       	pop	r28
    1b8a:	0f 91       	pop	r16
    1b8c:	08 95       	ret

00001b8e <Line_GetState>:

Line_Output_t Line_GetState(void)
{
	return sSensorsOutput;
    1b8e:	60 91 b7 04 	lds	r22, 0x04B7	; 0x8004b7 <sSensorsOutput>
    1b92:	70 91 b8 04 	lds	r23, 0x04B8	; 0x8004b8 <sSensorsOutput+0x1>
    1b96:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <sSensorsOutput+0x2>
    1b9a:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <sSensorsOutput+0x3>
}
    1b9e:	08 95       	ret

00001ba0 <Motor_Init>:
};

static inline void SetMotorDirection(Motor_Id_t id, Motor_Direction_t dir);

void Motor_Init(void)
{
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
	for(uint8_t motIdx = 0U; motIdx < MOTOR_NBR_OF_MOTORS; motIdx++)
    1ba4:	d0 e0       	ldi	r29, 0x00	; 0
    1ba6:	1a c0       	rjmp	.+52     	; 0x1bdc <Motor_Init+0x3c>
	{
		for(uint8_t pinIdx = 0U; pinIdx < MOTOR_NBR_OF_DRIVER_OUTPUTS; pinIdx++)
		{
			Gpio_Init(sMotor[motIdx][pinIdx].port, sMotor[motIdx][pinIdx].pin, GPIO_TYPE_OUTPUT);
    1ba8:	8d 2f       	mov	r24, r29
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	fc 01       	movw	r30, r24
    1bae:	ee 0f       	add	r30, r30
    1bb0:	ff 1f       	adc	r31, r31
    1bb2:	e8 0f       	add	r30, r24
    1bb4:	f9 1f       	adc	r31, r25
    1bb6:	ec 0f       	add	r30, r28
    1bb8:	f1 1d       	adc	r31, r1
    1bba:	ee 0f       	add	r30, r30
    1bbc:	ff 1f       	adc	r31, r31
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	ee 56       	subi	r30, 0x6E	; 110
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	42 e0       	ldi	r20, 0x02	; 2
    1bc8:	63 81       	ldd	r22, Z+3	; 0x03
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Gpio_Init>

void Motor_Init(void)
{
	for(uint8_t motIdx = 0U; motIdx < MOTOR_NBR_OF_MOTORS; motIdx++)
	{
		for(uint8_t pinIdx = 0U; pinIdx < MOTOR_NBR_OF_DRIVER_OUTPUTS; pinIdx++)
    1bd0:	cf 5f       	subi	r28, 0xFF	; 255
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <Motor_Init+0x36>
    1bd4:	c0 e0       	ldi	r28, 0x00	; 0
    1bd6:	c3 30       	cpi	r28, 0x03	; 3
    1bd8:	38 f3       	brcs	.-50     	; 0x1ba8 <Motor_Init+0x8>

static inline void SetMotorDirection(Motor_Id_t id, Motor_Direction_t dir);

void Motor_Init(void)
{
	for(uint8_t motIdx = 0U; motIdx < MOTOR_NBR_OF_MOTORS; motIdx++)
    1bda:	df 5f       	subi	r29, 0xFF	; 255
    1bdc:	d2 30       	cpi	r29, 0x02	; 2
    1bde:	d0 f3       	brcs	.-12     	; 0x1bd4 <Motor_Init+0x34>
		{
			Gpio_Init(sMotor[motIdx][pinIdx].port, sMotor[motIdx][pinIdx].pin, GPIO_TYPE_OUTPUT);
		}
	}
	
	sMotor[MOTOR_ID_LEFT][PIN_PWM].portReg = &PORTB;
    1be0:	e2 e9       	ldi	r30, 0x92	; 146
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	88 e3       	ldi	r24, 0x38	; 56
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	80 83       	st	Z, r24
	sMotor[MOTOR_ID_LEFT][PIN_DIR_A].portReg = &PORTA;
    1bec:	8b e3       	ldi	r24, 0x3B	; 59
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	95 83       	std	Z+5, r25	; 0x05
    1bf2:	84 83       	std	Z+4, r24	; 0x04
	sMotor[MOTOR_ID_LEFT][PIN_DIR_B].portReg = &PORTA;
    1bf4:	91 87       	std	Z+9, r25	; 0x09
    1bf6:	80 87       	std	Z+8, r24	; 0x08
	
	sMotor[MOTOR_ID_RIGHT][PIN_PWM].portReg = &PORTD;
    1bf8:	82 e3       	ldi	r24, 0x32	; 50
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	95 87       	std	Z+13, r25	; 0x0d
    1bfe:	84 87       	std	Z+12, r24	; 0x0c
	sMotor[MOTOR_ID_RIGHT][PIN_DIR_A].portReg = &PORTC;
    1c00:	85 e3       	ldi	r24, 0x35	; 53
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	91 8b       	std	Z+17, r25	; 0x11
    1c06:	80 8b       	std	Z+16, r24	; 0x10
	sMotor[MOTOR_ID_RIGHT][PIN_DIR_B].portReg = &PORTC;
    1c08:	95 8b       	std	Z+21, r25	; 0x15
    1c0a:	84 8b       	std	Z+20, r24	; 0x14
		
	TCCR0 &= ~(1 << CS01) & ~(1 << CS02) & ~(1 << COM00) & ~(1 << FOC0);
    1c0c:	83 b7       	in	r24, 0x33	; 51
    1c0e:	89 76       	andi	r24, 0x69	; 105
    1c10:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS00) | (1 << COM01) | (1 << WGM00) | (1 << WGM01);
    1c12:	83 b7       	in	r24, 0x33	; 51
    1c14:	89 66       	ori	r24, 0x69	; 105
    1c16:	83 bf       	out	0x33, r24	; 51
		
	TCCR2 &=  ~(1 << CS22) & ~(1 << CS21) & ~(1 << COM20) & ~(1 << FOC2);
    1c18:	85 b5       	in	r24, 0x25	; 37
    1c1a:	89 76       	andi	r24, 0x69	; 105
    1c1c:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << CS20) | (1 << WGM20) | (1 << WGM21) | (1 << COM21);
    1c1e:	85 b5       	in	r24, 0x25	; 37
    1c20:	89 66       	ori	r24, 0x69	; 105
    1c22:	85 bd       	out	0x25, r24	; 37
	
	Terminal_Log("Motor", LOG_OK, "Configured.");
    1c24:	82 e6       	ldi	r24, 0x62	; 98
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	9f 93       	push	r25
    1c2a:	8f 93       	push	r24
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	8f 93       	push	r24
    1c30:	81 ed       	ldi	r24, 0xD1	; 209
    1c32:	92 e0       	ldi	r25, 0x02	; 2
    1c34:	9f 93       	push	r25
    1c36:	8f 93       	push	r24
    1c38:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
}
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	08 95       	ret

00001c4c <Motor_Run>:
		*sMotor[id][PIN_DIR_B].portReg &= ~(1 << sMotor[id][PIN_DIR_B].pin);	
	}
}

void Motor_Run(Motor_Id_t id, int16_t speed)
{
    1c4c:	ef 92       	push	r14
    1c4e:	ff 92       	push	r15
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
	if(speed >= 255)
    1c58:	6f 3f       	cpi	r22, 0xFF	; 255
    1c5a:	71 05       	cpc	r23, r1
    1c5c:	2c f4       	brge	.+10     	; 0x1c68 <Motor_Run+0x1c>
	{
		speed = 255;
	}
	else if(speed <= -255)
    1c5e:	62 30       	cpi	r22, 0x02	; 2
    1c60:	9f ef       	ldi	r25, 0xFF	; 255
    1c62:	79 07       	cpc	r23, r25
    1c64:	24 f0       	brlt	.+8      	; 0x1c6e <Motor_Run+0x22>
    1c66:	05 c0       	rjmp	.+10     	; 0x1c72 <Motor_Run+0x26>

void Motor_Run(Motor_Id_t id, int16_t speed)
{
	if(speed >= 255)
	{
		speed = 255;
    1c68:	6f ef       	ldi	r22, 0xFF	; 255
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <Motor_Run+0x26>
	}
	else if(speed <= -255)
	{
		speed = -255;
    1c6e:	61 e0       	ldi	r22, 0x01	; 1
    1c70:	7f ef       	ldi	r23, 0xFF	; 255
	}
	
	if(speed > 0)
    1c72:	16 16       	cp	r1, r22
    1c74:	17 06       	cpc	r1, r23
    1c76:	0c f0       	brlt	.+2      	; 0x1c7a <Motor_Run+0x2e>
    1c78:	40 c0       	rjmp	.+128    	; 0x1cfa <Motor_Run+0xae>

static inline void SetMotorDirection(Motor_Id_t id, Motor_Direction_t dir)
{
	if(dir == MOTOR_DIR_FORWARD)
	{
		*sMotor[id][PIN_DIR_A].portReg &= ~(1 << sMotor[id][PIN_DIR_A].pin);
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	89 01       	movw	r16, r18
    1c80:	00 0f       	add	r16, r16
    1c82:	11 1f       	adc	r17, r17
    1c84:	d8 01       	movw	r26, r16
    1c86:	a2 0f       	add	r26, r18
    1c88:	b3 1f       	adc	r27, r19
    1c8a:	aa 0f       	add	r26, r26
    1c8c:	bb 1f       	adc	r27, r27
    1c8e:	aa 0f       	add	r26, r26
    1c90:	bb 1f       	adc	r27, r27
    1c92:	ae 56       	subi	r26, 0x6E	; 110
    1c94:	bf 4f       	sbci	r27, 0xFF	; 255
    1c96:	14 96       	adiw	r26, 0x04	; 4
    1c98:	ed 90       	ld	r14, X+
    1c9a:	fc 90       	ld	r15, X
    1c9c:	15 97       	sbiw	r26, 0x05	; 5
    1c9e:	e7 01       	movw	r28, r14
    1ca0:	f8 81       	ld	r31, Y
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	ea 01       	movw	r28, r20
    1ca8:	17 96       	adiw	r26, 0x07	; 7
    1caa:	0c 90       	ld	r0, X
    1cac:	17 97       	sbiw	r26, 0x07	; 7
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <Motor_Run+0x68>
    1cb0:	cc 0f       	add	r28, r28
    1cb2:	dd 1f       	adc	r29, r29
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <Motor_Run+0x64>
    1cb8:	9c 2f       	mov	r25, r28
    1cba:	90 95       	com	r25
    1cbc:	9f 23       	and	r25, r31
    1cbe:	f7 01       	movw	r30, r14
    1cc0:	90 83       	st	Z, r25
		*sMotor[id][PIN_DIR_B].portReg |= (1 << sMotor[id][PIN_DIR_B].pin);
    1cc2:	18 96       	adiw	r26, 0x08	; 8
    1cc4:	0d 90       	ld	r0, X+
    1cc6:	bc 91       	ld	r27, X
    1cc8:	a0 2d       	mov	r26, r0
    1cca:	9c 91       	ld	r25, X
    1ccc:	f8 01       	movw	r30, r16
    1cce:	e2 0f       	add	r30, r18
    1cd0:	f3 1f       	adc	r31, r19
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	ee 56       	subi	r30, 0x6E	; 110
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	03 84       	ldd	r0, Z+11	; 0x0b
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <Motor_Run+0x9a>
    1ce2:	44 0f       	add	r20, r20
    1ce4:	55 1f       	adc	r21, r21
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <Motor_Run+0x96>
    1cea:	49 2b       	or	r20, r25
    1cec:	4c 93       	st	X, r20
	
	if(speed > 0)
	{
		SetMotorDirection(id, MOTOR_DIR_FORWARD);
		
		if(id == MOTOR_ID_LEFT)
    1cee:	81 11       	cpse	r24, r1
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <Motor_Run+0xaa>
		{
			OCR0 = (uint8_t)speed;
    1cf2:	6c bf       	out	0x3c, r22	; 60
    1cf4:	56 c0       	rjmp	.+172    	; 0x1da2 <Motor_Run+0x156>
		}
		else
		{
			OCR2 = (uint8_t)speed;	
    1cf6:	63 bd       	out	0x23, r22	; 35
    1cf8:	54 c0       	rjmp	.+168    	; 0x1da2 <Motor_Run+0x156>
		}
	}
	else if(speed < 0)
    1cfa:	77 23       	and	r23, r23
    1cfc:	0c f0       	brlt	.+2      	; 0x1d00 <Motor_Run+0xb4>
    1cfe:	4c c0       	rjmp	.+152    	; 0x1d98 <Motor_Run+0x14c>
		*sMotor[id][PIN_DIR_A].portReg &= ~(1 << sMotor[id][PIN_DIR_A].pin);
		*sMotor[id][PIN_DIR_B].portReg |= (1 << sMotor[id][PIN_DIR_B].pin);
	}
	else
	{
		*sMotor[id][PIN_DIR_A].portReg |= (1 << sMotor[id][PIN_DIR_A].pin);
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	f9 01       	movw	r30, r18
    1d06:	ee 0f       	add	r30, r30
    1d08:	ff 1f       	adc	r31, r31
    1d0a:	df 01       	movw	r26, r30
    1d0c:	a2 0f       	add	r26, r18
    1d0e:	b3 1f       	adc	r27, r19
    1d10:	aa 0f       	add	r26, r26
    1d12:	bb 1f       	adc	r27, r27
    1d14:	aa 0f       	add	r26, r26
    1d16:	bb 1f       	adc	r27, r27
    1d18:	ae 56       	subi	r26, 0x6E	; 110
    1d1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d1c:	14 96       	adiw	r26, 0x04	; 4
    1d1e:	0d 91       	ld	r16, X+
    1d20:	1c 91       	ld	r17, X
    1d22:	15 97       	sbiw	r26, 0x05	; 5
    1d24:	e8 01       	movw	r28, r16
    1d26:	98 81       	ld	r25, Y
    1d28:	41 e0       	ldi	r20, 0x01	; 1
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	ea 01       	movw	r28, r20
    1d2e:	17 96       	adiw	r26, 0x07	; 7
    1d30:	0c 90       	ld	r0, X
    1d32:	17 97       	sbiw	r26, 0x07	; 7
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <Motor_Run+0xee>
    1d36:	cc 0f       	add	r28, r28
    1d38:	dd 1f       	adc	r29, r29
    1d3a:	0a 94       	dec	r0
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <Motor_Run+0xea>
    1d3e:	9c 2b       	or	r25, r28
    1d40:	e8 01       	movw	r28, r16
    1d42:	98 83       	st	Y, r25
		*sMotor[id][PIN_DIR_B].portReg &= ~(1 << sMotor[id][PIN_DIR_B].pin);	
    1d44:	18 96       	adiw	r26, 0x08	; 8
    1d46:	0d 90       	ld	r0, X+
    1d48:	bc 91       	ld	r27, X
    1d4a:	a0 2d       	mov	r26, r0
    1d4c:	9c 91       	ld	r25, X
    1d4e:	e2 0f       	add	r30, r18
    1d50:	f3 1f       	adc	r31, r19
    1d52:	ee 0f       	add	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	ee 0f       	add	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	ee 56       	subi	r30, 0x6E	; 110
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	03 84       	ldd	r0, Z+11	; 0x0b
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <Motor_Run+0x11a>
    1d62:	44 0f       	add	r20, r20
    1d64:	55 1f       	adc	r21, r21
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <Motor_Run+0x116>
    1d6a:	40 95       	com	r20
    1d6c:	49 23       	and	r20, r25
    1d6e:	4c 93       	st	X, r20
	}
	else if(speed < 0)
	{
		SetMotorDirection(id, MOTOR_DIR_BACKWARD);
		
		if(id == MOTOR_ID_LEFT)
    1d70:	81 11       	cpse	r24, r1
    1d72:	09 c0       	rjmp	.+18     	; 0x1d86 <Motor_Run+0x13a>
		{
			OCR0 = (uint8_t)abs(speed);
    1d74:	cb 01       	movw	r24, r22
    1d76:	99 23       	and	r25, r25
    1d78:	24 f4       	brge	.+8      	; 0x1d82 <Motor_Run+0x136>
    1d7a:	88 27       	eor	r24, r24
    1d7c:	99 27       	eor	r25, r25
    1d7e:	86 1b       	sub	r24, r22
    1d80:	97 0b       	sbc	r25, r23
    1d82:	8c bf       	out	0x3c, r24	; 60
    1d84:	0e c0       	rjmp	.+28     	; 0x1da2 <Motor_Run+0x156>
		}
		else
		{
			OCR2 = (uint8_t)abs(speed);
    1d86:	cb 01       	movw	r24, r22
    1d88:	99 23       	and	r25, r25
    1d8a:	24 f4       	brge	.+8      	; 0x1d94 <Motor_Run+0x148>
    1d8c:	88 27       	eor	r24, r24
    1d8e:	99 27       	eor	r25, r25
    1d90:	86 1b       	sub	r24, r22
    1d92:	97 0b       	sbc	r25, r23
    1d94:	83 bd       	out	0x23, r24	; 35
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <Motor_Run+0x156>
		}
	}
	else
	{
		if(id == MOTOR_ID_LEFT)
    1d98:	81 11       	cpse	r24, r1
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <Motor_Run+0x154>
		{
			OCR0 = 0U;
    1d9c:	1c be       	out	0x3c, r1	; 60
    1d9e:	01 c0       	rjmp	.+2      	; 0x1da2 <Motor_Run+0x156>
		}
		else
		{
			OCR2 = 0U;
    1da0:	13 bc       	out	0x23, r1	; 35
		}
	}
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	ff 90       	pop	r15
    1dac:	ef 90       	pop	r14
    1dae:	08 95       	ret

00001db0 <ComputePidOutput>:
    1db0:	4f 92       	push	r4
    1db2:	5f 92       	push	r5
    1db4:	6f 92       	push	r6
    1db6:	7f 92       	push	r7
    1db8:	8f 92       	push	r8
    1dba:	9f 92       	push	r9
    1dbc:	af 92       	push	r10
    1dbe:	bf 92       	push	r11
    1dc0:	cf 92       	push	r12
    1dc2:	df 92       	push	r13
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <ComputePidOutput+0x22>
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <ComputePidOutput+0x24>
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <ComputePidOutput+0x26>
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	9e 83       	std	Y+6, r25	; 0x06
    1ddc:	8d 83       	std	Y+5, r24	; 0x05
    1dde:	fc 01       	movw	r30, r24
    1de0:	c4 84       	ldd	r12, Z+12	; 0x0c
    1de2:	d5 84       	ldd	r13, Z+13	; 0x0d
    1de4:	e6 84       	ldd	r14, Z+14	; 0x0e
    1de6:	f7 84       	ldd	r15, Z+15	; 0x0f
    1de8:	c4 1a       	sub	r12, r20
    1dea:	d5 0a       	sbc	r13, r21
    1dec:	e6 0a       	sbc	r14, r22
    1dee:	f7 0a       	sbc	r15, r23
    1df0:	c0 8a       	std	Z+16, r12	; 0x10
    1df2:	d1 8a       	std	Z+17, r13	; 0x11
    1df4:	e2 8a       	std	Z+18, r14	; 0x12
    1df6:	f3 8a       	std	Z+19, r15	; 0x13
    1df8:	c0 8e       	std	Z+24, r12	; 0x18
    1dfa:	d1 8e       	std	Z+25, r13	; 0x19
    1dfc:	e2 8e       	std	Z+26, r14	; 0x1a
    1dfe:	f3 8e       	std	Z+27, r15	; 0x1b
    1e00:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e02:	95 8d       	ldd	r25, Z+29	; 0x1d
    1e04:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1e06:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1e08:	8c 0d       	add	r24, r12
    1e0a:	9d 1d       	adc	r25, r13
    1e0c:	ae 1d       	adc	r26, r14
    1e0e:	bf 1d       	adc	r27, r15
    1e10:	84 8f       	std	Z+28, r24	; 0x1c
    1e12:	95 8f       	std	Z+29, r25	; 0x1d
    1e14:	a6 8f       	std	Z+30, r26	; 0x1e
    1e16:	b7 8f       	std	Z+31, r27	; 0x1f
    1e18:	44 89       	ldd	r20, Z+20	; 0x14
    1e1a:	55 89       	ldd	r21, Z+21	; 0x15
    1e1c:	66 89       	ldd	r22, Z+22	; 0x16
    1e1e:	77 89       	ldd	r23, Z+23	; 0x17
    1e20:	97 01       	movw	r18, r14
    1e22:	86 01       	movw	r16, r12
    1e24:	04 1b       	sub	r16, r20
    1e26:	15 0b       	sbc	r17, r21
    1e28:	26 0b       	sbc	r18, r22
    1e2a:	37 0b       	sbc	r19, r23
    1e2c:	09 83       	std	Y+1, r16	; 0x01
    1e2e:	1a 83       	std	Y+2, r17	; 0x02
    1e30:	2b 83       	std	Y+3, r18	; 0x03
    1e32:	3c 83       	std	Y+4, r19	; 0x04
    1e34:	00 a3       	std	Z+32, r16	; 0x20
    1e36:	11 a3       	std	Z+33, r17	; 0x21
    1e38:	22 a3       	std	Z+34, r18	; 0x22
    1e3a:	33 a3       	std	Z+35, r19	; 0x23
    1e3c:	40 a9       	ldd	r20, Z+48	; 0x30
    1e3e:	51 a9       	ldd	r21, Z+49	; 0x31
    1e40:	62 a9       	ldd	r22, Z+50	; 0x32
    1e42:	73 a9       	ldd	r23, Z+51	; 0x33
    1e44:	84 17       	cp	r24, r20
    1e46:	95 07       	cpc	r25, r21
    1e48:	a6 07       	cpc	r26, r22
    1e4a:	b7 07       	cpc	r27, r23
    1e4c:	2c f0       	brlt	.+10     	; 0x1e58 <ComputePidOutput+0xa8>
    1e4e:	44 8f       	std	Z+28, r20	; 0x1c
    1e50:	55 8f       	std	Z+29, r21	; 0x1d
    1e52:	66 8f       	std	Z+30, r22	; 0x1e
    1e54:	77 8f       	std	Z+31, r23	; 0x1f
    1e56:	12 c0       	rjmp	.+36     	; 0x1e7c <ComputePidOutput+0xcc>
    1e58:	70 95       	com	r23
    1e5a:	60 95       	com	r22
    1e5c:	50 95       	com	r21
    1e5e:	41 95       	neg	r20
    1e60:	5f 4f       	sbci	r21, 0xFF	; 255
    1e62:	6f 4f       	sbci	r22, 0xFF	; 255
    1e64:	7f 4f       	sbci	r23, 0xFF	; 255
    1e66:	48 17       	cp	r20, r24
    1e68:	59 07       	cpc	r21, r25
    1e6a:	6a 07       	cpc	r22, r26
    1e6c:	7b 07       	cpc	r23, r27
    1e6e:	34 f0       	brlt	.+12     	; 0x1e7c <ComputePidOutput+0xcc>
    1e70:	ed 81       	ldd	r30, Y+5	; 0x05
    1e72:	fe 81       	ldd	r31, Y+6	; 0x06
    1e74:	44 8f       	std	Z+28, r20	; 0x1c
    1e76:	55 8f       	std	Z+29, r21	; 0x1d
    1e78:	66 8f       	std	Z+30, r22	; 0x1e
    1e7a:	77 8f       	std	Z+31, r23	; 0x1f
    1e7c:	ed 81       	ldd	r30, Y+5	; 0x05
    1e7e:	fe 81       	ldd	r31, Y+6	; 0x06
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	a7 01       	movw	r20, r14
    1e8a:	96 01       	movw	r18, r12
    1e8c:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__mulsi3>
    1e90:	2b 01       	movw	r4, r22
    1e92:	3c 01       	movw	r6, r24
    1e94:	64 a3       	std	Z+36, r22	; 0x24
    1e96:	75 a3       	std	Z+37, r23	; 0x25
    1e98:	86 a3       	std	Z+38, r24	; 0x26
    1e9a:	97 a3       	std	Z+39, r25	; 0x27
    1e9c:	24 81       	ldd	r18, Z+4	; 0x04
    1e9e:	35 81       	ldd	r19, Z+5	; 0x05
    1ea0:	46 81       	ldd	r20, Z+6	; 0x06
    1ea2:	57 81       	ldd	r21, Z+7	; 0x07
    1ea4:	64 8d       	ldd	r22, Z+28	; 0x1c
    1ea6:	75 8d       	ldd	r23, Z+29	; 0x1d
    1ea8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1eaa:	97 8d       	ldd	r25, Z+31	; 0x1f
    1eac:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__mulsi3>
    1eb0:	4b 01       	movw	r8, r22
    1eb2:	5c 01       	movw	r10, r24
    1eb4:	60 a7       	std	Z+40, r22	; 0x28
    1eb6:	71 a7       	std	Z+41, r23	; 0x29
    1eb8:	82 a7       	std	Z+42, r24	; 0x2a
    1eba:	93 a7       	std	Z+43, r25	; 0x2b
    1ebc:	60 85       	ldd	r22, Z+8	; 0x08
    1ebe:	71 85       	ldd	r23, Z+9	; 0x09
    1ec0:	82 85       	ldd	r24, Z+10	; 0x0a
    1ec2:	93 85       	ldd	r25, Z+11	; 0x0b
    1ec4:	29 81       	ldd	r18, Y+1	; 0x01
    1ec6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ec8:	4b 81       	ldd	r20, Y+3	; 0x03
    1eca:	5c 81       	ldd	r21, Y+4	; 0x04
    1ecc:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__mulsi3>
    1ed0:	64 a7       	std	Z+44, r22	; 0x2c
    1ed2:	75 a7       	std	Z+45, r23	; 0x2d
    1ed4:	86 a7       	std	Z+46, r24	; 0x2e
    1ed6:	97 a7       	std	Z+47, r25	; 0x2f
    1ed8:	84 0c       	add	r8, r4
    1eda:	95 1c       	adc	r9, r5
    1edc:	a6 1c       	adc	r10, r6
    1ede:	b7 1c       	adc	r11, r7
    1ee0:	68 0d       	add	r22, r8
    1ee2:	79 1d       	adc	r23, r9
    1ee4:	8a 1d       	adc	r24, r10
    1ee6:	9b 1d       	adc	r25, r11
    1ee8:	24 ad       	ldd	r18, Z+60	; 0x3c
    1eea:	35 ad       	ldd	r19, Z+61	; 0x3d
    1eec:	46 ad       	ldd	r20, Z+62	; 0x3e
    1eee:	57 ad       	ldd	r21, Z+63	; 0x3f
    1ef0:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__divmodsi4>
    1ef4:	82 2e       	mov	r8, r18
    1ef6:	93 2e       	mov	r9, r19
    1ef8:	a4 2e       	mov	r10, r20
    1efa:	b5 2e       	mov	r11, r21
    1efc:	ed 81       	ldd	r30, Y+5	; 0x05
    1efe:	fe 81       	ldd	r31, Y+6	; 0x06
    1f00:	c4 8a       	std	Z+20, r12	; 0x14
    1f02:	d5 8a       	std	Z+21, r13	; 0x15
    1f04:	e6 8a       	std	Z+22, r14	; 0x16
    1f06:	f7 8a       	std	Z+23, r15	; 0x17
    1f08:	60 ad       	ldd	r22, Z+56	; 0x38
    1f0a:	71 ad       	ldd	r23, Z+57	; 0x39
    1f0c:	82 ad       	ldd	r24, Z+58	; 0x3a
    1f0e:	93 ad       	ldd	r25, Z+59	; 0x3b
    1f10:	86 16       	cp	r8, r22
    1f12:	97 06       	cpc	r9, r23
    1f14:	a8 06       	cpc	r10, r24
    1f16:	b9 06       	cpc	r11, r25
    1f18:	6c f4       	brge	.+26     	; 0x1f34 <ComputePidOutput+0x184>
    1f1a:	64 a9       	ldd	r22, Z+52	; 0x34
    1f1c:	75 a9       	ldd	r23, Z+53	; 0x35
    1f1e:	86 a9       	ldd	r24, Z+54	; 0x36
    1f20:	97 a9       	ldd	r25, Z+55	; 0x37
    1f22:	68 15       	cp	r22, r8
    1f24:	79 05       	cpc	r23, r9
    1f26:	8a 05       	cpc	r24, r10
    1f28:	9b 05       	cpc	r25, r11
    1f2a:	24 f4       	brge	.+8      	; 0x1f34 <ComputePidOutput+0x184>
    1f2c:	62 2f       	mov	r22, r18
    1f2e:	73 2f       	mov	r23, r19
    1f30:	84 2f       	mov	r24, r20
    1f32:	95 2f       	mov	r25, r21
    1f34:	26 96       	adiw	r28, 0x06	; 6
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	de bf       	out	0x3e, r29	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	df 90       	pop	r13
    1f4e:	cf 90       	pop	r12
    1f50:	bf 90       	pop	r11
    1f52:	af 90       	pop	r10
    1f54:	9f 90       	pop	r9
    1f56:	8f 90       	pop	r8
    1f58:	7f 90       	pop	r7
    1f5a:	6f 90       	pop	r6
    1f5c:	5f 90       	pop	r5
    1f5e:	4f 90       	pop	r4
    1f60:	08 95       	ret

00001f62 <Scheduler_AddTask>:
	return SCHEDULER_E_UNRECOGNIZED_NAME;
}

void Scheduler_SetOperatingLevel(Scheduler_OperatingLevel_t opLvl)
{
  sSystemScheduler.OperatingLevel = opLvl;
    1f62:	6f 92       	push	r6
    1f64:	7f 92       	push	r7
    1f66:	8f 92       	push	r8
    1f68:	9f 92       	push	r9
    1f6a:	af 92       	push	r10
    1f6c:	bf 92       	push	r11
    1f6e:	cf 92       	push	r12
    1f70:	df 92       	push	r13
    1f72:	ef 92       	push	r14
    1f74:	ff 92       	push	r15
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	18 2f       	mov	r17, r24
    1f80:	79 2e       	mov	r7, r25
    1f82:	4a 01       	movw	r8, r20
    1f84:	5b 01       	movw	r10, r22
    1f86:	79 01       	movw	r14, r18
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	1b c0       	rjmp	.+54     	; 0x1fc6 <Scheduler_AddTask+0x64>
    1f90:	8a 30       	cpi	r24, 0x0A	; 10
    1f92:	91 05       	cpc	r25, r1
    1f94:	a1 05       	cpc	r26, r1
    1f96:	b1 05       	cpc	r27, r1
    1f98:	98 f0       	brcs	.+38     	; 0x1fc0 <Scheduler_AddTask+0x5e>
    1f9a:	87 ed       	ldi	r24, 0xD7	; 215
    1f9c:	92 e0       	ldi	r25, 0x02	; 2
    1f9e:	9f 93       	push	r25
    1fa0:	8f 93       	push	r24
    1fa2:	85 e0       	ldi	r24, 0x05	; 5
    1fa4:	8f 93       	push	r24
    1fa6:	8a ef       	ldi	r24, 0xFA	; 250
    1fa8:	92 e0       	ldi	r25, 0x02	; 2
    1faa:	9f 93       	push	r25
    1fac:	8f 93       	push	r24
    1fae:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	50 c0       	rjmp	.+160    	; 0x2060 <Scheduler_AddTask+0xfe>
    1fc0:	01 96       	adiw	r24, 0x01	; 1
    1fc2:	a1 1d       	adc	r26, r1
    1fc4:	b1 1d       	adc	r27, r1
    1fc6:	23 e1       	ldi	r18, 0x13	; 19
    1fc8:	28 9f       	mul	r18, r24
    1fca:	f0 01       	movw	r30, r0
    1fcc:	29 9f       	mul	r18, r25
    1fce:	f0 0d       	add	r31, r0
    1fd0:	11 24       	eor	r1, r1
    1fd2:	e1 54       	subi	r30, 0x41	; 65
    1fd4:	fb 4f       	sbci	r31, 0xFB	; 251
    1fd6:	25 81       	ldd	r18, Z+5	; 0x05
    1fd8:	36 81       	ldd	r19, Z+6	; 0x06
    1fda:	23 2b       	or	r18, r19
    1fdc:	c9 f6       	brne	.-78     	; 0x1f90 <Scheduler_AddTask+0x2e>
    1fde:	0f 2e       	mov	r0, r31
    1fe0:	ff eb       	ldi	r31, 0xBF	; 191
    1fe2:	cf 2e       	mov	r12, r31
    1fe4:	f4 e0       	ldi	r31, 0x04	; 4
    1fe6:	df 2e       	mov	r13, r31
    1fe8:	f0 2d       	mov	r31, r0
    1fea:	ef 01       	movw	r28, r30
    1fec:	66 24       	eor	r6, r6
    1fee:	63 94       	inc	r6
    1ff0:	67 8a       	std	Z+23, r6	; 0x17
    1ff2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	88 0d       	add	r24, r8
    1ffc:	99 1d       	adc	r25, r9
    1ffe:	aa 1d       	adc	r26, r10
    2000:	bb 1d       	adc	r27, r11
    2002:	8f 87       	std	Y+15, r24	; 0x0f
    2004:	98 8b       	std	Y+16, r25	; 0x10
    2006:	a9 8b       	std	Y+17, r26	; 0x11
    2008:	ba 8b       	std	Y+18, r27	; 0x12
    200a:	1c 87       	std	Y+12, r17	; 0x0c
    200c:	7d 86       	std	Y+13, r7	; 0x0d
    200e:	8f 82       	std	Y+7, r8	; 0x07
    2010:	98 86       	std	Y+8, r9	; 0x08
    2012:	a9 86       	std	Y+9, r10	; 0x09
    2014:	ba 86       	std	Y+10, r11	; 0x0a
    2016:	fe 82       	std	Y+6, r15	; 0x06
    2018:	ed 82       	std	Y+5, r14	; 0x05
    201a:	0e 87       	std	Y+14, r16	; 0x0e
    201c:	f6 01       	movw	r30, r12
    201e:	80 81       	ld	r24, Z
    2020:	91 81       	ldd	r25, Z+1	; 0x01
    2022:	a2 81       	ldd	r26, Z+2	; 0x02
    2024:	b3 81       	ldd	r27, Z+3	; 0x03
    2026:	01 96       	adiw	r24, 0x01	; 1
    2028:	a1 1d       	adc	r26, r1
    202a:	b1 1d       	adc	r27, r1
    202c:	80 83       	st	Z, r24
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	a2 83       	std	Z+2, r26	; 0x02
    2032:	b3 83       	std	Z+3, r27	; 0x03
    2034:	7f 92       	push	r7
    2036:	1f 93       	push	r17
    2038:	84 e0       	ldi	r24, 0x04	; 4
    203a:	93 e0       	ldi	r25, 0x03	; 3
    203c:	9f 93       	push	r25
    203e:	8f 93       	push	r24
    2040:	6f 92       	push	r6
    2042:	8a ef       	ldi	r24, 0xFA	; 250
    2044:	92 e0       	ldi	r25, 0x02	; 2
    2046:	9f 93       	push	r25
    2048:	8f 93       	push	r24
    204a:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
    204e:	8d b7       	in	r24, 0x3d	; 61
    2050:	9e b7       	in	r25, 0x3e	; 62
    2052:	07 96       	adiw	r24, 0x07	; 7
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	9e bf       	out	0x3e, r25	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	8d bf       	out	0x3d, r24	; 61
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	bf 90       	pop	r11
    2072:	af 90       	pop	r10
    2074:	9f 90       	pop	r9
    2076:	8f 90       	pop	r8
    2078:	7f 90       	pop	r7
    207a:	6f 90       	pop	r6
    207c:	08 95       	ret

0000207e <Scheduler_TaskEnable>:
    207e:	cf 92       	push	r12
    2080:	df 92       	push	r13
    2082:	ef 92       	push	r14
    2084:	ff 92       	push	r15
    2086:	1f 93       	push	r17
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
    208c:	c8 2f       	mov	r28, r24
    208e:	d9 2f       	mov	r29, r25
    2090:	16 2f       	mov	r17, r22
    2092:	c1 2c       	mov	r12, r1
    2094:	d1 2c       	mov	r13, r1
    2096:	76 01       	movw	r14, r12
    2098:	3f c0       	rjmp	.+126    	; 0x2118 <Scheduler_TaskEnable+0x9a>
    209a:	83 e1       	ldi	r24, 0x13	; 19
    209c:	8c 9d       	mul	r24, r12
    209e:	f0 01       	movw	r30, r0
    20a0:	8d 9d       	mul	r24, r13
    20a2:	f0 0d       	add	r31, r0
    20a4:	11 24       	eor	r1, r1
    20a6:	e1 54       	subi	r30, 0x41	; 65
    20a8:	fb 4f       	sbci	r31, 0xFB	; 251
    20aa:	6c 2f       	mov	r22, r28
    20ac:	7d 2f       	mov	r23, r29
    20ae:	84 85       	ldd	r24, Z+12	; 0x0c
    20b0:	95 85       	ldd	r25, Z+13	; 0x0d
    20b2:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <strcmp>
    20b6:	89 2b       	or	r24, r25
    20b8:	51 f5       	brne	.+84     	; 0x210e <Scheduler_TaskEnable+0x90>
    20ba:	83 e1       	ldi	r24, 0x13	; 19
    20bc:	8c 9d       	mul	r24, r12
    20be:	f0 01       	movw	r30, r0
    20c0:	8d 9d       	mul	r24, r13
    20c2:	f0 0d       	add	r31, r0
    20c4:	11 24       	eor	r1, r1
    20c6:	e1 54       	subi	r30, 0x41	; 65
    20c8:	fb 4f       	sbci	r31, 0xFB	; 251
    20ca:	17 8b       	std	Z+23, r17	; 0x17
    20cc:	11 23       	and	r17, r17
    20ce:	19 f0       	breq	.+6      	; 0x20d6 <Scheduler_TaskEnable+0x58>
    20d0:	84 e1       	ldi	r24, 0x14	; 20
    20d2:	93 e0       	ldi	r25, 0x03	; 3
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <Scheduler_TaskEnable+0x5c>
    20d6:	8c e1       	ldi	r24, 0x1C	; 28
    20d8:	93 e0       	ldi	r25, 0x03	; 3
    20da:	9f 93       	push	r25
    20dc:	8f 93       	push	r24
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	85 e2       	ldi	r24, 0x25	; 37
    20e4:	93 e0       	ldi	r25, 0x03	; 3
    20e6:	9f 93       	push	r25
    20e8:	8f 93       	push	r24
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	8f 93       	push	r24
    20ee:	8a ef       	ldi	r24, 0xFA	; 250
    20f0:	92 e0       	ldi	r25, 0x02	; 2
    20f2:	9f 93       	push	r25
    20f4:	8f 93       	push	r24
    20f6:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
    20fa:	8d b7       	in	r24, 0x3d	; 61
    20fc:	9e b7       	in	r25, 0x3e	; 62
    20fe:	09 96       	adiw	r24, 0x09	; 9
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	9e bf       	out	0x3e, r25	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	8d bf       	out	0x3d, r24	; 61
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	14 c0       	rjmp	.+40     	; 0x2136 <Scheduler_TaskEnable+0xb8>
    210e:	9f ef       	ldi	r25, 0xFF	; 255
    2110:	c9 1a       	sub	r12, r25
    2112:	d9 0a       	sbc	r13, r25
    2114:	e9 0a       	sbc	r14, r25
    2116:	f9 0a       	sbc	r15, r25
    2118:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <sSystemScheduler>
    211c:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <sSystemScheduler+0x1>
    2120:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <sSystemScheduler+0x2>
    2124:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <sSystemScheduler+0x3>
    2128:	c8 16       	cp	r12, r24
    212a:	d9 06       	cpc	r13, r25
    212c:	ea 06       	cpc	r14, r26
    212e:	fb 06       	cpc	r15, r27
    2130:	08 f4       	brcc	.+2      	; 0x2134 <Scheduler_TaskEnable+0xb6>
    2132:	b3 cf       	rjmp	.-154    	; 0x209a <Scheduler_TaskEnable+0x1c>
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	1f 91       	pop	r17
    213c:	ff 90       	pop	r15
    213e:	ef 90       	pop	r14
    2140:	df 90       	pop	r13
    2142:	cf 90       	pop	r12
    2144:	08 95       	ret

00002146 <Scheduler_Init>:
}

void Scheduler_Init(void)
{
	for(uint32_t taskIdx = 0; taskIdx < SCHEDULER_TASK_MAX_NBR; taskIdx++)
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	dc 01       	movw	r26, r24
    214c:	18 c0       	rjmp	.+48     	; 0x217e <Scheduler_Init+0x38>
	{
		sSystemScheduler.taskParamTable[taskIdx].nextExecTime = 0;
    214e:	23 e1       	ldi	r18, 0x13	; 19
    2150:	28 9f       	mul	r18, r24
    2152:	f0 01       	movw	r30, r0
    2154:	29 9f       	mul	r18, r25
    2156:	f0 0d       	add	r31, r0
    2158:	11 24       	eor	r1, r1
    215a:	e1 54       	subi	r30, 0x41	; 65
    215c:	fb 4f       	sbci	r31, 0xFB	; 251
    215e:	17 86       	std	Z+15, r1	; 0x0f
    2160:	10 8a       	std	Z+16, r1	; 0x10
    2162:	11 8a       	std	Z+17, r1	; 0x11
    2164:	12 8a       	std	Z+18, r1	; 0x12
		sSystemScheduler.taskParamTable[taskIdx].taskParam.name = NULL;
    2166:	15 86       	std	Z+13, r1	; 0x0d
    2168:	14 86       	std	Z+12, r1	; 0x0c
		sSystemScheduler.taskParamTable[taskIdx].taskParam.periodms = 0;
    216a:	17 82       	std	Z+7, r1	; 0x07
    216c:	10 86       	std	Z+8, r1	; 0x08
    216e:	11 86       	std	Z+9, r1	; 0x09
    2170:	12 86       	std	Z+10, r1	; 0x0a
		sSystemScheduler.taskParamTable[taskIdx].taskParam.priority = 0;
    2172:	13 86       	std	Z+11, r1	; 0x0b
		sSystemScheduler.taskParamTable[taskIdx].taskParam.functionHandler = NULL;
    2174:	16 82       	std	Z+6, r1	; 0x06
    2176:	15 82       	std	Z+5, r1	; 0x05
  sSystemScheduler.OperatingLevel = opLvl;
}

void Scheduler_Init(void)
{
	for(uint32_t taskIdx = 0; taskIdx < SCHEDULER_TASK_MAX_NBR; taskIdx++)
    2178:	01 96       	adiw	r24, 0x01	; 1
    217a:	a1 1d       	adc	r26, r1
    217c:	b1 1d       	adc	r27, r1
    217e:	8a 30       	cpi	r24, 0x0A	; 10
    2180:	91 05       	cpc	r25, r1
    2182:	a1 05       	cpc	r26, r1
    2184:	b1 05       	cpc	r27, r1
    2186:	18 f3       	brcs	.-58     	; 0x214e <Scheduler_Init+0x8>
		sSystemScheduler.taskParamTable[taskIdx].taskParam.periodms = 0;
		sSystemScheduler.taskParamTable[taskIdx].taskParam.priority = 0;
		sSystemScheduler.taskParamTable[taskIdx].taskParam.functionHandler = NULL;
	}

	sSystemScheduler.activeTaskNbr = 0U;
    2188:	ef eb       	ldi	r30, 0xBF	; 191
    218a:	f4 e0       	ldi	r31, 0x04	; 4
    218c:	10 82       	st	Z, r1
    218e:	11 82       	std	Z+1, r1	; 0x01
    2190:	12 82       	std	Z+2, r1	; 0x02
    2192:	13 82       	std	Z+3, r1	; 0x03
	sSystemScheduler.OperatingLevel = SCHEDULER_OPLVL_NORMAL;
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	84 83       	std	Z+4, r24	; 0x04
	
	Terminal_Log("Scheduler", LOG_OK, "Configured.");
    2198:	22 e6       	ldi	r18, 0x62	; 98
    219a:	31 e0       	ldi	r19, 0x01	; 1
    219c:	3f 93       	push	r19
    219e:	2f 93       	push	r18
    21a0:	8f 93       	push	r24
    21a2:	8a ef       	ldi	r24, 0xFA	; 250
    21a4:	92 e0       	ldi	r25, 0x02	; 2
    21a6:	9f 93       	push	r25
    21a8:	8f 93       	push	r24
    21aa:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
}
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	08 95       	ret

000021ba <Scheduler_Loop>:

void Scheduler_Loop(void)
{
    21ba:	4f 92       	push	r4
    21bc:	5f 92       	push	r5
    21be:	6f 92       	push	r6
    21c0:	7f 92       	push	r7
    21c2:	8f 92       	push	r8
    21c4:	9f 92       	push	r9
    21c6:	af 92       	push	r10
    21c8:	bf 92       	push	r11
    21ca:	cf 92       	push	r12
    21cc:	df 92       	push	r13
    21ce:	ef 92       	push	r14
    21d0:	ff 92       	push	r15
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
	uint32_t timestamp = Time_GetMillis();
    21d8:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    21dc:	4b 01       	movw	r8, r22
    21de:	5c 01       	movw	r10, r24
	
	for(uint32_t taskIdx = 0U; taskIdx < sSystemScheduler.activeTaskNbr; taskIdx++)
    21e0:	c1 2c       	mov	r12, r1
    21e2:	d1 2c       	mov	r13, r1
    21e4:	76 01       	movw	r14, r12
    21e6:	74 c0       	rjmp	.+232    	; 0x22d0 <Scheduler_Loop+0x116>
	{
		if(sSystemScheduler.taskParamTable[taskIdx].taskParam.operatingLevel <= sSystemScheduler.OperatingLevel
    21e8:	83 e1       	ldi	r24, 0x13	; 19
    21ea:	8c 9d       	mul	r24, r12
    21ec:	f0 01       	movw	r30, r0
    21ee:	8d 9d       	mul	r24, r13
    21f0:	f0 0d       	add	r31, r0
    21f2:	11 24       	eor	r1, r1
    21f4:	e1 54       	subi	r30, 0x41	; 65
    21f6:	fb 4f       	sbci	r31, 0xFB	; 251
    21f8:	96 85       	ldd	r25, Z+14	; 0x0e
    21fa:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <sSystemScheduler+0x4>
    21fe:	89 17       	cp	r24, r25
    2200:	08 f4       	brcc	.+2      	; 0x2204 <Scheduler_Loop+0x4a>
    2202:	61 c0       	rjmp	.+194    	; 0x22c6 <Scheduler_Loop+0x10c>
			&& sSystemScheduler.taskParamTable[taskIdx].taskEnable == true
    2204:	83 e1       	ldi	r24, 0x13	; 19
    2206:	8c 9d       	mul	r24, r12
    2208:	f0 01       	movw	r30, r0
    220a:	8d 9d       	mul	r24, r13
    220c:	f0 0d       	add	r31, r0
    220e:	11 24       	eor	r1, r1
    2210:	e1 54       	subi	r30, 0x41	; 65
    2212:	fb 4f       	sbci	r31, 0xFB	; 251
    2214:	87 89       	ldd	r24, Z+23	; 0x17
    2216:	88 23       	and	r24, r24
    2218:	09 f4       	brne	.+2      	; 0x221c <Scheduler_Loop+0x62>
    221a:	55 c0       	rjmp	.+170    	; 0x22c6 <Scheduler_Loop+0x10c>
			&& sSystemScheduler.taskParamTable[taskIdx].taskParam.functionHandler != NULL)
    221c:	83 e1       	ldi	r24, 0x13	; 19
    221e:	8c 9d       	mul	r24, r12
    2220:	f0 01       	movw	r30, r0
    2222:	8d 9d       	mul	r24, r13
    2224:	f0 0d       	add	r31, r0
    2226:	11 24       	eor	r1, r1
    2228:	e1 54       	subi	r30, 0x41	; 65
    222a:	fb 4f       	sbci	r31, 0xFB	; 251
    222c:	85 81       	ldd	r24, Z+5	; 0x05
    222e:	96 81       	ldd	r25, Z+6	; 0x06
    2230:	89 2b       	or	r24, r25
    2232:	09 f4       	brne	.+2      	; 0x2236 <Scheduler_Loop+0x7c>
    2234:	48 c0       	rjmp	.+144    	; 0x22c6 <Scheduler_Loop+0x10c>
		{
			if(Time_GetMillis() >= sSystemScheduler.taskParamTable[taskIdx].nextExecTime)
    2236:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    223a:	23 e1       	ldi	r18, 0x13	; 19
    223c:	2c 9d       	mul	r18, r12
    223e:	f0 01       	movw	r30, r0
    2240:	2d 9d       	mul	r18, r13
    2242:	f0 0d       	add	r31, r0
    2244:	11 24       	eor	r1, r1
    2246:	e1 54       	subi	r30, 0x41	; 65
    2248:	fb 4f       	sbci	r31, 0xFB	; 251
    224a:	47 84       	ldd	r4, Z+15	; 0x0f
    224c:	50 88       	ldd	r5, Z+16	; 0x10
    224e:	61 88       	ldd	r6, Z+17	; 0x11
    2250:	72 88       	ldd	r7, Z+18	; 0x12
    2252:	64 15       	cp	r22, r4
    2254:	75 05       	cpc	r23, r5
    2256:	86 05       	cpc	r24, r6
    2258:	97 05       	cpc	r25, r7
    225a:	a8 f1       	brcs	.+106    	; 0x22c6 <Scheduler_Loop+0x10c>
			{
				sSystemScheduler.taskParamTable[taskIdx].nextExecTime = Time_GetMillis()
    225c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
					+ sSystemScheduler.taskParamTable[taskIdx].taskParam.periodms;
    2260:	13 e1       	ldi	r17, 0x13	; 19
    2262:	1c 9d       	mul	r17, r12
    2264:	e0 01       	movw	r28, r0
    2266:	1d 9d       	mul	r17, r13
    2268:	d0 0d       	add	r29, r0
    226a:	11 24       	eor	r1, r1
    226c:	c1 54       	subi	r28, 0x41	; 65
    226e:	db 4f       	sbci	r29, 0xFB	; 251
    2270:	4f 80       	ldd	r4, Y+7	; 0x07
    2272:	58 84       	ldd	r5, Y+8	; 0x08
    2274:	69 84       	ldd	r6, Y+9	; 0x09
    2276:	7a 84       	ldd	r7, Y+10	; 0x0a
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	84 0d       	add	r24, r4
    227e:	95 1d       	adc	r25, r5
    2280:	a6 1d       	adc	r26, r6
    2282:	b7 1d       	adc	r27, r7
			&& sSystemScheduler.taskParamTable[taskIdx].taskEnable == true
			&& sSystemScheduler.taskParamTable[taskIdx].taskParam.functionHandler != NULL)
		{
			if(Time_GetMillis() >= sSystemScheduler.taskParamTable[taskIdx].nextExecTime)
			{
				sSystemScheduler.taskParamTable[taskIdx].nextExecTime = Time_GetMillis()
    2284:	8f 87       	std	Y+15, r24	; 0x0f
    2286:	98 8b       	std	Y+16, r25	; 0x10
    2288:	a9 8b       	std	Y+17, r26	; 0x11
    228a:	ba 8b       	std	Y+18, r27	; 0x12
					+ sSystemScheduler.taskParamTable[taskIdx].taskParam.periodms;
				
				uint32_t execTimeMillis = Time_GetMillis();
    228c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    2290:	2b 01       	movw	r4, r22
    2292:	3c 01       	movw	r6, r24
				sSystemScheduler.taskParamTable[taskIdx].taskParam.functionHandler();
    2294:	ed 81       	ldd	r30, Y+5	; 0x05
    2296:	fe 81       	ldd	r31, Y+6	; 0x06
    2298:	09 95       	icall
				sSystemScheduler.taskParamTable[taskIdx].taskExecTime = Time_GetMillis() - execTimeMillis;
    229a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	84 19       	sub	r24, r4
    22a4:	95 09       	sbc	r25, r5
    22a6:	a6 09       	sbc	r26, r6
    22a8:	b7 09       	sbc	r27, r7
    22aa:	96 01       	movw	r18, r12
    22ac:	2f 5f       	subi	r18, 0xFF	; 255
    22ae:	3f 4f       	sbci	r19, 0xFF	; 255
    22b0:	12 9f       	mul	r17, r18
    22b2:	f0 01       	movw	r30, r0
    22b4:	13 9f       	mul	r17, r19
    22b6:	f0 0d       	add	r31, r0
    22b8:	11 24       	eor	r1, r1
    22ba:	e1 54       	subi	r30, 0x41	; 65
    22bc:	fb 4f       	sbci	r31, 0xFB	; 251
    22be:	80 83       	st	Z, r24
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	a2 83       	std	Z+2, r26	; 0x02
    22c4:	b3 83       	std	Z+3, r27	; 0x03

void Scheduler_Loop(void)
{
	uint32_t timestamp = Time_GetMillis();
	
	for(uint32_t taskIdx = 0U; taskIdx < sSystemScheduler.activeTaskNbr; taskIdx++)
    22c6:	8f ef       	ldi	r24, 0xFF	; 255
    22c8:	c8 1a       	sub	r12, r24
    22ca:	d8 0a       	sbc	r13, r24
    22cc:	e8 0a       	sbc	r14, r24
    22ce:	f8 0a       	sbc	r15, r24
    22d0:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <sSystemScheduler>
    22d4:	90 91 c0 04 	lds	r25, 0x04C0	; 0x8004c0 <sSystemScheduler+0x1>
    22d8:	a0 91 c1 04 	lds	r26, 0x04C1	; 0x8004c1 <sSystemScheduler+0x2>
    22dc:	b0 91 c2 04 	lds	r27, 0x04C2	; 0x8004c2 <sSystemScheduler+0x3>
    22e0:	c8 16       	cp	r12, r24
    22e2:	d9 06       	cpc	r13, r25
    22e4:	ea 06       	cpc	r14, r26
    22e6:	fb 06       	cpc	r15, r27
    22e8:	08 f4       	brcc	.+2      	; 0x22ec <Scheduler_Loop+0x132>
    22ea:	7e cf       	rjmp	.-260    	; 0x21e8 <Scheduler_Loop+0x2e>
				sSystemScheduler.taskParamTable[taskIdx].taskExecTime = Time_GetMillis() - execTimeMillis;
			}
		}
	}
	
	sSchedulerExecutionTimeMillis = Time_GetMillis() - timestamp;
    22ec:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	88 19       	sub	r24, r8
    22f6:	99 09       	sbc	r25, r9
    22f8:	aa 09       	sbc	r26, r10
    22fa:	bb 09       	sbc	r27, r11
    22fc:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <sSchedulerExecutionTimeMillis>
    2300:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <sSchedulerExecutionTimeMillis+0x1>
    2304:	a0 93 bd 04 	sts	0x04BD, r26	; 0x8004bd <sSchedulerExecutionTimeMillis+0x2>
    2308:	b0 93 be 04 	sts	0x04BE, r27	; 0x8004be <sSchedulerExecutionTimeMillis+0x3>
}
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	1f 91       	pop	r17
    2312:	ff 90       	pop	r15
    2314:	ef 90       	pop	r14
    2316:	df 90       	pop	r13
    2318:	cf 90       	pop	r12
    231a:	bf 90       	pop	r11
    231c:	af 90       	pop	r10
    231e:	9f 90       	pop	r9
    2320:	8f 90       	pop	r8
    2322:	7f 90       	pop	r7
    2324:	6f 90       	pop	r6
    2326:	5f 90       	pop	r5
    2328:	4f 90       	pop	r4
    232a:	08 95       	ret

0000232c <Scheduler_GetExecutionTimeMillis>:

uint32_t Scheduler_GetExecutionTimeMillis(void)
{
	return sSchedulerExecutionTimeMillis;
    232c:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <sSchedulerExecutionTimeMillis>
    2330:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <sSchedulerExecutionTimeMillis+0x1>
    2334:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <sSchedulerExecutionTimeMillis+0x2>
    2338:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <sSchedulerExecutionTimeMillis+0x3>
    233c:	08 95       	ret

0000233e <EnableInt2>:
	}
}

static void EnableInt2(void)
{
	GICR |= (1 << INT2);
    233e:	8b b7       	in	r24, 0x3b	; 59
    2340:	80 62       	ori	r24, 0x20	; 32
    2342:	8b bf       	out	0x3b, r24	; 59
    2344:	08 95       	ret

00002346 <DisableInt2>:
}

static void DisableInt2(void)
{
	GICR &= ~(1 << INT2);
    2346:	8b b7       	in	r24, 0x3b	; 59
    2348:	8f 7d       	andi	r24, 0xDF	; 223
    234a:	8b bf       	out	0x3b, r24	; 59
    234c:	08 95       	ret

0000234e <ClearInt2Flag>:
}

static void ClearInt2Flag(void)
{
	GIFR |= 1 << INTF2;
    234e:	8a b7       	in	r24, 0x3a	; 58
    2350:	80 62       	ori	r24, 0x20	; 32
    2352:	8a bf       	out	0x3a, r24	; 58
    2354:	08 95       	ret

00002356 <SetInt2AsRisingEdge>:
// 	MCUCSR &= ~(1 << ISC2);
// }

static void SetInt2AsRisingEdge(void)
{	
	MCUCSR |= 1 << ISC2;		
    2356:	84 b7       	in	r24, 0x34	; 52
    2358:	80 64       	ori	r24, 0x40	; 64
    235a:	84 bf       	out	0x34, r24	; 52
    235c:	08 95       	ret

0000235e <EnableGlobalInt>:
}

static void EnableGlobalInt(void)
{
	sei();
    235e:	78 94       	sei
    2360:	08 95       	ret

00002362 <CheckStartModuleState>:
                        PRIVATE FUNCTION IMPLEMENTATION
******************************************************************************/

static void CheckStartModuleState(void)
{
	if(Gpio_ReadPin(STARTMODULE_PORT, STARTMODULE_PIN))
    2362:	62 e0       	ldi	r22, 0x02	; 2
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	0e 94 63 14 	call	0x28c6	; 0x28c6 <Gpio_ReadPin>
    236a:	88 23       	and	r24, r24
    236c:	21 f0       	breq	.+8      	; 0x2376 <CheckStartModuleState+0x14>
	{
		sStartModuleWrongState = true;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <sStartModuleWrongState>
    2374:	08 95       	ret
	}
	else
	{
		sStartModuleWrongState = false;
    2376:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <sStartModuleWrongState>
    237a:	08 95       	ret

0000237c <StartModule_Init>:
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void StartModule_Init(void)
{
	Gpio_Init(STARTMODULE_PORT, STARTMODULE_PIN, GPIO_TYPE_INPUT_PULL_UP);
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	62 e0       	ldi	r22, 0x02	; 2
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <Gpio_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2386:	2f ef       	ldi	r18, 0xFF	; 255
    2388:	81 ee       	ldi	r24, 0xE1	; 225
    238a:	94 e0       	ldi	r25, 0x04	; 4
    238c:	21 50       	subi	r18, 0x01	; 1
    238e:	80 40       	sbci	r24, 0x00	; 0
    2390:	90 40       	sbci	r25, 0x00	; 0
    2392:	e1 f7       	brne	.-8      	; 0x238c <StartModule_Init+0x10>
    2394:	00 c0       	rjmp	.+0      	; 0x2396 <StartModule_Init+0x1a>
    2396:	00 00       	nop
	
	_delay_ms(START_MODULE_TIME_TO_STARTUP_MILLIS);
	
	CheckStartModuleState();
    2398:	0e 94 b1 11 	call	0x2362	; 0x2362 <CheckStartModuleState>
					
	Terminal_Log("StartModule", LOG_OK, "Configured.");
    239c:	82 e6       	ldi	r24, 0x62	; 98
    239e:	91 e0       	ldi	r25, 0x01	; 1
    23a0:	9f 93       	push	r25
    23a2:	8f 93       	push	r24
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	8f 93       	push	r24
    23a8:	81 e3       	ldi	r24, 0x31	; 49
    23aa:	93 e0       	ldi	r25, 0x03	; 3
    23ac:	9f 93       	push	r25
    23ae:	8f 93       	push	r24
    23b0:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
}
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	08 95       	ret

000023c0 <StartModule_InitIrq>:

void StartModule_InitIrq(void)
{
	DisableInt2();
    23c0:	0e 94 a3 11 	call	0x2346	; 0x2346 <DisableInt2>
	SetInt2AsRisingEdge();
    23c4:	0e 94 ab 11 	call	0x2356	; 0x2356 <SetInt2AsRisingEdge>
	ClearInt2Flag();
    23c8:	0e 94 a7 11 	call	0x234e	; 0x234e <ClearInt2Flag>
	EnableInt2();
    23cc:	0e 94 9f 11 	call	0x233e	; 0x233e <EnableInt2>
	EnableGlobalInt();	
    23d0:	0e 94 af 11 	call	0x235e	; 0x235e <EnableGlobalInt>
    23d4:	08 95       	ret

000023d6 <__vector_3>:
}

ISR(INT2_vect)
{
    23d6:	1f 92       	push	r1
    23d8:	0f 92       	push	r0
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	0f 92       	push	r0
    23de:	11 24       	eor	r1, r1
    23e0:	2f 93       	push	r18
    23e2:	3f 93       	push	r19
    23e4:	4f 93       	push	r20
    23e6:	5f 93       	push	r21
    23e8:	6f 93       	push	r22
    23ea:	7f 93       	push	r23
    23ec:	8f 93       	push	r24
    23ee:	9f 93       	push	r25
    23f0:	af 93       	push	r26
    23f2:	bf 93       	push	r27
    23f4:	ef 93       	push	r30
    23f6:	ff 93       	push	r31
	GICR &= ~(1 << INT2);
    23f8:	8b b7       	in	r24, 0x3b	; 59
    23fa:	8f 7d       	andi	r24, 0xDF	; 223
    23fc:	8b bf       	out	0x3b, r24	; 59
	MCUCSR &= ~(1 << ISC2);
    23fe:	84 b7       	in	r24, 0x34	; 52
    2400:	8f 7b       	andi	r24, 0xBF	; 191
    2402:	84 bf       	out	0x34, r24	; 52
	GIFR |= 1 << INTF2;
    2404:	8a b7       	in	r24, 0x3a	; 58
    2406:	80 62       	ori	r24, 0x20	; 32
    2408:	8a bf       	out	0x3a, r24	; 58
	GICR |= (1 << INT2);
    240a:	8b b7       	in	r24, 0x3b	; 59
    240c:	80 62       	ori	r24, 0x20	; 32
    240e:	8b bf       	out	0x3b, r24	; 59
	sei();
    2410:	78 94       	sei
	
	Machine_SetState(sMachineStateFightStop++);
    2412:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <sMachineStateFightStop>
    2416:	91 e0       	ldi	r25, 0x01	; 1
    2418:	98 0f       	add	r25, r24
    241a:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <sMachineStateFightStop>
    241e:	0e 94 18 05 	call	0xa30	; 0xa30 <Machine_SetState>
}
    2422:	ff 91       	pop	r31
    2424:	ef 91       	pop	r30
    2426:	bf 91       	pop	r27
    2428:	af 91       	pop	r26
    242a:	9f 91       	pop	r25
    242c:	8f 91       	pop	r24
    242e:	7f 91       	pop	r23
    2430:	6f 91       	pop	r22
    2432:	5f 91       	pop	r21
    2434:	4f 91       	pop	r20
    2436:	3f 91       	pop	r19
    2438:	2f 91       	pop	r18
    243a:	0f 90       	pop	r0
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	0f 90       	pop	r0
    2440:	1f 90       	pop	r1
    2442:	18 95       	reti

00002444 <StartModule_HasWrongState>:

bool StartModule_HasWrongState(void)
{
	return sStartModuleWrongState;
}
    2444:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <sStartModuleWrongState>
    2448:	08 95       	ret

0000244a <UsartSendByte>:
}

Terminal_LogLevel_t Terminal_GetLevel(void)
{
	return sLogLevel;
}
    244a:	5d 9b       	sbis	0x0b, 5	; 11
    244c:	fe cf       	rjmp	.-4      	; 0x244a <UsartSendByte>
    244e:	8c b9       	out	0x0c, r24	; 12
    2450:	08 95       	ret

00002452 <UsartSendString>:
    2452:	cf 93       	push	r28
    2454:	df 93       	push	r29
    2456:	ec 01       	movw	r28, r24
    2458:	03 c0       	rjmp	.+6      	; 0x2460 <UsartSendString+0xe>
    245a:	0e 94 25 12 	call	0x244a	; 0x244a <UsartSendByte>
    245e:	21 96       	adiw	r28, 0x01	; 1
    2460:	88 81       	ld	r24, Y
    2462:	81 11       	cpse	r24, r1
    2464:	fa cf       	rjmp	.-12     	; 0x245a <UsartSendString+0x8>
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	08 95       	ret

0000246c <Terminal_SetLevel>:
    246c:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <sLogLevel>
    2470:	08 95       	ret

00002472 <Terminal_Init>:
void Terminal_Init(void)
{
	UBRRH = (uint8_t)(BAUD_PRESCALLER>>8);
    2472:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t)(BAUD_PRESCALLER);
    2474:	80 e1       	ldi	r24, 0x10	; 16
    2476:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
    2478:	88 e1       	ldi	r24, 0x18	; 24
    247a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL);
    247c:	86 e8       	ldi	r24, 0x86	; 134
    247e:	80 bd       	out	0x20, r24	; 32
    2480:	08 95       	ret

00002482 <Terminal_Log>:
// 		UsartSendString("Rush starting...\r\n");	
	}
}

void Terminal_Log(const char *callerName, Terminal_LogLevel_t level, const char *szFormat, ...)
{
    2482:	cf 92       	push	r12
    2484:	df 92       	push	r13
    2486:	ff 92       	push	r15
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	cd 59       	subi	r28, 0x9D	; 157
    2496:	d1 09       	sbc	r29, r1
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	c9 55       	subi	r28, 0x59	; 89
    24a4:	df 4f       	sbci	r29, 0xFF	; 255
    24a6:	08 81       	ld	r16, Y
    24a8:	c7 5a       	subi	r28, 0xA7	; 167
    24aa:	d0 40       	sbci	r29, 0x00	; 0
    24ac:	c8 55       	subi	r28, 0x58	; 88
    24ae:	df 4f       	sbci	r29, 0xFF	; 255
    24b0:	f8 80       	ld	r15, Y
    24b2:	c8 5a       	subi	r28, 0xA8	; 168
    24b4:	d0 40       	sbci	r29, 0x00	; 0
    24b6:	c7 55       	subi	r28, 0x57	; 87
    24b8:	df 4f       	sbci	r29, 0xFF	; 255
    24ba:	18 81       	ld	r17, Y
    24bc:	c9 5a       	subi	r28, 0xA9	; 169
    24be:	d0 40       	sbci	r29, 0x00	; 0
	if(level < sLogLevel)
    24c0:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <sLogLevel>
    24c4:	18 17       	cp	r17, r24
    24c6:	08 f4       	brcc	.+2      	; 0x24ca <Terminal_Log+0x48>
    24c8:	59 c0       	rjmp	.+178    	; 0x257c <Terminal_Log+0xfa>
	{
		return;
	}
	
	uint32_t timestamp = Time_GetMillis();
    24ca:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <Time_GetMillis>
	
	char timestampBuff[8];
	sprintf(timestampBuff, "[%8lu] ", (uint32_t)timestamp);
    24ce:	9f 93       	push	r25
    24d0:	8f 93       	push	r24
    24d2:	7f 93       	push	r23
    24d4:	6f 93       	push	r22
    24d6:	8d e3       	ldi	r24, 0x3D	; 61
    24d8:	93 e0       	ldi	r25, 0x03	; 3
    24da:	9f 93       	push	r25
    24dc:	8f 93       	push	r24
    24de:	ce 01       	movw	r24, r28
    24e0:	01 96       	adiw	r24, 0x01	; 1
    24e2:	6c 01       	movw	r12, r24
    24e4:	9f 93       	push	r25
    24e6:	8f 93       	push	r24
    24e8:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <sprintf>
	UsartSendString(timestampBuff);
    24ec:	c6 01       	movw	r24, r12
    24ee:	0e 94 29 12 	call	0x2452	; 0x2452 <UsartSendString>
	
	char levelBuff[5];
	sprintf(levelBuff, "[%s] ", sTerminal_ColorLevelString[level]);
    24f2:	e1 2f       	mov	r30, r17
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	ee 0f       	add	r30, r30
    24f8:	ff 1f       	adc	r31, r31
    24fa:	ef 52       	subi	r30, 0x2F	; 47
    24fc:	fc 4f       	sbci	r31, 0xFC	; 252
    24fe:	81 81       	ldd	r24, Z+1	; 0x01
    2500:	8f 93       	push	r24
    2502:	80 81       	ld	r24, Z
    2504:	8f 93       	push	r24
    2506:	85 e4       	ldi	r24, 0x45	; 69
    2508:	93 e0       	ldi	r25, 0x03	; 3
    250a:	9f 93       	push	r25
    250c:	8f 93       	push	r24
    250e:	6e 01       	movw	r12, r28
    2510:	99 e0       	ldi	r25, 0x09	; 9
    2512:	c9 0e       	add	r12, r25
    2514:	d1 1c       	adc	r13, r1
    2516:	df 92       	push	r13
    2518:	cf 92       	push	r12
    251a:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <sprintf>
	UsartSendString(levelBuff);
    251e:	c6 01       	movw	r24, r12
    2520:	0e 94 29 12 	call	0x2452	; 0x2452 <UsartSendString>
	
	char callerNameBuff[16];
	sprintf(callerNameBuff, "[%.16s] : ", callerName);
    2524:	ff 92       	push	r15
    2526:	0f 93       	push	r16
    2528:	8b e4       	ldi	r24, 0x4B	; 75
    252a:	93 e0       	ldi	r25, 0x03	; 3
    252c:	9f 93       	push	r25
    252e:	8f 93       	push	r24
    2530:	8e 01       	movw	r16, r28
    2532:	02 5f       	subi	r16, 0xF2	; 242
    2534:	1f 4f       	sbci	r17, 0xFF	; 255
    2536:	1f 93       	push	r17
    2538:	0f 93       	push	r16
    253a:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <sprintf>
	UsartSendString((char *)callerNameBuff);
    253e:	c8 01       	movw	r24, r16
    2540:	0e 94 29 12 	call	0x2452	; 0x2452 <UsartSendString>
	
	char buffer[128];
	va_list args;
	va_start (args, szFormat);
	vsnprintf (buffer, 255, szFormat, args);
    2544:	9e 01       	movw	r18, r28
    2546:	24 55       	subi	r18, 0x54	; 84
    2548:	3f 4f       	sbci	r19, 0xFF	; 255
    254a:	c6 55       	subi	r28, 0x56	; 86
    254c:	df 4f       	sbci	r29, 0xFF	; 255
    254e:	48 81       	ld	r20, Y
    2550:	59 81       	ldd	r21, Y+1	; 0x01
    2552:	ca 5a       	subi	r28, 0xAA	; 170
    2554:	d0 40       	sbci	r29, 0x00	; 0
    2556:	6f ef       	ldi	r22, 0xFF	; 255
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	ce 01       	movw	r24, r28
    255c:	4e 96       	adiw	r24, 0x1e	; 30
    255e:	0e 94 1b 18 	call	0x3036	; 0x3036 <vsnprintf>
	UsartSendString((char *)buffer);
    2562:	ce 01       	movw	r24, r28
    2564:	4e 96       	adiw	r24, 0x1e	; 30
    2566:	0e 94 29 12 	call	0x2452	; 0x2452 <UsartSendString>
	va_end (args);
	
	char *eol = "\r\n";
	UsartSendString((char *)eol);
    256a:	86 e5       	ldi	r24, 0x56	; 86
    256c:	93 e0       	ldi	r25, 0x03	; 3
    256e:	0e 94 29 12 	call	0x2452	; 0x2452 <UsartSendString>
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61
}
    257c:	c3 56       	subi	r28, 0x63	; 99
    257e:	df 4f       	sbci	r29, 0xFF	; 255
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	df 91       	pop	r29
    258c:	cf 91       	pop	r28
    258e:	1f 91       	pop	r17
    2590:	0f 91       	pop	r16
    2592:	ff 90       	pop	r15
    2594:	df 90       	pop	r13
    2596:	cf 90       	pop	r12
    2598:	08 95       	ret

0000259a <main>:
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

int main(void)
{
	EnterDebug();
    259a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <EnterDebug>
	
	Terminal_Init();
    259e:	0e 94 39 12 	call	0x2472	; 0x2472 <Terminal_Init>
	Time_Init();
    25a2:	0e 94 df 14 	call	0x29be	; 0x29be <Time_Init>
	Scheduler_Init();
    25a6:	0e 94 a3 10 	call	0x2146	; 0x2146 <Scheduler_Init>
	
	Led_Init();
    25aa:	0e 94 20 0c 	call	0x1840	; 0x1840 <Led_Init>
	StartModule_Init();
    25ae:	0e 94 be 11 	call	0x237c	; 0x237c <StartModule_Init>
	Distance_Init();
    25b2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Distance_Init>
	Line_Init();
    25b6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <Line_Init>
	Motor_Init();
    25ba:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <Motor_Init>
	Button_Init();
    25be:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Button_Init>
	Battery_Init();
    25c2:	0e 94 39 0a 	call	0x1472	; 0x1472 <Battery_Init>
	Machine_Init();
    25c6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Machine_Init>

	Terminal_Log(TASK_NAME, LOG_OK, "Super loop...");
    25ca:	8d ed       	ldi	r24, 0xDD	; 221
    25cc:	93 e0       	ldi	r25, 0x03	; 3
    25ce:	9f 93       	push	r25
    25d0:	8f 93       	push	r24
    25d2:	82 e0       	ldi	r24, 0x02	; 2
    25d4:	8f 93       	push	r24
    25d6:	8b ee       	ldi	r24, 0xEB	; 235
    25d8:	93 e0       	ldi	r25, 0x03	; 3
    25da:	9f 93       	push	r25
    25dc:	8f 93       	push	r24
    25de:	0e 94 41 12 	call	0x2482	; 0x2482 <Terminal_Log>
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
	
    while(1) 
    {
		Scheduler_Loop();
    25ec:	0e 94 dd 10 	call	0x21ba	; 0x21ba <Scheduler_Loop>
    25f0:	fd cf       	rjmp	.-6      	; 0x25ec <main+0x52>

000025f2 <Gpio_Init>:
    25f2:	84 30       	cpi	r24, 0x04	; 4
    25f4:	08 f0       	brcs	.+2      	; 0x25f8 <Gpio_Init+0x6>
    25f6:	c0 c0       	rjmp	.+384    	; 0x2778 <Gpio_Init+0x186>
    25f8:	68 30       	cpi	r22, 0x08	; 8
    25fa:	08 f0       	brcs	.+2      	; 0x25fe <Gpio_Init+0xc>
    25fc:	bd c0       	rjmp	.+378    	; 0x2778 <Gpio_Init+0x186>
    25fe:	43 30       	cpi	r20, 0x03	; 3
    2600:	08 f0       	brcs	.+2      	; 0x2604 <Gpio_Init+0x12>
    2602:	ba c0       	rjmp	.+372    	; 0x2778 <Gpio_Init+0x186>
    2604:	41 30       	cpi	r20, 0x01	; 1
    2606:	e9 f1       	breq	.+122    	; 0x2682 <Gpio_Init+0x90>
    2608:	20 f0       	brcs	.+8      	; 0x2612 <Gpio_Init+0x20>
    260a:	42 30       	cpi	r20, 0x02	; 2
    260c:	09 f4       	brne	.+2      	; 0x2610 <Gpio_Init+0x1e>
    260e:	81 c0       	rjmp	.+258    	; 0x2712 <Gpio_Init+0x120>
    2610:	08 95       	ret
    2612:	81 30       	cpi	r24, 0x01	; 1
    2614:	91 f0       	breq	.+36     	; 0x263a <Gpio_Init+0x48>
    2616:	28 f0       	brcs	.+10     	; 0x2622 <Gpio_Init+0x30>
    2618:	82 30       	cpi	r24, 0x02	; 2
    261a:	d9 f0       	breq	.+54     	; 0x2652 <Gpio_Init+0x60>
    261c:	83 30       	cpi	r24, 0x03	; 3
    261e:	29 f1       	breq	.+74     	; 0x266a <Gpio_Init+0x78>
    2620:	08 95       	ret
    2622:	2a b3       	in	r18, 0x1a	; 26
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	02 c0       	rjmp	.+4      	; 0x262e <Gpio_Init+0x3c>
    262a:	88 0f       	add	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	6a 95       	dec	r22
    2630:	e2 f7       	brpl	.-8      	; 0x262a <Gpio_Init+0x38>
    2632:	80 95       	com	r24
    2634:	82 23       	and	r24, r18
    2636:	8a bb       	out	0x1a, r24	; 26
    2638:	08 95       	ret
    263a:	27 b3       	in	r18, 0x17	; 23
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <Gpio_Init+0x54>
    2642:	88 0f       	add	r24, r24
    2644:	99 1f       	adc	r25, r25
    2646:	6a 95       	dec	r22
    2648:	e2 f7       	brpl	.-8      	; 0x2642 <Gpio_Init+0x50>
    264a:	80 95       	com	r24
    264c:	82 23       	and	r24, r18
    264e:	87 bb       	out	0x17, r24	; 23
    2650:	08 95       	ret
    2652:	24 b3       	in	r18, 0x14	; 20
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	02 c0       	rjmp	.+4      	; 0x265e <Gpio_Init+0x6c>
    265a:	88 0f       	add	r24, r24
    265c:	99 1f       	adc	r25, r25
    265e:	6a 95       	dec	r22
    2660:	e2 f7       	brpl	.-8      	; 0x265a <Gpio_Init+0x68>
    2662:	80 95       	com	r24
    2664:	82 23       	and	r24, r18
    2666:	84 bb       	out	0x14, r24	; 20
    2668:	08 95       	ret
    266a:	21 b3       	in	r18, 0x11	; 17
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	02 c0       	rjmp	.+4      	; 0x2676 <Gpio_Init+0x84>
    2672:	88 0f       	add	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	6a 95       	dec	r22
    2678:	e2 f7       	brpl	.-8      	; 0x2672 <Gpio_Init+0x80>
    267a:	80 95       	com	r24
    267c:	82 23       	and	r24, r18
    267e:	81 bb       	out	0x11, r24	; 17
    2680:	08 95       	ret
    2682:	81 30       	cpi	r24, 0x01	; 1
    2684:	b1 f0       	breq	.+44     	; 0x26b2 <Gpio_Init+0xc0>
    2686:	28 f0       	brcs	.+10     	; 0x2692 <Gpio_Init+0xa0>
    2688:	82 30       	cpi	r24, 0x02	; 2
    268a:	19 f1       	breq	.+70     	; 0x26d2 <Gpio_Init+0xe0>
    268c:	83 30       	cpi	r24, 0x03	; 3
    268e:	89 f1       	breq	.+98     	; 0x26f2 <Gpio_Init+0x100>
    2690:	08 95       	ret
    2692:	2a b3       	in	r18, 0x1a	; 26
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	02 c0       	rjmp	.+4      	; 0x269e <Gpio_Init+0xac>
    269a:	88 0f       	add	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	6a 95       	dec	r22
    26a0:	e2 f7       	brpl	.-8      	; 0x269a <Gpio_Init+0xa8>
    26a2:	98 2f       	mov	r25, r24
    26a4:	90 95       	com	r25
    26a6:	92 23       	and	r25, r18
    26a8:	9a bb       	out	0x1a, r25	; 26
    26aa:	9b b3       	in	r25, 0x1b	; 27
    26ac:	89 2b       	or	r24, r25
    26ae:	8b bb       	out	0x1b, r24	; 27
    26b0:	08 95       	ret
    26b2:	27 b3       	in	r18, 0x17	; 23
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <Gpio_Init+0xcc>
    26ba:	88 0f       	add	r24, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	6a 95       	dec	r22
    26c0:	e2 f7       	brpl	.-8      	; 0x26ba <Gpio_Init+0xc8>
    26c2:	98 2f       	mov	r25, r24
    26c4:	90 95       	com	r25
    26c6:	92 23       	and	r25, r18
    26c8:	97 bb       	out	0x17, r25	; 23
    26ca:	98 b3       	in	r25, 0x18	; 24
    26cc:	89 2b       	or	r24, r25
    26ce:	88 bb       	out	0x18, r24	; 24
    26d0:	08 95       	ret
    26d2:	24 b3       	in	r18, 0x14	; 20
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <Gpio_Init+0xec>
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	6a 95       	dec	r22
    26e0:	e2 f7       	brpl	.-8      	; 0x26da <Gpio_Init+0xe8>
    26e2:	98 2f       	mov	r25, r24
    26e4:	90 95       	com	r25
    26e6:	92 23       	and	r25, r18
    26e8:	94 bb       	out	0x14, r25	; 20
    26ea:	95 b3       	in	r25, 0x15	; 21
    26ec:	89 2b       	or	r24, r25
    26ee:	85 bb       	out	0x15, r24	; 21
    26f0:	08 95       	ret
    26f2:	21 b3       	in	r18, 0x11	; 17
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <Gpio_Init+0x10c>
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	6a 95       	dec	r22
    2700:	e2 f7       	brpl	.-8      	; 0x26fa <Gpio_Init+0x108>
    2702:	98 2f       	mov	r25, r24
    2704:	90 95       	com	r25
    2706:	92 23       	and	r25, r18
    2708:	91 bb       	out	0x11, r25	; 17
    270a:	92 b3       	in	r25, 0x12	; 18
    270c:	89 2b       	or	r24, r25
    270e:	82 bb       	out	0x12, r24	; 18
    2710:	08 95       	ret
    2712:	81 30       	cpi	r24, 0x01	; 1
    2714:	89 f0       	breq	.+34     	; 0x2738 <Gpio_Init+0x146>
    2716:	28 f0       	brcs	.+10     	; 0x2722 <Gpio_Init+0x130>
    2718:	82 30       	cpi	r24, 0x02	; 2
    271a:	c9 f0       	breq	.+50     	; 0x274e <Gpio_Init+0x15c>
    271c:	83 30       	cpi	r24, 0x03	; 3
    271e:	11 f1       	breq	.+68     	; 0x2764 <Gpio_Init+0x172>
    2720:	08 95       	ret
    2722:	2a b3       	in	r18, 0x1a	; 26
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	02 c0       	rjmp	.+4      	; 0x272e <Gpio_Init+0x13c>
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	6a 95       	dec	r22
    2730:	e2 f7       	brpl	.-8      	; 0x272a <Gpio_Init+0x138>
    2732:	82 2b       	or	r24, r18
    2734:	8a bb       	out	0x1a, r24	; 26
    2736:	08 95       	ret
    2738:	27 b3       	in	r18, 0x17	; 23
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <Gpio_Init+0x152>
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	6a 95       	dec	r22
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <Gpio_Init+0x14e>
    2748:	82 2b       	or	r24, r18
    274a:	87 bb       	out	0x17, r24	; 23
    274c:	08 95       	ret
    274e:	24 b3       	in	r18, 0x14	; 20
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	02 c0       	rjmp	.+4      	; 0x275a <Gpio_Init+0x168>
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	6a 95       	dec	r22
    275c:	e2 f7       	brpl	.-8      	; 0x2756 <Gpio_Init+0x164>
    275e:	82 2b       	or	r24, r18
    2760:	84 bb       	out	0x14, r24	; 20
    2762:	08 95       	ret
    2764:	21 b3       	in	r18, 0x11	; 17
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <Gpio_Init+0x17e>
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	6a 95       	dec	r22
    2772:	e2 f7       	brpl	.-8      	; 0x276c <Gpio_Init+0x17a>
    2774:	82 2b       	or	r24, r18
    2776:	81 bb       	out	0x11, r24	; 17
    2778:	08 95       	ret

0000277a <Gpio_WritePin>:
    277a:	68 30       	cpi	r22, 0x08	; 8
    277c:	08 f0       	brcs	.+2      	; 0x2780 <Gpio_WritePin+0x6>
    277e:	6c c0       	rjmp	.+216    	; 0x2858 <Gpio_WritePin+0xde>
    2780:	81 30       	cpi	r24, 0x01	; 1
    2782:	01 f1       	breq	.+64     	; 0x27c4 <Gpio_WritePin+0x4a>
    2784:	30 f0       	brcs	.+12     	; 0x2792 <Gpio_WritePin+0x18>
    2786:	82 30       	cpi	r24, 0x02	; 2
    2788:	b1 f1       	breq	.+108    	; 0x27f6 <Gpio_WritePin+0x7c>
    278a:	83 30       	cpi	r24, 0x03	; 3
    278c:	09 f4       	brne	.+2      	; 0x2790 <Gpio_WritePin+0x16>
    278e:	4c c0       	rjmp	.+152    	; 0x2828 <Gpio_WritePin+0xae>
    2790:	08 95       	ret
    2792:	44 23       	and	r20, r20
    2794:	59 f0       	breq	.+22     	; 0x27ac <Gpio_WritePin+0x32>
    2796:	2b b3       	in	r18, 0x1b	; 27
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <Gpio_WritePin+0x28>
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	6a 95       	dec	r22
    27a4:	e2 f7       	brpl	.-8      	; 0x279e <Gpio_WritePin+0x24>
    27a6:	82 2b       	or	r24, r18
    27a8:	8b bb       	out	0x1b, r24	; 27
    27aa:	08 95       	ret
    27ac:	2b b3       	in	r18, 0x1b	; 27
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	02 c0       	rjmp	.+4      	; 0x27b8 <Gpio_WritePin+0x3e>
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	6a 95       	dec	r22
    27ba:	e2 f7       	brpl	.-8      	; 0x27b4 <Gpio_WritePin+0x3a>
    27bc:	80 95       	com	r24
    27be:	82 23       	and	r24, r18
    27c0:	8b bb       	out	0x1b, r24	; 27
    27c2:	08 95       	ret
    27c4:	44 23       	and	r20, r20
    27c6:	59 f0       	breq	.+22     	; 0x27de <Gpio_WritePin+0x64>
    27c8:	28 b3       	in	r18, 0x18	; 24
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <Gpio_WritePin+0x5a>
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	6a 95       	dec	r22
    27d6:	e2 f7       	brpl	.-8      	; 0x27d0 <Gpio_WritePin+0x56>
    27d8:	82 2b       	or	r24, r18
    27da:	88 bb       	out	0x18, r24	; 24
    27dc:	08 95       	ret
    27de:	28 b3       	in	r18, 0x18	; 24
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <Gpio_WritePin+0x70>
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	6a 95       	dec	r22
    27ec:	e2 f7       	brpl	.-8      	; 0x27e6 <Gpio_WritePin+0x6c>
    27ee:	80 95       	com	r24
    27f0:	82 23       	and	r24, r18
    27f2:	88 bb       	out	0x18, r24	; 24
    27f4:	08 95       	ret
    27f6:	44 23       	and	r20, r20
    27f8:	59 f0       	breq	.+22     	; 0x2810 <Gpio_WritePin+0x96>
    27fa:	25 b3       	in	r18, 0x15	; 21
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <Gpio_WritePin+0x8c>
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	6a 95       	dec	r22
    2808:	e2 f7       	brpl	.-8      	; 0x2802 <Gpio_WritePin+0x88>
    280a:	82 2b       	or	r24, r18
    280c:	85 bb       	out	0x15, r24	; 21
    280e:	08 95       	ret
    2810:	25 b3       	in	r18, 0x15	; 21
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	02 c0       	rjmp	.+4      	; 0x281c <Gpio_WritePin+0xa2>
    2818:	88 0f       	add	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	6a 95       	dec	r22
    281e:	e2 f7       	brpl	.-8      	; 0x2818 <Gpio_WritePin+0x9e>
    2820:	80 95       	com	r24
    2822:	82 23       	and	r24, r18
    2824:	85 bb       	out	0x15, r24	; 21
    2826:	08 95       	ret
    2828:	44 23       	and	r20, r20
    282a:	59 f0       	breq	.+22     	; 0x2842 <Gpio_WritePin+0xc8>
    282c:	22 b3       	in	r18, 0x12	; 18
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <Gpio_WritePin+0xbe>
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	6a 95       	dec	r22
    283a:	e2 f7       	brpl	.-8      	; 0x2834 <Gpio_WritePin+0xba>
    283c:	82 2b       	or	r24, r18
    283e:	82 bb       	out	0x12, r24	; 18
    2840:	08 95       	ret
    2842:	22 b3       	in	r18, 0x12	; 18
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	02 c0       	rjmp	.+4      	; 0x284e <Gpio_WritePin+0xd4>
    284a:	88 0f       	add	r24, r24
    284c:	99 1f       	adc	r25, r25
    284e:	6a 95       	dec	r22
    2850:	e2 f7       	brpl	.-8      	; 0x284a <Gpio_WritePin+0xd0>
    2852:	80 95       	com	r24
    2854:	82 23       	and	r24, r18
    2856:	82 bb       	out	0x12, r24	; 18
    2858:	08 95       	ret

0000285a <Gpio_TogglePin>:
    285a:	68 30       	cpi	r22, 0x08	; 8
    285c:	98 f5       	brcc	.+102    	; 0x28c4 <Gpio_TogglePin+0x6a>
    285e:	81 30       	cpi	r24, 0x01	; 1
    2860:	89 f0       	breq	.+34     	; 0x2884 <Gpio_TogglePin+0x2a>
    2862:	28 f0       	brcs	.+10     	; 0x286e <Gpio_TogglePin+0x14>
    2864:	82 30       	cpi	r24, 0x02	; 2
    2866:	c9 f0       	breq	.+50     	; 0x289a <Gpio_TogglePin+0x40>
    2868:	83 30       	cpi	r24, 0x03	; 3
    286a:	11 f1       	breq	.+68     	; 0x28b0 <Gpio_TogglePin+0x56>
    286c:	08 95       	ret
    286e:	2b b3       	in	r18, 0x1b	; 27
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	02 c0       	rjmp	.+4      	; 0x287a <Gpio_TogglePin+0x20>
    2876:	88 0f       	add	r24, r24
    2878:	99 1f       	adc	r25, r25
    287a:	6a 95       	dec	r22
    287c:	e2 f7       	brpl	.-8      	; 0x2876 <Gpio_TogglePin+0x1c>
    287e:	82 27       	eor	r24, r18
    2880:	8b bb       	out	0x1b, r24	; 27
    2882:	08 95       	ret
    2884:	28 b3       	in	r18, 0x18	; 24
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <Gpio_TogglePin+0x36>
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	6a 95       	dec	r22
    2892:	e2 f7       	brpl	.-8      	; 0x288c <Gpio_TogglePin+0x32>
    2894:	82 27       	eor	r24, r18
    2896:	88 bb       	out	0x18, r24	; 24
    2898:	08 95       	ret
    289a:	25 b3       	in	r18, 0x15	; 21
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <Gpio_TogglePin+0x4c>
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	6a 95       	dec	r22
    28a8:	e2 f7       	brpl	.-8      	; 0x28a2 <Gpio_TogglePin+0x48>
    28aa:	82 27       	eor	r24, r18
    28ac:	85 bb       	out	0x15, r24	; 21
    28ae:	08 95       	ret
    28b0:	22 b3       	in	r18, 0x12	; 18
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <Gpio_TogglePin+0x62>
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	6a 95       	dec	r22
    28be:	e2 f7       	brpl	.-8      	; 0x28b8 <Gpio_TogglePin+0x5e>
    28c0:	82 27       	eor	r24, r18
    28c2:	82 bb       	out	0x12, r24	; 18
    28c4:	08 95       	ret

000028c6 <Gpio_ReadPin>:
    28c6:	68 30       	cpi	r22, 0x08	; 8
    28c8:	08 f0       	brcs	.+2      	; 0x28cc <Gpio_ReadPin+0x6>
    28ca:	50 c0       	rjmp	.+160    	; 0x296c <Gpio_ReadPin+0xa6>
    28cc:	81 30       	cpi	r24, 0x01	; 1
    28ce:	c1 f0       	breq	.+48     	; 0x2900 <Gpio_ReadPin+0x3a>
    28d0:	28 f0       	brcs	.+10     	; 0x28dc <Gpio_ReadPin+0x16>
    28d2:	82 30       	cpi	r24, 0x02	; 2
    28d4:	39 f1       	breq	.+78     	; 0x2924 <Gpio_ReadPin+0x5e>
    28d6:	83 30       	cpi	r24, 0x03	; 3
    28d8:	b9 f1       	breq	.+110    	; 0x2948 <Gpio_ReadPin+0x82>
    28da:	4a c0       	rjmp	.+148    	; 0x2970 <Gpio_ReadPin+0xaa>
    28dc:	49 b3       	in	r20, 0x19	; 25
    28de:	21 e0       	ldi	r18, 0x01	; 1
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	c9 01       	movw	r24, r18
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <Gpio_ReadPin+0x24>
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	6a 95       	dec	r22
    28ec:	e2 f7       	brpl	.-8      	; 0x28e6 <Gpio_ReadPin+0x20>
    28ee:	24 2f       	mov	r18, r20
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	28 23       	and	r18, r24
    28f4:	39 23       	and	r19, r25
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	23 2b       	or	r18, r19
    28fa:	d9 f5       	brne	.+118    	; 0x2972 <Gpio_ReadPin+0xac>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	08 95       	ret
    2900:	46 b3       	in	r20, 0x16	; 22
    2902:	21 e0       	ldi	r18, 0x01	; 1
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	c9 01       	movw	r24, r18
    2908:	02 c0       	rjmp	.+4      	; 0x290e <Gpio_ReadPin+0x48>
    290a:	88 0f       	add	r24, r24
    290c:	99 1f       	adc	r25, r25
    290e:	6a 95       	dec	r22
    2910:	e2 f7       	brpl	.-8      	; 0x290a <Gpio_ReadPin+0x44>
    2912:	24 2f       	mov	r18, r20
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	28 23       	and	r18, r24
    2918:	39 23       	and	r19, r25
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	23 2b       	or	r18, r19
    291e:	49 f5       	brne	.+82     	; 0x2972 <Gpio_ReadPin+0xac>
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	08 95       	ret
    2924:	43 b3       	in	r20, 0x13	; 19
    2926:	21 e0       	ldi	r18, 0x01	; 1
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	c9 01       	movw	r24, r18
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <Gpio_ReadPin+0x6c>
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	6a 95       	dec	r22
    2934:	e2 f7       	brpl	.-8      	; 0x292e <Gpio_ReadPin+0x68>
    2936:	24 2f       	mov	r18, r20
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	28 23       	and	r18, r24
    293c:	39 23       	and	r19, r25
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	23 2b       	or	r18, r19
    2942:	b9 f4       	brne	.+46     	; 0x2972 <Gpio_ReadPin+0xac>
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	08 95       	ret
    2948:	40 b3       	in	r20, 0x10	; 16
    294a:	21 e0       	ldi	r18, 0x01	; 1
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	c9 01       	movw	r24, r18
    2950:	02 c0       	rjmp	.+4      	; 0x2956 <Gpio_ReadPin+0x90>
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	6a 95       	dec	r22
    2958:	e2 f7       	brpl	.-8      	; 0x2952 <Gpio_ReadPin+0x8c>
    295a:	24 2f       	mov	r18, r20
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	28 23       	and	r18, r24
    2960:	39 23       	and	r19, r25
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	23 2b       	or	r18, r19
    2966:	29 f4       	brne	.+10     	; 0x2972 <Gpio_ReadPin+0xac>
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	08 95       	ret
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	08 95       	ret
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	08 95       	ret

00002974 <__vector_7>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

ISR(TIMER1_COMPA_vect)
{
    2974:	1f 92       	push	r1
    2976:	0f 92       	push	r0
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	0f 92       	push	r0
    297c:	11 24       	eor	r1, r1
    297e:	8f 93       	push	r24
    2980:	9f 93       	push	r25
    2982:	af 93       	push	r26
    2984:	bf 93       	push	r27
	sTimer1Millis++;
    2986:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <sTimer1Millis>
    298a:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <sTimer1Millis+0x1>
    298e:	a0 91 86 05 	lds	r26, 0x0586	; 0x800586 <sTimer1Millis+0x2>
    2992:	b0 91 87 05 	lds	r27, 0x0587	; 0x800587 <sTimer1Millis+0x3>
    2996:	01 96       	adiw	r24, 0x01	; 1
    2998:	a1 1d       	adc	r26, r1
    299a:	b1 1d       	adc	r27, r1
    299c:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <sTimer1Millis>
    29a0:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <sTimer1Millis+0x1>
    29a4:	a0 93 86 05 	sts	0x0586, r26	; 0x800586 <sTimer1Millis+0x2>
    29a8:	b0 93 87 05 	sts	0x0587, r27	; 0x800587 <sTimer1Millis+0x3>
}
    29ac:	bf 91       	pop	r27
    29ae:	af 91       	pop	r26
    29b0:	9f 91       	pop	r25
    29b2:	8f 91       	pop	r24
    29b4:	0f 90       	pop	r0
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	0f 90       	pop	r0
    29ba:	1f 90       	pop	r1
    29bc:	18 95       	reti

000029be <Time_Init>:
{
	uint32_t ctcMatchOverflow;

	ctcMatchOverflow = ((F_CPU / 1000U) / 8U);

	TCCR1B |= (1U << WGM12) | (1U << CS11);
    29be:	8e b5       	in	r24, 0x2e	; 46
    29c0:	8a 60       	ori	r24, 0x0A	; 10
    29c2:	8e bd       	out	0x2e, r24	; 46

	OCR1AH = (ctcMatchOverflow >> 8U);
    29c4:	87 e0       	ldi	r24, 0x07	; 7
    29c6:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = ctcMatchOverflow;
    29c8:	80 ed       	ldi	r24, 0xD0	; 208
    29ca:	8a bd       	out	0x2a, r24	; 42

	TIMSK |= (1 << OCIE1A);
    29cc:	89 b7       	in	r24, 0x39	; 57
    29ce:	80 61       	ori	r24, 0x10	; 16
    29d0:	89 bf       	out	0x39, r24	; 57

	sei();
    29d2:	78 94       	sei
    29d4:	08 95       	ret

000029d6 <Time_GetMillis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    29d6:	f8 94       	cli

uint32_t Time_GetMillis(void)
{
	uint32_t millis;

	ATOMIC_BLOCK(ATOMIC_FORCEON)
    29d8:	21 e0       	ldi	r18, 0x01	; 1
    29da:	09 c0       	rjmp	.+18     	; 0x29ee <Time_GetMillis+0x18>
	{
		millis = sTimer1Millis;
    29dc:	60 91 84 05 	lds	r22, 0x0584	; 0x800584 <sTimer1Millis>
    29e0:	70 91 85 05 	lds	r23, 0x0585	; 0x800585 <sTimer1Millis+0x1>
    29e4:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <sTimer1Millis+0x2>
    29e8:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <sTimer1Millis+0x3>

uint32_t Time_GetMillis(void)
{
	uint32_t millis;

	ATOMIC_BLOCK(ATOMIC_FORCEON)
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	21 11       	cpse	r18, r1
    29f0:	f5 cf       	rjmp	.-22     	; 0x29dc <Time_GetMillis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    29f2:	78 94       	sei
	{
		millis = sTimer1Millis;
	}
	
	return millis;
    29f4:	08 95       	ret

000029f6 <__subsf3>:
    29f6:	50 58       	subi	r21, 0x80	; 128

000029f8 <__addsf3>:
    29f8:	bb 27       	eor	r27, r27
    29fa:	aa 27       	eor	r26, r26
    29fc:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__addsf3x>
    2a00:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__fp_round>
    2a04:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fp_pscA>
    2a08:	38 f0       	brcs	.+14     	; 0x2a18 <__addsf3+0x20>
    2a0a:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__fp_pscB>
    2a0e:	20 f0       	brcs	.+8      	; 0x2a18 <__addsf3+0x20>
    2a10:	39 f4       	brne	.+14     	; 0x2a20 <__addsf3+0x28>
    2a12:	9f 3f       	cpi	r25, 0xFF	; 255
    2a14:	19 f4       	brne	.+6      	; 0x2a1c <__addsf3+0x24>
    2a16:	26 f4       	brtc	.+8      	; 0x2a20 <__addsf3+0x28>
    2a18:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_nan>
    2a1c:	0e f4       	brtc	.+2      	; 0x2a20 <__addsf3+0x28>
    2a1e:	e0 95       	com	r30
    2a20:	e7 fb       	bst	r30, 7
    2a22:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__fp_inf>

00002a26 <__addsf3x>:
    2a26:	e9 2f       	mov	r30, r25
    2a28:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__fp_split3>
    2a2c:	58 f3       	brcs	.-42     	; 0x2a04 <__addsf3+0xc>
    2a2e:	ba 17       	cp	r27, r26
    2a30:	62 07       	cpc	r22, r18
    2a32:	73 07       	cpc	r23, r19
    2a34:	84 07       	cpc	r24, r20
    2a36:	95 07       	cpc	r25, r21
    2a38:	20 f0       	brcs	.+8      	; 0x2a42 <__addsf3x+0x1c>
    2a3a:	79 f4       	brne	.+30     	; 0x2a5a <__addsf3x+0x34>
    2a3c:	a6 f5       	brtc	.+104    	; 0x2aa6 <__addsf3x+0x80>
    2a3e:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__fp_zero>
    2a42:	0e f4       	brtc	.+2      	; 0x2a46 <__addsf3x+0x20>
    2a44:	e0 95       	com	r30
    2a46:	0b 2e       	mov	r0, r27
    2a48:	ba 2f       	mov	r27, r26
    2a4a:	a0 2d       	mov	r26, r0
    2a4c:	0b 01       	movw	r0, r22
    2a4e:	b9 01       	movw	r22, r18
    2a50:	90 01       	movw	r18, r0
    2a52:	0c 01       	movw	r0, r24
    2a54:	ca 01       	movw	r24, r20
    2a56:	a0 01       	movw	r20, r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	ff 27       	eor	r31, r31
    2a5c:	59 1b       	sub	r21, r25
    2a5e:	99 f0       	breq	.+38     	; 0x2a86 <__addsf3x+0x60>
    2a60:	59 3f       	cpi	r21, 0xF9	; 249
    2a62:	50 f4       	brcc	.+20     	; 0x2a78 <__addsf3x+0x52>
    2a64:	50 3e       	cpi	r21, 0xE0	; 224
    2a66:	68 f1       	brcs	.+90     	; 0x2ac2 <__addsf3x+0x9c>
    2a68:	1a 16       	cp	r1, r26
    2a6a:	f0 40       	sbci	r31, 0x00	; 0
    2a6c:	a2 2f       	mov	r26, r18
    2a6e:	23 2f       	mov	r18, r19
    2a70:	34 2f       	mov	r19, r20
    2a72:	44 27       	eor	r20, r20
    2a74:	58 5f       	subi	r21, 0xF8	; 248
    2a76:	f3 cf       	rjmp	.-26     	; 0x2a5e <__addsf3x+0x38>
    2a78:	46 95       	lsr	r20
    2a7a:	37 95       	ror	r19
    2a7c:	27 95       	ror	r18
    2a7e:	a7 95       	ror	r26
    2a80:	f0 40       	sbci	r31, 0x00	; 0
    2a82:	53 95       	inc	r21
    2a84:	c9 f7       	brne	.-14     	; 0x2a78 <__addsf3x+0x52>
    2a86:	7e f4       	brtc	.+30     	; 0x2aa6 <__addsf3x+0x80>
    2a88:	1f 16       	cp	r1, r31
    2a8a:	ba 0b       	sbc	r27, r26
    2a8c:	62 0b       	sbc	r22, r18
    2a8e:	73 0b       	sbc	r23, r19
    2a90:	84 0b       	sbc	r24, r20
    2a92:	ba f0       	brmi	.+46     	; 0x2ac2 <__addsf3x+0x9c>
    2a94:	91 50       	subi	r25, 0x01	; 1
    2a96:	a1 f0       	breq	.+40     	; 0x2ac0 <__addsf3x+0x9a>
    2a98:	ff 0f       	add	r31, r31
    2a9a:	bb 1f       	adc	r27, r27
    2a9c:	66 1f       	adc	r22, r22
    2a9e:	77 1f       	adc	r23, r23
    2aa0:	88 1f       	adc	r24, r24
    2aa2:	c2 f7       	brpl	.-16     	; 0x2a94 <__addsf3x+0x6e>
    2aa4:	0e c0       	rjmp	.+28     	; 0x2ac2 <__addsf3x+0x9c>
    2aa6:	ba 0f       	add	r27, r26
    2aa8:	62 1f       	adc	r22, r18
    2aaa:	73 1f       	adc	r23, r19
    2aac:	84 1f       	adc	r24, r20
    2aae:	48 f4       	brcc	.+18     	; 0x2ac2 <__addsf3x+0x9c>
    2ab0:	87 95       	ror	r24
    2ab2:	77 95       	ror	r23
    2ab4:	67 95       	ror	r22
    2ab6:	b7 95       	ror	r27
    2ab8:	f7 95       	ror	r31
    2aba:	9e 3f       	cpi	r25, 0xFE	; 254
    2abc:	08 f0       	brcs	.+2      	; 0x2ac0 <__addsf3x+0x9a>
    2abe:	b0 cf       	rjmp	.-160    	; 0x2a20 <__addsf3+0x28>
    2ac0:	93 95       	inc	r25
    2ac2:	88 0f       	add	r24, r24
    2ac4:	08 f0       	brcs	.+2      	; 0x2ac8 <__addsf3x+0xa2>
    2ac6:	99 27       	eor	r25, r25
    2ac8:	ee 0f       	add	r30, r30
    2aca:	97 95       	ror	r25
    2acc:	87 95       	ror	r24
    2ace:	08 95       	ret

00002ad0 <__cmpsf2>:
    2ad0:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__fp_cmp>
    2ad4:	08 f4       	brcc	.+2      	; 0x2ad8 <__cmpsf2+0x8>
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	08 95       	ret

00002ada <__divsf3>:
    2ada:	0e 94 81 15 	call	0x2b02	; 0x2b02 <__divsf3x>
    2ade:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__fp_round>
    2ae2:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__fp_pscB>
    2ae6:	58 f0       	brcs	.+22     	; 0x2afe <__divsf3+0x24>
    2ae8:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fp_pscA>
    2aec:	40 f0       	brcs	.+16     	; 0x2afe <__divsf3+0x24>
    2aee:	29 f4       	brne	.+10     	; 0x2afa <__divsf3+0x20>
    2af0:	5f 3f       	cpi	r21, 0xFF	; 255
    2af2:	29 f0       	breq	.+10     	; 0x2afe <__divsf3+0x24>
    2af4:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__fp_inf>
    2af8:	51 11       	cpse	r21, r1
    2afa:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__fp_szero>
    2afe:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_nan>

00002b02 <__divsf3x>:
    2b02:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__fp_split3>
    2b06:	68 f3       	brcs	.-38     	; 0x2ae2 <__divsf3+0x8>

00002b08 <__divsf3_pse>:
    2b08:	99 23       	and	r25, r25
    2b0a:	b1 f3       	breq	.-20     	; 0x2af8 <__divsf3+0x1e>
    2b0c:	55 23       	and	r21, r21
    2b0e:	91 f3       	breq	.-28     	; 0x2af4 <__divsf3+0x1a>
    2b10:	95 1b       	sub	r25, r21
    2b12:	55 0b       	sbc	r21, r21
    2b14:	bb 27       	eor	r27, r27
    2b16:	aa 27       	eor	r26, r26
    2b18:	62 17       	cp	r22, r18
    2b1a:	73 07       	cpc	r23, r19
    2b1c:	84 07       	cpc	r24, r20
    2b1e:	38 f0       	brcs	.+14     	; 0x2b2e <__divsf3_pse+0x26>
    2b20:	9f 5f       	subi	r25, 0xFF	; 255
    2b22:	5f 4f       	sbci	r21, 0xFF	; 255
    2b24:	22 0f       	add	r18, r18
    2b26:	33 1f       	adc	r19, r19
    2b28:	44 1f       	adc	r20, r20
    2b2a:	aa 1f       	adc	r26, r26
    2b2c:	a9 f3       	breq	.-22     	; 0x2b18 <__divsf3_pse+0x10>
    2b2e:	35 d0       	rcall	.+106    	; 0x2b9a <__divsf3_pse+0x92>
    2b30:	0e 2e       	mov	r0, r30
    2b32:	3a f0       	brmi	.+14     	; 0x2b42 <__divsf3_pse+0x3a>
    2b34:	e0 e8       	ldi	r30, 0x80	; 128
    2b36:	32 d0       	rcall	.+100    	; 0x2b9c <__divsf3_pse+0x94>
    2b38:	91 50       	subi	r25, 0x01	; 1
    2b3a:	50 40       	sbci	r21, 0x00	; 0
    2b3c:	e6 95       	lsr	r30
    2b3e:	00 1c       	adc	r0, r0
    2b40:	ca f7       	brpl	.-14     	; 0x2b34 <__divsf3_pse+0x2c>
    2b42:	2b d0       	rcall	.+86     	; 0x2b9a <__divsf3_pse+0x92>
    2b44:	fe 2f       	mov	r31, r30
    2b46:	29 d0       	rcall	.+82     	; 0x2b9a <__divsf3_pse+0x92>
    2b48:	66 0f       	add	r22, r22
    2b4a:	77 1f       	adc	r23, r23
    2b4c:	88 1f       	adc	r24, r24
    2b4e:	bb 1f       	adc	r27, r27
    2b50:	26 17       	cp	r18, r22
    2b52:	37 07       	cpc	r19, r23
    2b54:	48 07       	cpc	r20, r24
    2b56:	ab 07       	cpc	r26, r27
    2b58:	b0 e8       	ldi	r27, 0x80	; 128
    2b5a:	09 f0       	breq	.+2      	; 0x2b5e <__divsf3_pse+0x56>
    2b5c:	bb 0b       	sbc	r27, r27
    2b5e:	80 2d       	mov	r24, r0
    2b60:	bf 01       	movw	r22, r30
    2b62:	ff 27       	eor	r31, r31
    2b64:	93 58       	subi	r25, 0x83	; 131
    2b66:	5f 4f       	sbci	r21, 0xFF	; 255
    2b68:	3a f0       	brmi	.+14     	; 0x2b78 <__divsf3_pse+0x70>
    2b6a:	9e 3f       	cpi	r25, 0xFE	; 254
    2b6c:	51 05       	cpc	r21, r1
    2b6e:	78 f0       	brcs	.+30     	; 0x2b8e <__divsf3_pse+0x86>
    2b70:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__fp_inf>
    2b74:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__fp_szero>
    2b78:	5f 3f       	cpi	r21, 0xFF	; 255
    2b7a:	e4 f3       	brlt	.-8      	; 0x2b74 <__divsf3_pse+0x6c>
    2b7c:	98 3e       	cpi	r25, 0xE8	; 232
    2b7e:	d4 f3       	brlt	.-12     	; 0x2b74 <__divsf3_pse+0x6c>
    2b80:	86 95       	lsr	r24
    2b82:	77 95       	ror	r23
    2b84:	67 95       	ror	r22
    2b86:	b7 95       	ror	r27
    2b88:	f7 95       	ror	r31
    2b8a:	9f 5f       	subi	r25, 0xFF	; 255
    2b8c:	c9 f7       	brne	.-14     	; 0x2b80 <__divsf3_pse+0x78>
    2b8e:	88 0f       	add	r24, r24
    2b90:	91 1d       	adc	r25, r1
    2b92:	96 95       	lsr	r25
    2b94:	87 95       	ror	r24
    2b96:	97 f9       	bld	r25, 7
    2b98:	08 95       	ret
    2b9a:	e1 e0       	ldi	r30, 0x01	; 1
    2b9c:	66 0f       	add	r22, r22
    2b9e:	77 1f       	adc	r23, r23
    2ba0:	88 1f       	adc	r24, r24
    2ba2:	bb 1f       	adc	r27, r27
    2ba4:	62 17       	cp	r22, r18
    2ba6:	73 07       	cpc	r23, r19
    2ba8:	84 07       	cpc	r24, r20
    2baa:	ba 07       	cpc	r27, r26
    2bac:	20 f0       	brcs	.+8      	; 0x2bb6 <__divsf3_pse+0xae>
    2bae:	62 1b       	sub	r22, r18
    2bb0:	73 0b       	sbc	r23, r19
    2bb2:	84 0b       	sbc	r24, r20
    2bb4:	ba 0b       	sbc	r27, r26
    2bb6:	ee 1f       	adc	r30, r30
    2bb8:	88 f7       	brcc	.-30     	; 0x2b9c <__divsf3_pse+0x94>
    2bba:	e0 95       	com	r30
    2bbc:	08 95       	ret

00002bbe <__fixunssfsi>:
    2bbe:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__fp_splitA>
    2bc2:	88 f0       	brcs	.+34     	; 0x2be6 <__fixunssfsi+0x28>
    2bc4:	9f 57       	subi	r25, 0x7F	; 127
    2bc6:	98 f0       	brcs	.+38     	; 0x2bee <__fixunssfsi+0x30>
    2bc8:	b9 2f       	mov	r27, r25
    2bca:	99 27       	eor	r25, r25
    2bcc:	b7 51       	subi	r27, 0x17	; 23
    2bce:	b0 f0       	brcs	.+44     	; 0x2bfc <__fixunssfsi+0x3e>
    2bd0:	e1 f0       	breq	.+56     	; 0x2c0a <__fixunssfsi+0x4c>
    2bd2:	66 0f       	add	r22, r22
    2bd4:	77 1f       	adc	r23, r23
    2bd6:	88 1f       	adc	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	1a f0       	brmi	.+6      	; 0x2be2 <__fixunssfsi+0x24>
    2bdc:	ba 95       	dec	r27
    2bde:	c9 f7       	brne	.-14     	; 0x2bd2 <__fixunssfsi+0x14>
    2be0:	14 c0       	rjmp	.+40     	; 0x2c0a <__fixunssfsi+0x4c>
    2be2:	b1 30       	cpi	r27, 0x01	; 1
    2be4:	91 f0       	breq	.+36     	; 0x2c0a <__fixunssfsi+0x4c>
    2be6:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__fp_zero>
    2bea:	b1 e0       	ldi	r27, 0x01	; 1
    2bec:	08 95       	ret
    2bee:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__fp_zero>
    2bf2:	67 2f       	mov	r22, r23
    2bf4:	78 2f       	mov	r23, r24
    2bf6:	88 27       	eor	r24, r24
    2bf8:	b8 5f       	subi	r27, 0xF8	; 248
    2bfa:	39 f0       	breq	.+14     	; 0x2c0a <__fixunssfsi+0x4c>
    2bfc:	b9 3f       	cpi	r27, 0xF9	; 249
    2bfe:	cc f3       	brlt	.-14     	; 0x2bf2 <__fixunssfsi+0x34>
    2c00:	86 95       	lsr	r24
    2c02:	77 95       	ror	r23
    2c04:	67 95       	ror	r22
    2c06:	b3 95       	inc	r27
    2c08:	d9 f7       	brne	.-10     	; 0x2c00 <__fixunssfsi+0x42>
    2c0a:	3e f4       	brtc	.+14     	; 0x2c1a <__fixunssfsi+0x5c>
    2c0c:	90 95       	com	r25
    2c0e:	80 95       	com	r24
    2c10:	70 95       	com	r23
    2c12:	61 95       	neg	r22
    2c14:	7f 4f       	sbci	r23, 0xFF	; 255
    2c16:	8f 4f       	sbci	r24, 0xFF	; 255
    2c18:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1a:	08 95       	ret

00002c1c <__floatunsisf>:
    2c1c:	e8 94       	clt
    2c1e:	09 c0       	rjmp	.+18     	; 0x2c32 <__floatsisf+0x12>

00002c20 <__floatsisf>:
    2c20:	97 fb       	bst	r25, 7
    2c22:	3e f4       	brtc	.+14     	; 0x2c32 <__floatsisf+0x12>
    2c24:	90 95       	com	r25
    2c26:	80 95       	com	r24
    2c28:	70 95       	com	r23
    2c2a:	61 95       	neg	r22
    2c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c2e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c30:	9f 4f       	sbci	r25, 0xFF	; 255
    2c32:	99 23       	and	r25, r25
    2c34:	a9 f0       	breq	.+42     	; 0x2c60 <__floatsisf+0x40>
    2c36:	f9 2f       	mov	r31, r25
    2c38:	96 e9       	ldi	r25, 0x96	; 150
    2c3a:	bb 27       	eor	r27, r27
    2c3c:	93 95       	inc	r25
    2c3e:	f6 95       	lsr	r31
    2c40:	87 95       	ror	r24
    2c42:	77 95       	ror	r23
    2c44:	67 95       	ror	r22
    2c46:	b7 95       	ror	r27
    2c48:	f1 11       	cpse	r31, r1
    2c4a:	f8 cf       	rjmp	.-16     	; 0x2c3c <__floatsisf+0x1c>
    2c4c:	fa f4       	brpl	.+62     	; 0x2c8c <__floatsisf+0x6c>
    2c4e:	bb 0f       	add	r27, r27
    2c50:	11 f4       	brne	.+4      	; 0x2c56 <__floatsisf+0x36>
    2c52:	60 ff       	sbrs	r22, 0
    2c54:	1b c0       	rjmp	.+54     	; 0x2c8c <__floatsisf+0x6c>
    2c56:	6f 5f       	subi	r22, 0xFF	; 255
    2c58:	7f 4f       	sbci	r23, 0xFF	; 255
    2c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5e:	16 c0       	rjmp	.+44     	; 0x2c8c <__floatsisf+0x6c>
    2c60:	88 23       	and	r24, r24
    2c62:	11 f0       	breq	.+4      	; 0x2c68 <__floatsisf+0x48>
    2c64:	96 e9       	ldi	r25, 0x96	; 150
    2c66:	11 c0       	rjmp	.+34     	; 0x2c8a <__floatsisf+0x6a>
    2c68:	77 23       	and	r23, r23
    2c6a:	21 f0       	breq	.+8      	; 0x2c74 <__floatsisf+0x54>
    2c6c:	9e e8       	ldi	r25, 0x8E	; 142
    2c6e:	87 2f       	mov	r24, r23
    2c70:	76 2f       	mov	r23, r22
    2c72:	05 c0       	rjmp	.+10     	; 0x2c7e <__floatsisf+0x5e>
    2c74:	66 23       	and	r22, r22
    2c76:	71 f0       	breq	.+28     	; 0x2c94 <__floatsisf+0x74>
    2c78:	96 e8       	ldi	r25, 0x86	; 134
    2c7a:	86 2f       	mov	r24, r22
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	2a f0       	brmi	.+10     	; 0x2c8c <__floatsisf+0x6c>
    2c82:	9a 95       	dec	r25
    2c84:	66 0f       	add	r22, r22
    2c86:	77 1f       	adc	r23, r23
    2c88:	88 1f       	adc	r24, r24
    2c8a:	da f7       	brpl	.-10     	; 0x2c82 <__floatsisf+0x62>
    2c8c:	88 0f       	add	r24, r24
    2c8e:	96 95       	lsr	r25
    2c90:	87 95       	ror	r24
    2c92:	97 f9       	bld	r25, 7
    2c94:	08 95       	ret

00002c96 <__fp_cmp>:
    2c96:	99 0f       	add	r25, r25
    2c98:	00 08       	sbc	r0, r0
    2c9a:	55 0f       	add	r21, r21
    2c9c:	aa 0b       	sbc	r26, r26
    2c9e:	e0 e8       	ldi	r30, 0x80	; 128
    2ca0:	fe ef       	ldi	r31, 0xFE	; 254
    2ca2:	16 16       	cp	r1, r22
    2ca4:	17 06       	cpc	r1, r23
    2ca6:	e8 07       	cpc	r30, r24
    2ca8:	f9 07       	cpc	r31, r25
    2caa:	c0 f0       	brcs	.+48     	; 0x2cdc <__fp_cmp+0x46>
    2cac:	12 16       	cp	r1, r18
    2cae:	13 06       	cpc	r1, r19
    2cb0:	e4 07       	cpc	r30, r20
    2cb2:	f5 07       	cpc	r31, r21
    2cb4:	98 f0       	brcs	.+38     	; 0x2cdc <__fp_cmp+0x46>
    2cb6:	62 1b       	sub	r22, r18
    2cb8:	73 0b       	sbc	r23, r19
    2cba:	84 0b       	sbc	r24, r20
    2cbc:	95 0b       	sbc	r25, r21
    2cbe:	39 f4       	brne	.+14     	; 0x2cce <__fp_cmp+0x38>
    2cc0:	0a 26       	eor	r0, r26
    2cc2:	61 f0       	breq	.+24     	; 0x2cdc <__fp_cmp+0x46>
    2cc4:	23 2b       	or	r18, r19
    2cc6:	24 2b       	or	r18, r20
    2cc8:	25 2b       	or	r18, r21
    2cca:	21 f4       	brne	.+8      	; 0x2cd4 <__fp_cmp+0x3e>
    2ccc:	08 95       	ret
    2cce:	0a 26       	eor	r0, r26
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <__fp_cmp+0x3e>
    2cd2:	a1 40       	sbci	r26, 0x01	; 1
    2cd4:	a6 95       	lsr	r26
    2cd6:	8f ef       	ldi	r24, 0xFF	; 255
    2cd8:	81 1d       	adc	r24, r1
    2cda:	81 1d       	adc	r24, r1
    2cdc:	08 95       	ret

00002cde <__fp_inf>:
    2cde:	97 f9       	bld	r25, 7
    2ce0:	9f 67       	ori	r25, 0x7F	; 127
    2ce2:	80 e8       	ldi	r24, 0x80	; 128
    2ce4:	70 e0       	ldi	r23, 0x00	; 0
    2ce6:	60 e0       	ldi	r22, 0x00	; 0
    2ce8:	08 95       	ret

00002cea <__fp_nan>:
    2cea:	9f ef       	ldi	r25, 0xFF	; 255
    2cec:	80 ec       	ldi	r24, 0xC0	; 192
    2cee:	08 95       	ret

00002cf0 <__fp_pscA>:
    2cf0:	00 24       	eor	r0, r0
    2cf2:	0a 94       	dec	r0
    2cf4:	16 16       	cp	r1, r22
    2cf6:	17 06       	cpc	r1, r23
    2cf8:	18 06       	cpc	r1, r24
    2cfa:	09 06       	cpc	r0, r25
    2cfc:	08 95       	ret

00002cfe <__fp_pscB>:
    2cfe:	00 24       	eor	r0, r0
    2d00:	0a 94       	dec	r0
    2d02:	12 16       	cp	r1, r18
    2d04:	13 06       	cpc	r1, r19
    2d06:	14 06       	cpc	r1, r20
    2d08:	05 06       	cpc	r0, r21
    2d0a:	08 95       	ret

00002d0c <__fp_round>:
    2d0c:	09 2e       	mov	r0, r25
    2d0e:	03 94       	inc	r0
    2d10:	00 0c       	add	r0, r0
    2d12:	11 f4       	brne	.+4      	; 0x2d18 <__fp_round+0xc>
    2d14:	88 23       	and	r24, r24
    2d16:	52 f0       	brmi	.+20     	; 0x2d2c <__fp_round+0x20>
    2d18:	bb 0f       	add	r27, r27
    2d1a:	40 f4       	brcc	.+16     	; 0x2d2c <__fp_round+0x20>
    2d1c:	bf 2b       	or	r27, r31
    2d1e:	11 f4       	brne	.+4      	; 0x2d24 <__fp_round+0x18>
    2d20:	60 ff       	sbrs	r22, 0
    2d22:	04 c0       	rjmp	.+8      	; 0x2d2c <__fp_round+0x20>
    2d24:	6f 5f       	subi	r22, 0xFF	; 255
    2d26:	7f 4f       	sbci	r23, 0xFF	; 255
    2d28:	8f 4f       	sbci	r24, 0xFF	; 255
    2d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2c:	08 95       	ret

00002d2e <__fp_split3>:
    2d2e:	57 fd       	sbrc	r21, 7
    2d30:	90 58       	subi	r25, 0x80	; 128
    2d32:	44 0f       	add	r20, r20
    2d34:	55 1f       	adc	r21, r21
    2d36:	59 f0       	breq	.+22     	; 0x2d4e <__fp_splitA+0x10>
    2d38:	5f 3f       	cpi	r21, 0xFF	; 255
    2d3a:	71 f0       	breq	.+28     	; 0x2d58 <__fp_splitA+0x1a>
    2d3c:	47 95       	ror	r20

00002d3e <__fp_splitA>:
    2d3e:	88 0f       	add	r24, r24
    2d40:	97 fb       	bst	r25, 7
    2d42:	99 1f       	adc	r25, r25
    2d44:	61 f0       	breq	.+24     	; 0x2d5e <__fp_splitA+0x20>
    2d46:	9f 3f       	cpi	r25, 0xFF	; 255
    2d48:	79 f0       	breq	.+30     	; 0x2d68 <__fp_splitA+0x2a>
    2d4a:	87 95       	ror	r24
    2d4c:	08 95       	ret
    2d4e:	12 16       	cp	r1, r18
    2d50:	13 06       	cpc	r1, r19
    2d52:	14 06       	cpc	r1, r20
    2d54:	55 1f       	adc	r21, r21
    2d56:	f2 cf       	rjmp	.-28     	; 0x2d3c <__fp_split3+0xe>
    2d58:	46 95       	lsr	r20
    2d5a:	f1 df       	rcall	.-30     	; 0x2d3e <__fp_splitA>
    2d5c:	08 c0       	rjmp	.+16     	; 0x2d6e <__fp_splitA+0x30>
    2d5e:	16 16       	cp	r1, r22
    2d60:	17 06       	cpc	r1, r23
    2d62:	18 06       	cpc	r1, r24
    2d64:	99 1f       	adc	r25, r25
    2d66:	f1 cf       	rjmp	.-30     	; 0x2d4a <__fp_splitA+0xc>
    2d68:	86 95       	lsr	r24
    2d6a:	71 05       	cpc	r23, r1
    2d6c:	61 05       	cpc	r22, r1
    2d6e:	08 94       	sec
    2d70:	08 95       	ret

00002d72 <__fp_zero>:
    2d72:	e8 94       	clt

00002d74 <__fp_szero>:
    2d74:	bb 27       	eor	r27, r27
    2d76:	66 27       	eor	r22, r22
    2d78:	77 27       	eor	r23, r23
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	97 f9       	bld	r25, 7
    2d7e:	08 95       	ret

00002d80 <__gesf2>:
    2d80:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__fp_cmp>
    2d84:	08 f4       	brcc	.+2      	; 0x2d88 <__gesf2+0x8>
    2d86:	8f ef       	ldi	r24, 0xFF	; 255
    2d88:	08 95       	ret

00002d8a <__mulsf3>:
    2d8a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__mulsf3x>
    2d8e:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__fp_round>
    2d92:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__fp_pscA>
    2d96:	38 f0       	brcs	.+14     	; 0x2da6 <__mulsf3+0x1c>
    2d98:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <__fp_pscB>
    2d9c:	20 f0       	brcs	.+8      	; 0x2da6 <__mulsf3+0x1c>
    2d9e:	95 23       	and	r25, r21
    2da0:	11 f0       	breq	.+4      	; 0x2da6 <__mulsf3+0x1c>
    2da2:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__fp_inf>
    2da6:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__fp_nan>
    2daa:	11 24       	eor	r1, r1
    2dac:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__fp_szero>

00002db0 <__mulsf3x>:
    2db0:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__fp_split3>
    2db4:	70 f3       	brcs	.-36     	; 0x2d92 <__mulsf3+0x8>

00002db6 <__mulsf3_pse>:
    2db6:	95 9f       	mul	r25, r21
    2db8:	c1 f3       	breq	.-16     	; 0x2daa <__mulsf3+0x20>
    2dba:	95 0f       	add	r25, r21
    2dbc:	50 e0       	ldi	r21, 0x00	; 0
    2dbe:	55 1f       	adc	r21, r21
    2dc0:	62 9f       	mul	r22, r18
    2dc2:	f0 01       	movw	r30, r0
    2dc4:	72 9f       	mul	r23, r18
    2dc6:	bb 27       	eor	r27, r27
    2dc8:	f0 0d       	add	r31, r0
    2dca:	b1 1d       	adc	r27, r1
    2dcc:	63 9f       	mul	r22, r19
    2dce:	aa 27       	eor	r26, r26
    2dd0:	f0 0d       	add	r31, r0
    2dd2:	b1 1d       	adc	r27, r1
    2dd4:	aa 1f       	adc	r26, r26
    2dd6:	64 9f       	mul	r22, r20
    2dd8:	66 27       	eor	r22, r22
    2dda:	b0 0d       	add	r27, r0
    2ddc:	a1 1d       	adc	r26, r1
    2dde:	66 1f       	adc	r22, r22
    2de0:	82 9f       	mul	r24, r18
    2de2:	22 27       	eor	r18, r18
    2de4:	b0 0d       	add	r27, r0
    2de6:	a1 1d       	adc	r26, r1
    2de8:	62 1f       	adc	r22, r18
    2dea:	73 9f       	mul	r23, r19
    2dec:	b0 0d       	add	r27, r0
    2dee:	a1 1d       	adc	r26, r1
    2df0:	62 1f       	adc	r22, r18
    2df2:	83 9f       	mul	r24, r19
    2df4:	a0 0d       	add	r26, r0
    2df6:	61 1d       	adc	r22, r1
    2df8:	22 1f       	adc	r18, r18
    2dfa:	74 9f       	mul	r23, r20
    2dfc:	33 27       	eor	r19, r19
    2dfe:	a0 0d       	add	r26, r0
    2e00:	61 1d       	adc	r22, r1
    2e02:	23 1f       	adc	r18, r19
    2e04:	84 9f       	mul	r24, r20
    2e06:	60 0d       	add	r22, r0
    2e08:	21 1d       	adc	r18, r1
    2e0a:	82 2f       	mov	r24, r18
    2e0c:	76 2f       	mov	r23, r22
    2e0e:	6a 2f       	mov	r22, r26
    2e10:	11 24       	eor	r1, r1
    2e12:	9f 57       	subi	r25, 0x7F	; 127
    2e14:	50 40       	sbci	r21, 0x00	; 0
    2e16:	9a f0       	brmi	.+38     	; 0x2e3e <__mulsf3_pse+0x88>
    2e18:	f1 f0       	breq	.+60     	; 0x2e56 <__mulsf3_pse+0xa0>
    2e1a:	88 23       	and	r24, r24
    2e1c:	4a f0       	brmi	.+18     	; 0x2e30 <__mulsf3_pse+0x7a>
    2e1e:	ee 0f       	add	r30, r30
    2e20:	ff 1f       	adc	r31, r31
    2e22:	bb 1f       	adc	r27, r27
    2e24:	66 1f       	adc	r22, r22
    2e26:	77 1f       	adc	r23, r23
    2e28:	88 1f       	adc	r24, r24
    2e2a:	91 50       	subi	r25, 0x01	; 1
    2e2c:	50 40       	sbci	r21, 0x00	; 0
    2e2e:	a9 f7       	brne	.-22     	; 0x2e1a <__mulsf3_pse+0x64>
    2e30:	9e 3f       	cpi	r25, 0xFE	; 254
    2e32:	51 05       	cpc	r21, r1
    2e34:	80 f0       	brcs	.+32     	; 0x2e56 <__mulsf3_pse+0xa0>
    2e36:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__fp_inf>
    2e3a:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__fp_szero>
    2e3e:	5f 3f       	cpi	r21, 0xFF	; 255
    2e40:	e4 f3       	brlt	.-8      	; 0x2e3a <__mulsf3_pse+0x84>
    2e42:	98 3e       	cpi	r25, 0xE8	; 232
    2e44:	d4 f3       	brlt	.-12     	; 0x2e3a <__mulsf3_pse+0x84>
    2e46:	86 95       	lsr	r24
    2e48:	77 95       	ror	r23
    2e4a:	67 95       	ror	r22
    2e4c:	b7 95       	ror	r27
    2e4e:	f7 95       	ror	r31
    2e50:	e7 95       	ror	r30
    2e52:	9f 5f       	subi	r25, 0xFF	; 255
    2e54:	c1 f7       	brne	.-16     	; 0x2e46 <__mulsf3_pse+0x90>
    2e56:	fe 2b       	or	r31, r30
    2e58:	88 0f       	add	r24, r24
    2e5a:	91 1d       	adc	r25, r1
    2e5c:	96 95       	lsr	r25
    2e5e:	87 95       	ror	r24
    2e60:	97 f9       	bld	r25, 7
    2e62:	08 95       	ret

00002e64 <round>:
    2e64:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__fp_splitA>
    2e68:	e8 f0       	brcs	.+58     	; 0x2ea4 <round+0x40>
    2e6a:	9e 37       	cpi	r25, 0x7E	; 126
    2e6c:	e8 f0       	brcs	.+58     	; 0x2ea8 <round+0x44>
    2e6e:	96 39       	cpi	r25, 0x96	; 150
    2e70:	b8 f4       	brcc	.+46     	; 0x2ea0 <round+0x3c>
    2e72:	9e 38       	cpi	r25, 0x8E	; 142
    2e74:	48 f4       	brcc	.+18     	; 0x2e88 <round+0x24>
    2e76:	67 2f       	mov	r22, r23
    2e78:	78 2f       	mov	r23, r24
    2e7a:	88 27       	eor	r24, r24
    2e7c:	98 5f       	subi	r25, 0xF8	; 248
    2e7e:	f9 cf       	rjmp	.-14     	; 0x2e72 <round+0xe>
    2e80:	86 95       	lsr	r24
    2e82:	77 95       	ror	r23
    2e84:	67 95       	ror	r22
    2e86:	93 95       	inc	r25
    2e88:	95 39       	cpi	r25, 0x95	; 149
    2e8a:	d0 f3       	brcs	.-12     	; 0x2e80 <round+0x1c>
    2e8c:	b6 2f       	mov	r27, r22
    2e8e:	b1 70       	andi	r27, 0x01	; 1
    2e90:	6b 0f       	add	r22, r27
    2e92:	71 1d       	adc	r23, r1
    2e94:	81 1d       	adc	r24, r1
    2e96:	20 f4       	brcc	.+8      	; 0x2ea0 <round+0x3c>
    2e98:	87 95       	ror	r24
    2e9a:	77 95       	ror	r23
    2e9c:	67 95       	ror	r22
    2e9e:	93 95       	inc	r25
    2ea0:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__fp_mintl>
    2ea4:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__fp_mpack>
    2ea8:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__fp_szero>

00002eac <__fp_mintl>:
    2eac:	88 23       	and	r24, r24
    2eae:	71 f4       	brne	.+28     	; 0x2ecc <__fp_mintl+0x20>
    2eb0:	77 23       	and	r23, r23
    2eb2:	21 f0       	breq	.+8      	; 0x2ebc <__fp_mintl+0x10>
    2eb4:	98 50       	subi	r25, 0x08	; 8
    2eb6:	87 2b       	or	r24, r23
    2eb8:	76 2f       	mov	r23, r22
    2eba:	07 c0       	rjmp	.+14     	; 0x2eca <__fp_mintl+0x1e>
    2ebc:	66 23       	and	r22, r22
    2ebe:	11 f4       	brne	.+4      	; 0x2ec4 <__fp_mintl+0x18>
    2ec0:	99 27       	eor	r25, r25
    2ec2:	0d c0       	rjmp	.+26     	; 0x2ede <__fp_mintl+0x32>
    2ec4:	90 51       	subi	r25, 0x10	; 16
    2ec6:	86 2b       	or	r24, r22
    2ec8:	70 e0       	ldi	r23, 0x00	; 0
    2eca:	60 e0       	ldi	r22, 0x00	; 0
    2ecc:	2a f0       	brmi	.+10     	; 0x2ed8 <__fp_mintl+0x2c>
    2ece:	9a 95       	dec	r25
    2ed0:	66 0f       	add	r22, r22
    2ed2:	77 1f       	adc	r23, r23
    2ed4:	88 1f       	adc	r24, r24
    2ed6:	da f7       	brpl	.-10     	; 0x2ece <__fp_mintl+0x22>
    2ed8:	88 0f       	add	r24, r24
    2eda:	96 95       	lsr	r25
    2edc:	87 95       	ror	r24
    2ede:	97 f9       	bld	r25, 7
    2ee0:	08 95       	ret

00002ee2 <__fp_mpack>:
    2ee2:	9f 3f       	cpi	r25, 0xFF	; 255
    2ee4:	31 f0       	breq	.+12     	; 0x2ef2 <__fp_mpack_finite+0xc>

00002ee6 <__fp_mpack_finite>:
    2ee6:	91 50       	subi	r25, 0x01	; 1
    2ee8:	20 f4       	brcc	.+8      	; 0x2ef2 <__fp_mpack_finite+0xc>
    2eea:	87 95       	ror	r24
    2eec:	77 95       	ror	r23
    2eee:	67 95       	ror	r22
    2ef0:	b7 95       	ror	r27
    2ef2:	88 0f       	add	r24, r24
    2ef4:	91 1d       	adc	r25, r1
    2ef6:	96 95       	lsr	r25
    2ef8:	87 95       	ror	r24
    2efa:	97 f9       	bld	r25, 7
    2efc:	08 95       	ret

00002efe <__mulsi3>:
    2efe:	db 01       	movw	r26, r22
    2f00:	8f 93       	push	r24
    2f02:	9f 93       	push	r25
    2f04:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__muluhisi3>
    2f08:	bf 91       	pop	r27
    2f0a:	af 91       	pop	r26
    2f0c:	a2 9f       	mul	r26, r18
    2f0e:	80 0d       	add	r24, r0
    2f10:	91 1d       	adc	r25, r1
    2f12:	a3 9f       	mul	r26, r19
    2f14:	90 0d       	add	r25, r0
    2f16:	b2 9f       	mul	r27, r18
    2f18:	90 0d       	add	r25, r0
    2f1a:	11 24       	eor	r1, r1
    2f1c:	08 95       	ret

00002f1e <__divmodsi4>:
    2f1e:	05 2e       	mov	r0, r21
    2f20:	97 fb       	bst	r25, 7
    2f22:	1e f4       	brtc	.+6      	; 0x2f2a <__divmodsi4+0xc>
    2f24:	00 94       	com	r0
    2f26:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <__negsi2>
    2f2a:	57 fd       	sbrc	r21, 7
    2f2c:	07 d0       	rcall	.+14     	; 0x2f3c <__divmodsi4_neg2>
    2f2e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <__udivmodsi4>
    2f32:	07 fc       	sbrc	r0, 7
    2f34:	03 d0       	rcall	.+6      	; 0x2f3c <__divmodsi4_neg2>
    2f36:	4e f4       	brtc	.+18     	; 0x2f4a <__divmodsi4_exit>
    2f38:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__negsi2>

00002f3c <__divmodsi4_neg2>:
    2f3c:	50 95       	com	r21
    2f3e:	40 95       	com	r20
    2f40:	30 95       	com	r19
    2f42:	21 95       	neg	r18
    2f44:	3f 4f       	sbci	r19, 0xFF	; 255
    2f46:	4f 4f       	sbci	r20, 0xFF	; 255
    2f48:	5f 4f       	sbci	r21, 0xFF	; 255

00002f4a <__divmodsi4_exit>:
    2f4a:	08 95       	ret

00002f4c <__negsi2>:
    2f4c:	90 95       	com	r25
    2f4e:	80 95       	com	r24
    2f50:	70 95       	com	r23
    2f52:	61 95       	neg	r22
    2f54:	7f 4f       	sbci	r23, 0xFF	; 255
    2f56:	8f 4f       	sbci	r24, 0xFF	; 255
    2f58:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5a:	08 95       	ret

00002f5c <__tablejump2__>:
    2f5c:	ee 0f       	add	r30, r30
    2f5e:	ff 1f       	adc	r31, r31
    2f60:	05 90       	lpm	r0, Z+
    2f62:	f4 91       	lpm	r31, Z
    2f64:	e0 2d       	mov	r30, r0
    2f66:	09 94       	ijmp

00002f68 <__umulhisi3>:
    2f68:	a2 9f       	mul	r26, r18
    2f6a:	b0 01       	movw	r22, r0
    2f6c:	b3 9f       	mul	r27, r19
    2f6e:	c0 01       	movw	r24, r0
    2f70:	a3 9f       	mul	r26, r19
    2f72:	70 0d       	add	r23, r0
    2f74:	81 1d       	adc	r24, r1
    2f76:	11 24       	eor	r1, r1
    2f78:	91 1d       	adc	r25, r1
    2f7a:	b2 9f       	mul	r27, r18
    2f7c:	70 0d       	add	r23, r0
    2f7e:	81 1d       	adc	r24, r1
    2f80:	11 24       	eor	r1, r1
    2f82:	91 1d       	adc	r25, r1
    2f84:	08 95       	ret

00002f86 <__muluhisi3>:
    2f86:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__umulhisi3>
    2f8a:	a5 9f       	mul	r26, r21
    2f8c:	90 0d       	add	r25, r0
    2f8e:	b4 9f       	mul	r27, r20
    2f90:	90 0d       	add	r25, r0
    2f92:	a4 9f       	mul	r26, r20
    2f94:	80 0d       	add	r24, r0
    2f96:	91 1d       	adc	r25, r1
    2f98:	11 24       	eor	r1, r1
    2f9a:	08 95       	ret

00002f9c <__udivmodsi4>:
    2f9c:	a1 e2       	ldi	r26, 0x21	; 33
    2f9e:	1a 2e       	mov	r1, r26
    2fa0:	aa 1b       	sub	r26, r26
    2fa2:	bb 1b       	sub	r27, r27
    2fa4:	fd 01       	movw	r30, r26
    2fa6:	0d c0       	rjmp	.+26     	; 0x2fc2 <__udivmodsi4_ep>

00002fa8 <__udivmodsi4_loop>:
    2fa8:	aa 1f       	adc	r26, r26
    2faa:	bb 1f       	adc	r27, r27
    2fac:	ee 1f       	adc	r30, r30
    2fae:	ff 1f       	adc	r31, r31
    2fb0:	a2 17       	cp	r26, r18
    2fb2:	b3 07       	cpc	r27, r19
    2fb4:	e4 07       	cpc	r30, r20
    2fb6:	f5 07       	cpc	r31, r21
    2fb8:	20 f0       	brcs	.+8      	; 0x2fc2 <__udivmodsi4_ep>
    2fba:	a2 1b       	sub	r26, r18
    2fbc:	b3 0b       	sbc	r27, r19
    2fbe:	e4 0b       	sbc	r30, r20
    2fc0:	f5 0b       	sbc	r31, r21

00002fc2 <__udivmodsi4_ep>:
    2fc2:	66 1f       	adc	r22, r22
    2fc4:	77 1f       	adc	r23, r23
    2fc6:	88 1f       	adc	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	1a 94       	dec	r1
    2fcc:	69 f7       	brne	.-38     	; 0x2fa8 <__udivmodsi4_loop>
    2fce:	60 95       	com	r22
    2fd0:	70 95       	com	r23
    2fd2:	80 95       	com	r24
    2fd4:	90 95       	com	r25
    2fd6:	9b 01       	movw	r18, r22
    2fd8:	ac 01       	movw	r20, r24
    2fda:	bd 01       	movw	r22, r26
    2fdc:	cf 01       	movw	r24, r30
    2fde:	08 95       	ret

00002fe0 <strcmp>:
    2fe0:	fb 01       	movw	r30, r22
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	8d 91       	ld	r24, X+
    2fe6:	01 90       	ld	r0, Z+
    2fe8:	80 19       	sub	r24, r0
    2fea:	01 10       	cpse	r0, r1
    2fec:	d9 f3       	breq	.-10     	; 0x2fe4 <strcmp+0x4>
    2fee:	99 0b       	sbc	r25, r25
    2ff0:	08 95       	ret

00002ff2 <sprintf>:
    2ff2:	ae e0       	ldi	r26, 0x0E	; 14
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	ef ef       	ldi	r30, 0xFF	; 255
    2ff8:	f7 e1       	ldi	r31, 0x17	; 23
    2ffa:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__prologue_saves__+0x1c>
    2ffe:	0d 89       	ldd	r16, Y+21	; 0x15
    3000:	1e 89       	ldd	r17, Y+22	; 0x16
    3002:	86 e0       	ldi	r24, 0x06	; 6
    3004:	8c 83       	std	Y+4, r24	; 0x04
    3006:	1a 83       	std	Y+2, r17	; 0x02
    3008:	09 83       	std	Y+1, r16	; 0x01
    300a:	8f ef       	ldi	r24, 0xFF	; 255
    300c:	9f e7       	ldi	r25, 0x7F	; 127
    300e:	9e 83       	std	Y+6, r25	; 0x06
    3010:	8d 83       	std	Y+5, r24	; 0x05
    3012:	ae 01       	movw	r20, r28
    3014:	47 5e       	subi	r20, 0xE7	; 231
    3016:	5f 4f       	sbci	r21, 0xFF	; 255
    3018:	6f 89       	ldd	r22, Y+23	; 0x17
    301a:	78 8d       	ldd	r23, Y+24	; 0x18
    301c:	ce 01       	movw	r24, r28
    301e:	01 96       	adiw	r24, 0x01	; 1
    3020:	0e 94 47 18 	call	0x308e	; 0x308e <vfprintf>
    3024:	ef 81       	ldd	r30, Y+7	; 0x07
    3026:	f8 85       	ldd	r31, Y+8	; 0x08
    3028:	e0 0f       	add	r30, r16
    302a:	f1 1f       	adc	r31, r17
    302c:	10 82       	st	Z, r1
    302e:	2e 96       	adiw	r28, 0x0e	; 14
    3030:	e4 e0       	ldi	r30, 0x04	; 4
    3032:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__epilogue_restores__+0x1c>

00003036 <vsnprintf>:
    3036:	ae e0       	ldi	r26, 0x0E	; 14
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	e1 e2       	ldi	r30, 0x21	; 33
    303c:	f8 e1       	ldi	r31, 0x18	; 24
    303e:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__prologue_saves__+0x1c>
    3042:	8c 01       	movw	r16, r24
    3044:	fa 01       	movw	r30, r20
    3046:	86 e0       	ldi	r24, 0x06	; 6
    3048:	8c 83       	std	Y+4, r24	; 0x04
    304a:	1a 83       	std	Y+2, r17	; 0x02
    304c:	09 83       	std	Y+1, r16	; 0x01
    304e:	77 ff       	sbrs	r23, 7
    3050:	02 c0       	rjmp	.+4      	; 0x3056 <vsnprintf+0x20>
    3052:	60 e0       	ldi	r22, 0x00	; 0
    3054:	70 e8       	ldi	r23, 0x80	; 128
    3056:	cb 01       	movw	r24, r22
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	9e 83       	std	Y+6, r25	; 0x06
    305c:	8d 83       	std	Y+5, r24	; 0x05
    305e:	a9 01       	movw	r20, r18
    3060:	bf 01       	movw	r22, r30
    3062:	ce 01       	movw	r24, r28
    3064:	01 96       	adiw	r24, 0x01	; 1
    3066:	0e 94 47 18 	call	0x308e	; 0x308e <vfprintf>
    306a:	4d 81       	ldd	r20, Y+5	; 0x05
    306c:	5e 81       	ldd	r21, Y+6	; 0x06
    306e:	57 fd       	sbrc	r21, 7
    3070:	0a c0       	rjmp	.+20     	; 0x3086 <vsnprintf+0x50>
    3072:	2f 81       	ldd	r18, Y+7	; 0x07
    3074:	38 85       	ldd	r19, Y+8	; 0x08
    3076:	42 17       	cp	r20, r18
    3078:	53 07       	cpc	r21, r19
    307a:	0c f4       	brge	.+2      	; 0x307e <vsnprintf+0x48>
    307c:	9a 01       	movw	r18, r20
    307e:	f8 01       	movw	r30, r16
    3080:	e2 0f       	add	r30, r18
    3082:	f3 1f       	adc	r31, r19
    3084:	10 82       	st	Z, r1
    3086:	2e 96       	adiw	r28, 0x0e	; 14
    3088:	e4 e0       	ldi	r30, 0x04	; 4
    308a:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__epilogue_restores__+0x1c>

0000308e <vfprintf>:
    308e:	ab e0       	ldi	r26, 0x0B	; 11
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	ed e4       	ldi	r30, 0x4D	; 77
    3094:	f8 e1       	ldi	r31, 0x18	; 24
    3096:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__prologue_saves__>
    309a:	6c 01       	movw	r12, r24
    309c:	7b 01       	movw	r14, r22
    309e:	8a 01       	movw	r16, r20
    30a0:	fc 01       	movw	r30, r24
    30a2:	17 82       	std	Z+7, r1	; 0x07
    30a4:	16 82       	std	Z+6, r1	; 0x06
    30a6:	83 81       	ldd	r24, Z+3	; 0x03
    30a8:	81 ff       	sbrs	r24, 1
    30aa:	cc c1       	rjmp	.+920    	; 0x3444 <vfprintf+0x3b6>
    30ac:	ce 01       	movw	r24, r28
    30ae:	01 96       	adiw	r24, 0x01	; 1
    30b0:	3c 01       	movw	r6, r24
    30b2:	f6 01       	movw	r30, r12
    30b4:	93 81       	ldd	r25, Z+3	; 0x03
    30b6:	f7 01       	movw	r30, r14
    30b8:	93 fd       	sbrc	r25, 3
    30ba:	85 91       	lpm	r24, Z+
    30bc:	93 ff       	sbrs	r25, 3
    30be:	81 91       	ld	r24, Z+
    30c0:	7f 01       	movw	r14, r30
    30c2:	88 23       	and	r24, r24
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <vfprintf+0x3a>
    30c6:	ba c1       	rjmp	.+884    	; 0x343c <vfprintf+0x3ae>
    30c8:	85 32       	cpi	r24, 0x25	; 37
    30ca:	39 f4       	brne	.+14     	; 0x30da <vfprintf+0x4c>
    30cc:	93 fd       	sbrc	r25, 3
    30ce:	85 91       	lpm	r24, Z+
    30d0:	93 ff       	sbrs	r25, 3
    30d2:	81 91       	ld	r24, Z+
    30d4:	7f 01       	movw	r14, r30
    30d6:	85 32       	cpi	r24, 0x25	; 37
    30d8:	29 f4       	brne	.+10     	; 0x30e4 <vfprintf+0x56>
    30da:	b6 01       	movw	r22, r12
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	0e 94 3e 1a 	call	0x347c	; 0x347c <fputc>
    30e2:	e7 cf       	rjmp	.-50     	; 0x30b2 <vfprintf+0x24>
    30e4:	91 2c       	mov	r9, r1
    30e6:	21 2c       	mov	r2, r1
    30e8:	31 2c       	mov	r3, r1
    30ea:	ff e1       	ldi	r31, 0x1F	; 31
    30ec:	f3 15       	cp	r31, r3
    30ee:	d8 f0       	brcs	.+54     	; 0x3126 <vfprintf+0x98>
    30f0:	8b 32       	cpi	r24, 0x2B	; 43
    30f2:	79 f0       	breq	.+30     	; 0x3112 <vfprintf+0x84>
    30f4:	38 f4       	brcc	.+14     	; 0x3104 <vfprintf+0x76>
    30f6:	80 32       	cpi	r24, 0x20	; 32
    30f8:	79 f0       	breq	.+30     	; 0x3118 <vfprintf+0x8a>
    30fa:	83 32       	cpi	r24, 0x23	; 35
    30fc:	a1 f4       	brne	.+40     	; 0x3126 <vfprintf+0x98>
    30fe:	23 2d       	mov	r18, r3
    3100:	20 61       	ori	r18, 0x10	; 16
    3102:	1d c0       	rjmp	.+58     	; 0x313e <vfprintf+0xb0>
    3104:	8d 32       	cpi	r24, 0x2D	; 45
    3106:	61 f0       	breq	.+24     	; 0x3120 <vfprintf+0x92>
    3108:	80 33       	cpi	r24, 0x30	; 48
    310a:	69 f4       	brne	.+26     	; 0x3126 <vfprintf+0x98>
    310c:	23 2d       	mov	r18, r3
    310e:	21 60       	ori	r18, 0x01	; 1
    3110:	16 c0       	rjmp	.+44     	; 0x313e <vfprintf+0xb0>
    3112:	83 2d       	mov	r24, r3
    3114:	82 60       	ori	r24, 0x02	; 2
    3116:	38 2e       	mov	r3, r24
    3118:	e3 2d       	mov	r30, r3
    311a:	e4 60       	ori	r30, 0x04	; 4
    311c:	3e 2e       	mov	r3, r30
    311e:	2a c0       	rjmp	.+84     	; 0x3174 <vfprintf+0xe6>
    3120:	f3 2d       	mov	r31, r3
    3122:	f8 60       	ori	r31, 0x08	; 8
    3124:	1d c0       	rjmp	.+58     	; 0x3160 <vfprintf+0xd2>
    3126:	37 fc       	sbrc	r3, 7
    3128:	2d c0       	rjmp	.+90     	; 0x3184 <vfprintf+0xf6>
    312a:	20 ed       	ldi	r18, 0xD0	; 208
    312c:	28 0f       	add	r18, r24
    312e:	2a 30       	cpi	r18, 0x0A	; 10
    3130:	40 f0       	brcs	.+16     	; 0x3142 <vfprintf+0xb4>
    3132:	8e 32       	cpi	r24, 0x2E	; 46
    3134:	b9 f4       	brne	.+46     	; 0x3164 <vfprintf+0xd6>
    3136:	36 fc       	sbrc	r3, 6
    3138:	81 c1       	rjmp	.+770    	; 0x343c <vfprintf+0x3ae>
    313a:	23 2d       	mov	r18, r3
    313c:	20 64       	ori	r18, 0x40	; 64
    313e:	32 2e       	mov	r3, r18
    3140:	19 c0       	rjmp	.+50     	; 0x3174 <vfprintf+0xe6>
    3142:	36 fe       	sbrs	r3, 6
    3144:	06 c0       	rjmp	.+12     	; 0x3152 <vfprintf+0xc4>
    3146:	8a e0       	ldi	r24, 0x0A	; 10
    3148:	98 9e       	mul	r9, r24
    314a:	20 0d       	add	r18, r0
    314c:	11 24       	eor	r1, r1
    314e:	92 2e       	mov	r9, r18
    3150:	11 c0       	rjmp	.+34     	; 0x3174 <vfprintf+0xe6>
    3152:	ea e0       	ldi	r30, 0x0A	; 10
    3154:	2e 9e       	mul	r2, r30
    3156:	20 0d       	add	r18, r0
    3158:	11 24       	eor	r1, r1
    315a:	22 2e       	mov	r2, r18
    315c:	f3 2d       	mov	r31, r3
    315e:	f0 62       	ori	r31, 0x20	; 32
    3160:	3f 2e       	mov	r3, r31
    3162:	08 c0       	rjmp	.+16     	; 0x3174 <vfprintf+0xe6>
    3164:	8c 36       	cpi	r24, 0x6C	; 108
    3166:	21 f4       	brne	.+8      	; 0x3170 <vfprintf+0xe2>
    3168:	83 2d       	mov	r24, r3
    316a:	80 68       	ori	r24, 0x80	; 128
    316c:	38 2e       	mov	r3, r24
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <vfprintf+0xe6>
    3170:	88 36       	cpi	r24, 0x68	; 104
    3172:	41 f4       	brne	.+16     	; 0x3184 <vfprintf+0xf6>
    3174:	f7 01       	movw	r30, r14
    3176:	93 fd       	sbrc	r25, 3
    3178:	85 91       	lpm	r24, Z+
    317a:	93 ff       	sbrs	r25, 3
    317c:	81 91       	ld	r24, Z+
    317e:	7f 01       	movw	r14, r30
    3180:	81 11       	cpse	r24, r1
    3182:	b3 cf       	rjmp	.-154    	; 0x30ea <vfprintf+0x5c>
    3184:	98 2f       	mov	r25, r24
    3186:	9f 7d       	andi	r25, 0xDF	; 223
    3188:	95 54       	subi	r25, 0x45	; 69
    318a:	93 30       	cpi	r25, 0x03	; 3
    318c:	28 f4       	brcc	.+10     	; 0x3198 <vfprintf+0x10a>
    318e:	0c 5f       	subi	r16, 0xFC	; 252
    3190:	1f 4f       	sbci	r17, 0xFF	; 255
    3192:	9f e3       	ldi	r25, 0x3F	; 63
    3194:	99 83       	std	Y+1, r25	; 0x01
    3196:	0d c0       	rjmp	.+26     	; 0x31b2 <vfprintf+0x124>
    3198:	83 36       	cpi	r24, 0x63	; 99
    319a:	31 f0       	breq	.+12     	; 0x31a8 <vfprintf+0x11a>
    319c:	83 37       	cpi	r24, 0x73	; 115
    319e:	71 f0       	breq	.+28     	; 0x31bc <vfprintf+0x12e>
    31a0:	83 35       	cpi	r24, 0x53	; 83
    31a2:	09 f0       	breq	.+2      	; 0x31a6 <vfprintf+0x118>
    31a4:	59 c0       	rjmp	.+178    	; 0x3258 <vfprintf+0x1ca>
    31a6:	21 c0       	rjmp	.+66     	; 0x31ea <vfprintf+0x15c>
    31a8:	f8 01       	movw	r30, r16
    31aa:	80 81       	ld	r24, Z
    31ac:	89 83       	std	Y+1, r24	; 0x01
    31ae:	0e 5f       	subi	r16, 0xFE	; 254
    31b0:	1f 4f       	sbci	r17, 0xFF	; 255
    31b2:	88 24       	eor	r8, r8
    31b4:	83 94       	inc	r8
    31b6:	91 2c       	mov	r9, r1
    31b8:	53 01       	movw	r10, r6
    31ba:	13 c0       	rjmp	.+38     	; 0x31e2 <vfprintf+0x154>
    31bc:	28 01       	movw	r4, r16
    31be:	f2 e0       	ldi	r31, 0x02	; 2
    31c0:	4f 0e       	add	r4, r31
    31c2:	51 1c       	adc	r5, r1
    31c4:	f8 01       	movw	r30, r16
    31c6:	a0 80       	ld	r10, Z
    31c8:	b1 80       	ldd	r11, Z+1	; 0x01
    31ca:	36 fe       	sbrs	r3, 6
    31cc:	03 c0       	rjmp	.+6      	; 0x31d4 <vfprintf+0x146>
    31ce:	69 2d       	mov	r22, r9
    31d0:	70 e0       	ldi	r23, 0x00	; 0
    31d2:	02 c0       	rjmp	.+4      	; 0x31d8 <vfprintf+0x14a>
    31d4:	6f ef       	ldi	r22, 0xFF	; 255
    31d6:	7f ef       	ldi	r23, 0xFF	; 255
    31d8:	c5 01       	movw	r24, r10
    31da:	0e 94 33 1a 	call	0x3466	; 0x3466 <strnlen>
    31de:	4c 01       	movw	r8, r24
    31e0:	82 01       	movw	r16, r4
    31e2:	f3 2d       	mov	r31, r3
    31e4:	ff 77       	andi	r31, 0x7F	; 127
    31e6:	3f 2e       	mov	r3, r31
    31e8:	16 c0       	rjmp	.+44     	; 0x3216 <vfprintf+0x188>
    31ea:	28 01       	movw	r4, r16
    31ec:	22 e0       	ldi	r18, 0x02	; 2
    31ee:	42 0e       	add	r4, r18
    31f0:	51 1c       	adc	r5, r1
    31f2:	f8 01       	movw	r30, r16
    31f4:	a0 80       	ld	r10, Z
    31f6:	b1 80       	ldd	r11, Z+1	; 0x01
    31f8:	36 fe       	sbrs	r3, 6
    31fa:	03 c0       	rjmp	.+6      	; 0x3202 <vfprintf+0x174>
    31fc:	69 2d       	mov	r22, r9
    31fe:	70 e0       	ldi	r23, 0x00	; 0
    3200:	02 c0       	rjmp	.+4      	; 0x3206 <vfprintf+0x178>
    3202:	6f ef       	ldi	r22, 0xFF	; 255
    3204:	7f ef       	ldi	r23, 0xFF	; 255
    3206:	c5 01       	movw	r24, r10
    3208:	0e 94 28 1a 	call	0x3450	; 0x3450 <strnlen_P>
    320c:	4c 01       	movw	r8, r24
    320e:	f3 2d       	mov	r31, r3
    3210:	f0 68       	ori	r31, 0x80	; 128
    3212:	3f 2e       	mov	r3, r31
    3214:	82 01       	movw	r16, r4
    3216:	33 fc       	sbrc	r3, 3
    3218:	1b c0       	rjmp	.+54     	; 0x3250 <vfprintf+0x1c2>
    321a:	82 2d       	mov	r24, r2
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	88 16       	cp	r8, r24
    3220:	99 06       	cpc	r9, r25
    3222:	b0 f4       	brcc	.+44     	; 0x3250 <vfprintf+0x1c2>
    3224:	b6 01       	movw	r22, r12
    3226:	80 e2       	ldi	r24, 0x20	; 32
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	0e 94 3e 1a 	call	0x347c	; 0x347c <fputc>
    322e:	2a 94       	dec	r2
    3230:	f4 cf       	rjmp	.-24     	; 0x321a <vfprintf+0x18c>
    3232:	f5 01       	movw	r30, r10
    3234:	37 fc       	sbrc	r3, 7
    3236:	85 91       	lpm	r24, Z+
    3238:	37 fe       	sbrs	r3, 7
    323a:	81 91       	ld	r24, Z+
    323c:	5f 01       	movw	r10, r30
    323e:	b6 01       	movw	r22, r12
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	0e 94 3e 1a 	call	0x347c	; 0x347c <fputc>
    3246:	21 10       	cpse	r2, r1
    3248:	2a 94       	dec	r2
    324a:	21 e0       	ldi	r18, 0x01	; 1
    324c:	82 1a       	sub	r8, r18
    324e:	91 08       	sbc	r9, r1
    3250:	81 14       	cp	r8, r1
    3252:	91 04       	cpc	r9, r1
    3254:	71 f7       	brne	.-36     	; 0x3232 <vfprintf+0x1a4>
    3256:	e8 c0       	rjmp	.+464    	; 0x3428 <vfprintf+0x39a>
    3258:	84 36       	cpi	r24, 0x64	; 100
    325a:	11 f0       	breq	.+4      	; 0x3260 <vfprintf+0x1d2>
    325c:	89 36       	cpi	r24, 0x69	; 105
    325e:	41 f5       	brne	.+80     	; 0x32b0 <vfprintf+0x222>
    3260:	f8 01       	movw	r30, r16
    3262:	37 fe       	sbrs	r3, 7
    3264:	07 c0       	rjmp	.+14     	; 0x3274 <vfprintf+0x1e6>
    3266:	60 81       	ld	r22, Z
    3268:	71 81       	ldd	r23, Z+1	; 0x01
    326a:	82 81       	ldd	r24, Z+2	; 0x02
    326c:	93 81       	ldd	r25, Z+3	; 0x03
    326e:	0c 5f       	subi	r16, 0xFC	; 252
    3270:	1f 4f       	sbci	r17, 0xFF	; 255
    3272:	08 c0       	rjmp	.+16     	; 0x3284 <vfprintf+0x1f6>
    3274:	60 81       	ld	r22, Z
    3276:	71 81       	ldd	r23, Z+1	; 0x01
    3278:	07 2e       	mov	r0, r23
    327a:	00 0c       	add	r0, r0
    327c:	88 0b       	sbc	r24, r24
    327e:	99 0b       	sbc	r25, r25
    3280:	0e 5f       	subi	r16, 0xFE	; 254
    3282:	1f 4f       	sbci	r17, 0xFF	; 255
    3284:	f3 2d       	mov	r31, r3
    3286:	ff 76       	andi	r31, 0x6F	; 111
    3288:	3f 2e       	mov	r3, r31
    328a:	97 ff       	sbrs	r25, 7
    328c:	09 c0       	rjmp	.+18     	; 0x32a0 <vfprintf+0x212>
    328e:	90 95       	com	r25
    3290:	80 95       	com	r24
    3292:	70 95       	com	r23
    3294:	61 95       	neg	r22
    3296:	7f 4f       	sbci	r23, 0xFF	; 255
    3298:	8f 4f       	sbci	r24, 0xFF	; 255
    329a:	9f 4f       	sbci	r25, 0xFF	; 255
    329c:	f0 68       	ori	r31, 0x80	; 128
    329e:	3f 2e       	mov	r3, r31
    32a0:	2a e0       	ldi	r18, 0x0A	; 10
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	a3 01       	movw	r20, r6
    32a6:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__ultoa_invert>
    32aa:	88 2e       	mov	r8, r24
    32ac:	86 18       	sub	r8, r6
    32ae:	45 c0       	rjmp	.+138    	; 0x333a <vfprintf+0x2ac>
    32b0:	85 37       	cpi	r24, 0x75	; 117
    32b2:	31 f4       	brne	.+12     	; 0x32c0 <vfprintf+0x232>
    32b4:	23 2d       	mov	r18, r3
    32b6:	2f 7e       	andi	r18, 0xEF	; 239
    32b8:	b2 2e       	mov	r11, r18
    32ba:	2a e0       	ldi	r18, 0x0A	; 10
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	25 c0       	rjmp	.+74     	; 0x330a <vfprintf+0x27c>
    32c0:	93 2d       	mov	r25, r3
    32c2:	99 7f       	andi	r25, 0xF9	; 249
    32c4:	b9 2e       	mov	r11, r25
    32c6:	8f 36       	cpi	r24, 0x6F	; 111
    32c8:	c1 f0       	breq	.+48     	; 0x32fa <vfprintf+0x26c>
    32ca:	18 f4       	brcc	.+6      	; 0x32d2 <vfprintf+0x244>
    32cc:	88 35       	cpi	r24, 0x58	; 88
    32ce:	79 f0       	breq	.+30     	; 0x32ee <vfprintf+0x260>
    32d0:	b5 c0       	rjmp	.+362    	; 0x343c <vfprintf+0x3ae>
    32d2:	80 37       	cpi	r24, 0x70	; 112
    32d4:	19 f0       	breq	.+6      	; 0x32dc <vfprintf+0x24e>
    32d6:	88 37       	cpi	r24, 0x78	; 120
    32d8:	21 f0       	breq	.+8      	; 0x32e2 <vfprintf+0x254>
    32da:	b0 c0       	rjmp	.+352    	; 0x343c <vfprintf+0x3ae>
    32dc:	e9 2f       	mov	r30, r25
    32de:	e0 61       	ori	r30, 0x10	; 16
    32e0:	be 2e       	mov	r11, r30
    32e2:	b4 fe       	sbrs	r11, 4
    32e4:	0d c0       	rjmp	.+26     	; 0x3300 <vfprintf+0x272>
    32e6:	fb 2d       	mov	r31, r11
    32e8:	f4 60       	ori	r31, 0x04	; 4
    32ea:	bf 2e       	mov	r11, r31
    32ec:	09 c0       	rjmp	.+18     	; 0x3300 <vfprintf+0x272>
    32ee:	34 fe       	sbrs	r3, 4
    32f0:	0a c0       	rjmp	.+20     	; 0x3306 <vfprintf+0x278>
    32f2:	29 2f       	mov	r18, r25
    32f4:	26 60       	ori	r18, 0x06	; 6
    32f6:	b2 2e       	mov	r11, r18
    32f8:	06 c0       	rjmp	.+12     	; 0x3306 <vfprintf+0x278>
    32fa:	28 e0       	ldi	r18, 0x08	; 8
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	05 c0       	rjmp	.+10     	; 0x330a <vfprintf+0x27c>
    3300:	20 e1       	ldi	r18, 0x10	; 16
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	02 c0       	rjmp	.+4      	; 0x330a <vfprintf+0x27c>
    3306:	20 e1       	ldi	r18, 0x10	; 16
    3308:	32 e0       	ldi	r19, 0x02	; 2
    330a:	f8 01       	movw	r30, r16
    330c:	b7 fe       	sbrs	r11, 7
    330e:	07 c0       	rjmp	.+14     	; 0x331e <vfprintf+0x290>
    3310:	60 81       	ld	r22, Z
    3312:	71 81       	ldd	r23, Z+1	; 0x01
    3314:	82 81       	ldd	r24, Z+2	; 0x02
    3316:	93 81       	ldd	r25, Z+3	; 0x03
    3318:	0c 5f       	subi	r16, 0xFC	; 252
    331a:	1f 4f       	sbci	r17, 0xFF	; 255
    331c:	06 c0       	rjmp	.+12     	; 0x332a <vfprintf+0x29c>
    331e:	60 81       	ld	r22, Z
    3320:	71 81       	ldd	r23, Z+1	; 0x01
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	0e 5f       	subi	r16, 0xFE	; 254
    3328:	1f 4f       	sbci	r17, 0xFF	; 255
    332a:	a3 01       	movw	r20, r6
    332c:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__ultoa_invert>
    3330:	88 2e       	mov	r8, r24
    3332:	86 18       	sub	r8, r6
    3334:	fb 2d       	mov	r31, r11
    3336:	ff 77       	andi	r31, 0x7F	; 127
    3338:	3f 2e       	mov	r3, r31
    333a:	36 fe       	sbrs	r3, 6
    333c:	0d c0       	rjmp	.+26     	; 0x3358 <vfprintf+0x2ca>
    333e:	23 2d       	mov	r18, r3
    3340:	2e 7f       	andi	r18, 0xFE	; 254
    3342:	a2 2e       	mov	r10, r18
    3344:	89 14       	cp	r8, r9
    3346:	58 f4       	brcc	.+22     	; 0x335e <vfprintf+0x2d0>
    3348:	34 fe       	sbrs	r3, 4
    334a:	0b c0       	rjmp	.+22     	; 0x3362 <vfprintf+0x2d4>
    334c:	32 fc       	sbrc	r3, 2
    334e:	09 c0       	rjmp	.+18     	; 0x3362 <vfprintf+0x2d4>
    3350:	83 2d       	mov	r24, r3
    3352:	8e 7e       	andi	r24, 0xEE	; 238
    3354:	a8 2e       	mov	r10, r24
    3356:	05 c0       	rjmp	.+10     	; 0x3362 <vfprintf+0x2d4>
    3358:	b8 2c       	mov	r11, r8
    335a:	a3 2c       	mov	r10, r3
    335c:	03 c0       	rjmp	.+6      	; 0x3364 <vfprintf+0x2d6>
    335e:	b8 2c       	mov	r11, r8
    3360:	01 c0       	rjmp	.+2      	; 0x3364 <vfprintf+0x2d6>
    3362:	b9 2c       	mov	r11, r9
    3364:	a4 fe       	sbrs	r10, 4
    3366:	0f c0       	rjmp	.+30     	; 0x3386 <vfprintf+0x2f8>
    3368:	fe 01       	movw	r30, r28
    336a:	e8 0d       	add	r30, r8
    336c:	f1 1d       	adc	r31, r1
    336e:	80 81       	ld	r24, Z
    3370:	80 33       	cpi	r24, 0x30	; 48
    3372:	21 f4       	brne	.+8      	; 0x337c <vfprintf+0x2ee>
    3374:	9a 2d       	mov	r25, r10
    3376:	99 7e       	andi	r25, 0xE9	; 233
    3378:	a9 2e       	mov	r10, r25
    337a:	09 c0       	rjmp	.+18     	; 0x338e <vfprintf+0x300>
    337c:	a2 fe       	sbrs	r10, 2
    337e:	06 c0       	rjmp	.+12     	; 0x338c <vfprintf+0x2fe>
    3380:	b3 94       	inc	r11
    3382:	b3 94       	inc	r11
    3384:	04 c0       	rjmp	.+8      	; 0x338e <vfprintf+0x300>
    3386:	8a 2d       	mov	r24, r10
    3388:	86 78       	andi	r24, 0x86	; 134
    338a:	09 f0       	breq	.+2      	; 0x338e <vfprintf+0x300>
    338c:	b3 94       	inc	r11
    338e:	a3 fc       	sbrc	r10, 3
    3390:	11 c0       	rjmp	.+34     	; 0x33b4 <vfprintf+0x326>
    3392:	a0 fe       	sbrs	r10, 0
    3394:	06 c0       	rjmp	.+12     	; 0x33a2 <vfprintf+0x314>
    3396:	b2 14       	cp	r11, r2
    3398:	88 f4       	brcc	.+34     	; 0x33bc <vfprintf+0x32e>
    339a:	28 0c       	add	r2, r8
    339c:	92 2c       	mov	r9, r2
    339e:	9b 18       	sub	r9, r11
    33a0:	0e c0       	rjmp	.+28     	; 0x33be <vfprintf+0x330>
    33a2:	b2 14       	cp	r11, r2
    33a4:	60 f4       	brcc	.+24     	; 0x33be <vfprintf+0x330>
    33a6:	b6 01       	movw	r22, r12
    33a8:	80 e2       	ldi	r24, 0x20	; 32
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	0e 94 3e 1a 	call	0x347c	; 0x347c <fputc>
    33b0:	b3 94       	inc	r11
    33b2:	f7 cf       	rjmp	.-18     	; 0x33a2 <vfprintf+0x314>
    33b4:	b2 14       	cp	r11, r2
    33b6:	18 f4       	brcc	.+6      	; 0x33be <vfprintf+0x330>
    33b8:	2b 18       	sub	r2, r11
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <vfprintf+0x332>
    33bc:	98 2c       	mov	r9, r8
    33be:	21 2c       	mov	r2, r1
    33c0:	a4 fe       	sbrs	r10, 4
    33c2:	10 c0       	rjmp	.+32     	; 0x33e4 <vfprintf+0x356>
    33c4:	b6 01       	movw	r22, r12
    33c6:	80 e3       	ldi	r24, 0x30	; 48
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	0e 94 3e 1a 	call	0x347c	; 0x347c <fputc>
    33ce:	a2 fe       	sbrs	r10, 2
    33d0:	17 c0       	rjmp	.+46     	; 0x3400 <vfprintf+0x372>
    33d2:	a1 fc       	sbrc	r10, 1
    33d4:	03 c0       	rjmp	.+6      	; 0x33dc <vfprintf+0x34e>
    33d6:	88 e7       	ldi	r24, 0x78	; 120
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <vfprintf+0x352>
    33dc:	88 e5       	ldi	r24, 0x58	; 88
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	b6 01       	movw	r22, r12
    33e2:	0c c0       	rjmp	.+24     	; 0x33fc <vfprintf+0x36e>
    33e4:	8a 2d       	mov	r24, r10
    33e6:	86 78       	andi	r24, 0x86	; 134
    33e8:	59 f0       	breq	.+22     	; 0x3400 <vfprintf+0x372>
    33ea:	a1 fe       	sbrs	r10, 1
    33ec:	02 c0       	rjmp	.+4      	; 0x33f2 <vfprintf+0x364>
    33ee:	8b e2       	ldi	r24, 0x2B	; 43
    33f0:	01 c0       	rjmp	.+2      	; 0x33f4 <vfprintf+0x366>
    33f2:	80 e2       	ldi	r24, 0x20	; 32
    33f4:	a7 fc       	sbrc	r10, 7
    33f6:	8d e2       	ldi	r24, 0x2D	; 45
    33f8:	b6 01       	movw	r22, r12
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	0e 94 3e 1a 	call	0x347c	; 0x347c <fputc>
    3400:	89 14       	cp	r8, r9
    3402:	38 f4       	brcc	.+14     	; 0x3412 <vfprintf+0x384>
    3404:	b6 01       	movw	r22, r12
    3406:	80 e3       	ldi	r24, 0x30	; 48
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	0e 94 3e 1a 	call	0x347c	; 0x347c <fputc>
    340e:	9a 94       	dec	r9
    3410:	f7 cf       	rjmp	.-18     	; 0x3400 <vfprintf+0x372>
    3412:	8a 94       	dec	r8
    3414:	f3 01       	movw	r30, r6
    3416:	e8 0d       	add	r30, r8
    3418:	f1 1d       	adc	r31, r1
    341a:	80 81       	ld	r24, Z
    341c:	b6 01       	movw	r22, r12
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	0e 94 3e 1a 	call	0x347c	; 0x347c <fputc>
    3424:	81 10       	cpse	r8, r1
    3426:	f5 cf       	rjmp	.-22     	; 0x3412 <vfprintf+0x384>
    3428:	22 20       	and	r2, r2
    342a:	09 f4       	brne	.+2      	; 0x342e <vfprintf+0x3a0>
    342c:	42 ce       	rjmp	.-892    	; 0x30b2 <vfprintf+0x24>
    342e:	b6 01       	movw	r22, r12
    3430:	80 e2       	ldi	r24, 0x20	; 32
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	0e 94 3e 1a 	call	0x347c	; 0x347c <fputc>
    3438:	2a 94       	dec	r2
    343a:	f6 cf       	rjmp	.-20     	; 0x3428 <vfprintf+0x39a>
    343c:	f6 01       	movw	r30, r12
    343e:	86 81       	ldd	r24, Z+6	; 0x06
    3440:	97 81       	ldd	r25, Z+7	; 0x07
    3442:	02 c0       	rjmp	.+4      	; 0x3448 <vfprintf+0x3ba>
    3444:	8f ef       	ldi	r24, 0xFF	; 255
    3446:	9f ef       	ldi	r25, 0xFF	; 255
    3448:	2b 96       	adiw	r28, 0x0b	; 11
    344a:	e2 e1       	ldi	r30, 0x12	; 18
    344c:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__epilogue_restores__>

00003450 <strnlen_P>:
    3450:	fc 01       	movw	r30, r24
    3452:	05 90       	lpm	r0, Z+
    3454:	61 50       	subi	r22, 0x01	; 1
    3456:	70 40       	sbci	r23, 0x00	; 0
    3458:	01 10       	cpse	r0, r1
    345a:	d8 f7       	brcc	.-10     	; 0x3452 <strnlen_P+0x2>
    345c:	80 95       	com	r24
    345e:	90 95       	com	r25
    3460:	8e 0f       	add	r24, r30
    3462:	9f 1f       	adc	r25, r31
    3464:	08 95       	ret

00003466 <strnlen>:
    3466:	fc 01       	movw	r30, r24
    3468:	61 50       	subi	r22, 0x01	; 1
    346a:	70 40       	sbci	r23, 0x00	; 0
    346c:	01 90       	ld	r0, Z+
    346e:	01 10       	cpse	r0, r1
    3470:	d8 f7       	brcc	.-10     	; 0x3468 <strnlen+0x2>
    3472:	80 95       	com	r24
    3474:	90 95       	com	r25
    3476:	8e 0f       	add	r24, r30
    3478:	9f 1f       	adc	r25, r31
    347a:	08 95       	ret

0000347c <fputc>:
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	fb 01       	movw	r30, r22
    3486:	23 81       	ldd	r18, Z+3	; 0x03
    3488:	21 fd       	sbrc	r18, 1
    348a:	03 c0       	rjmp	.+6      	; 0x3492 <fputc+0x16>
    348c:	8f ef       	ldi	r24, 0xFF	; 255
    348e:	9f ef       	ldi	r25, 0xFF	; 255
    3490:	2c c0       	rjmp	.+88     	; 0x34ea <fputc+0x6e>
    3492:	22 ff       	sbrs	r18, 2
    3494:	16 c0       	rjmp	.+44     	; 0x34c2 <fputc+0x46>
    3496:	46 81       	ldd	r20, Z+6	; 0x06
    3498:	57 81       	ldd	r21, Z+7	; 0x07
    349a:	24 81       	ldd	r18, Z+4	; 0x04
    349c:	35 81       	ldd	r19, Z+5	; 0x05
    349e:	42 17       	cp	r20, r18
    34a0:	53 07       	cpc	r21, r19
    34a2:	44 f4       	brge	.+16     	; 0x34b4 <fputc+0x38>
    34a4:	a0 81       	ld	r26, Z
    34a6:	b1 81       	ldd	r27, Z+1	; 0x01
    34a8:	9d 01       	movw	r18, r26
    34aa:	2f 5f       	subi	r18, 0xFF	; 255
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
    34ae:	31 83       	std	Z+1, r19	; 0x01
    34b0:	20 83       	st	Z, r18
    34b2:	8c 93       	st	X, r24
    34b4:	26 81       	ldd	r18, Z+6	; 0x06
    34b6:	37 81       	ldd	r19, Z+7	; 0x07
    34b8:	2f 5f       	subi	r18, 0xFF	; 255
    34ba:	3f 4f       	sbci	r19, 0xFF	; 255
    34bc:	37 83       	std	Z+7, r19	; 0x07
    34be:	26 83       	std	Z+6, r18	; 0x06
    34c0:	14 c0       	rjmp	.+40     	; 0x34ea <fputc+0x6e>
    34c2:	8b 01       	movw	r16, r22
    34c4:	ec 01       	movw	r28, r24
    34c6:	fb 01       	movw	r30, r22
    34c8:	00 84       	ldd	r0, Z+8	; 0x08
    34ca:	f1 85       	ldd	r31, Z+9	; 0x09
    34cc:	e0 2d       	mov	r30, r0
    34ce:	09 95       	icall
    34d0:	89 2b       	or	r24, r25
    34d2:	e1 f6       	brne	.-72     	; 0x348c <fputc+0x10>
    34d4:	d8 01       	movw	r26, r16
    34d6:	16 96       	adiw	r26, 0x06	; 6
    34d8:	8d 91       	ld	r24, X+
    34da:	9c 91       	ld	r25, X
    34dc:	17 97       	sbiw	r26, 0x07	; 7
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	17 96       	adiw	r26, 0x07	; 7
    34e2:	9c 93       	st	X, r25
    34e4:	8e 93       	st	-X, r24
    34e6:	16 97       	sbiw	r26, 0x06	; 6
    34e8:	ce 01       	movw	r24, r28
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	08 95       	ret

000034f4 <__ultoa_invert>:
    34f4:	fa 01       	movw	r30, r20
    34f6:	aa 27       	eor	r26, r26
    34f8:	28 30       	cpi	r18, 0x08	; 8
    34fa:	51 f1       	breq	.+84     	; 0x3550 <__ultoa_invert+0x5c>
    34fc:	20 31       	cpi	r18, 0x10	; 16
    34fe:	81 f1       	breq	.+96     	; 0x3560 <__ultoa_invert+0x6c>
    3500:	e8 94       	clt
    3502:	6f 93       	push	r22
    3504:	6e 7f       	andi	r22, 0xFE	; 254
    3506:	6e 5f       	subi	r22, 0xFE	; 254
    3508:	7f 4f       	sbci	r23, 0xFF	; 255
    350a:	8f 4f       	sbci	r24, 0xFF	; 255
    350c:	9f 4f       	sbci	r25, 0xFF	; 255
    350e:	af 4f       	sbci	r26, 0xFF	; 255
    3510:	b1 e0       	ldi	r27, 0x01	; 1
    3512:	3e d0       	rcall	.+124    	; 0x3590 <__ultoa_invert+0x9c>
    3514:	b4 e0       	ldi	r27, 0x04	; 4
    3516:	3c d0       	rcall	.+120    	; 0x3590 <__ultoa_invert+0x9c>
    3518:	67 0f       	add	r22, r23
    351a:	78 1f       	adc	r23, r24
    351c:	89 1f       	adc	r24, r25
    351e:	9a 1f       	adc	r25, r26
    3520:	a1 1d       	adc	r26, r1
    3522:	68 0f       	add	r22, r24
    3524:	79 1f       	adc	r23, r25
    3526:	8a 1f       	adc	r24, r26
    3528:	91 1d       	adc	r25, r1
    352a:	a1 1d       	adc	r26, r1
    352c:	6a 0f       	add	r22, r26
    352e:	71 1d       	adc	r23, r1
    3530:	81 1d       	adc	r24, r1
    3532:	91 1d       	adc	r25, r1
    3534:	a1 1d       	adc	r26, r1
    3536:	20 d0       	rcall	.+64     	; 0x3578 <__ultoa_invert+0x84>
    3538:	09 f4       	brne	.+2      	; 0x353c <__ultoa_invert+0x48>
    353a:	68 94       	set
    353c:	3f 91       	pop	r19
    353e:	2a e0       	ldi	r18, 0x0A	; 10
    3540:	26 9f       	mul	r18, r22
    3542:	11 24       	eor	r1, r1
    3544:	30 19       	sub	r19, r0
    3546:	30 5d       	subi	r19, 0xD0	; 208
    3548:	31 93       	st	Z+, r19
    354a:	de f6       	brtc	.-74     	; 0x3502 <__ultoa_invert+0xe>
    354c:	cf 01       	movw	r24, r30
    354e:	08 95       	ret
    3550:	46 2f       	mov	r20, r22
    3552:	47 70       	andi	r20, 0x07	; 7
    3554:	40 5d       	subi	r20, 0xD0	; 208
    3556:	41 93       	st	Z+, r20
    3558:	b3 e0       	ldi	r27, 0x03	; 3
    355a:	0f d0       	rcall	.+30     	; 0x357a <__ultoa_invert+0x86>
    355c:	c9 f7       	brne	.-14     	; 0x3550 <__ultoa_invert+0x5c>
    355e:	f6 cf       	rjmp	.-20     	; 0x354c <__ultoa_invert+0x58>
    3560:	46 2f       	mov	r20, r22
    3562:	4f 70       	andi	r20, 0x0F	; 15
    3564:	40 5d       	subi	r20, 0xD0	; 208
    3566:	4a 33       	cpi	r20, 0x3A	; 58
    3568:	18 f0       	brcs	.+6      	; 0x3570 <__ultoa_invert+0x7c>
    356a:	49 5d       	subi	r20, 0xD9	; 217
    356c:	31 fd       	sbrc	r19, 1
    356e:	40 52       	subi	r20, 0x20	; 32
    3570:	41 93       	st	Z+, r20
    3572:	02 d0       	rcall	.+4      	; 0x3578 <__ultoa_invert+0x84>
    3574:	a9 f7       	brne	.-22     	; 0x3560 <__ultoa_invert+0x6c>
    3576:	ea cf       	rjmp	.-44     	; 0x354c <__ultoa_invert+0x58>
    3578:	b4 e0       	ldi	r27, 0x04	; 4
    357a:	a6 95       	lsr	r26
    357c:	97 95       	ror	r25
    357e:	87 95       	ror	r24
    3580:	77 95       	ror	r23
    3582:	67 95       	ror	r22
    3584:	ba 95       	dec	r27
    3586:	c9 f7       	brne	.-14     	; 0x357a <__ultoa_invert+0x86>
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	61 05       	cpc	r22, r1
    358c:	71 05       	cpc	r23, r1
    358e:	08 95       	ret
    3590:	9b 01       	movw	r18, r22
    3592:	ac 01       	movw	r20, r24
    3594:	0a 2e       	mov	r0, r26
    3596:	06 94       	lsr	r0
    3598:	57 95       	ror	r21
    359a:	47 95       	ror	r20
    359c:	37 95       	ror	r19
    359e:	27 95       	ror	r18
    35a0:	ba 95       	dec	r27
    35a2:	c9 f7       	brne	.-14     	; 0x3596 <__ultoa_invert+0xa2>
    35a4:	62 0f       	add	r22, r18
    35a6:	73 1f       	adc	r23, r19
    35a8:	84 1f       	adc	r24, r20
    35aa:	95 1f       	adc	r25, r21
    35ac:	a0 1d       	adc	r26, r0
    35ae:	08 95       	ret

000035b0 <__prologue_saves__>:
    35b0:	2f 92       	push	r2
    35b2:	3f 92       	push	r3
    35b4:	4f 92       	push	r4
    35b6:	5f 92       	push	r5
    35b8:	6f 92       	push	r6
    35ba:	7f 92       	push	r7
    35bc:	8f 92       	push	r8
    35be:	9f 92       	push	r9
    35c0:	af 92       	push	r10
    35c2:	bf 92       	push	r11
    35c4:	cf 92       	push	r12
    35c6:	df 92       	push	r13
    35c8:	ef 92       	push	r14
    35ca:	ff 92       	push	r15
    35cc:	0f 93       	push	r16
    35ce:	1f 93       	push	r17
    35d0:	cf 93       	push	r28
    35d2:	df 93       	push	r29
    35d4:	cd b7       	in	r28, 0x3d	; 61
    35d6:	de b7       	in	r29, 0x3e	; 62
    35d8:	ca 1b       	sub	r28, r26
    35da:	db 0b       	sbc	r29, r27
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	de bf       	out	0x3e, r29	; 62
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	cd bf       	out	0x3d, r28	; 61
    35e6:	09 94       	ijmp

000035e8 <__epilogue_restores__>:
    35e8:	2a 88       	ldd	r2, Y+18	; 0x12
    35ea:	39 88       	ldd	r3, Y+17	; 0x11
    35ec:	48 88       	ldd	r4, Y+16	; 0x10
    35ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    35f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    35f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    35f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    35f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    35f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    35fa:	b9 84       	ldd	r11, Y+9	; 0x09
    35fc:	c8 84       	ldd	r12, Y+8	; 0x08
    35fe:	df 80       	ldd	r13, Y+7	; 0x07
    3600:	ee 80       	ldd	r14, Y+6	; 0x06
    3602:	fd 80       	ldd	r15, Y+5	; 0x05
    3604:	0c 81       	ldd	r16, Y+4	; 0x04
    3606:	1b 81       	ldd	r17, Y+3	; 0x03
    3608:	aa 81       	ldd	r26, Y+2	; 0x02
    360a:	b9 81       	ldd	r27, Y+1	; 0x01
    360c:	ce 0f       	add	r28, r30
    360e:	d1 1d       	adc	r29, r1
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	de bf       	out	0x3e, r29	; 62
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	cd bf       	out	0x3d, r28	; 61
    361a:	ed 01       	movw	r28, r26
    361c:	08 95       	ret

0000361e <_exit>:
    361e:	f8 94       	cli

00003620 <__stop_program>:
    3620:	ff cf       	rjmp	.-2      	; 0x3620 <__stop_program>
